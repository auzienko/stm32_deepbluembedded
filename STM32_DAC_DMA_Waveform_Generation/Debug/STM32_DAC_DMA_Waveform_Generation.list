
STM32_DAC_DMA_Waveform_Generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004790  08004790  00014790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004978  08004978  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  0800498c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800498c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f30f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3d  00000000  00000000  0002f34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00032088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002543f  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6fb  00000000  00000000  000581df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4edd  00000000  00000000  000668da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b7b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  0015b80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004774 	.word	0x08004774

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004774 	.word	0x08004774

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	0000      	movs	r0, r0
	...

08000b58 <calcsin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calcsin ()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  for (int i=0; i<100; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e03a      	b.n	8000bda <calcsin+0x82>
  {
    sine_val[i] = (uint32_t)((sin(i*2*PI/100) + 1)*(4096/2));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fca7 	bl	80004bc <__aeabi_i2d>
 8000b6e:	a324      	add	r3, pc, #144	; (adr r3, 8000c00 <calcsin+0xa8>)
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	f7ff fd0c 	bl	8000590 <__aeabi_dmul>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <calcsin+0x98>)
 8000b86:	f7ff fe2d 	bl	80007e4 <__aeabi_ddiv>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	ec43 2b17 	vmov	d7, r2, r3
 8000b92:	eeb0 0a47 	vmov.f32	s0, s14
 8000b96:	eef0 0a67 	vmov.f32	s1, s15
 8000b9a:	f002 fdb5 	bl	8003708 <sin>
 8000b9e:	ec51 0b10 	vmov	r0, r1, d0
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <calcsin+0x9c>)
 8000ba8:	f7ff fb3c 	bl	8000224 <__adddf3>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <calcsin+0xa0>)
 8000bba:	f7ff fce9 	bl	8000590 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff ffa5 	bl	8000b14 <__aeabi_d2uiz>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	490b      	ldr	r1, [pc, #44]	; (8000bfc <calcsin+0xa4>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i=0; i<100; i++)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b63      	cmp	r3, #99	; 0x63
 8000bde:	ddc1      	ble.n	8000b64 <calcsin+0xc>
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	f3af 8000 	nop.w
 8000bf0:	40590000 	.word	0x40590000
 8000bf4:	3ff00000 	.word	0x3ff00000
 8000bf8:	40a00000 	.word	0x40a00000
 8000bfc:	2000003c 	.word	0x2000003c
 8000c00:	4d12d84a 	.word	0x4d12d84a
 8000c04:	400921fb 	.word	0x400921fb

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fac8 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f81d 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 f917 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c1a:	f000 f8eb 	bl	8000df4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c1e:	f000 f861 	bl	8000ce4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000c22:	f000 f899 	bl	8000d58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <main+0x3c>)
 8000c28:	f002 f9e4 	bl	8002ff4 <HAL_TIM_Base_Start>
  calcsin();
 8000c2c:	f7ff ff94 	bl	8000b58 <calcsin>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <main+0x40>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <main+0x44>)
 8000c3c:	f000 fc76 	bl	800152c <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0x38>
 8000c42:	bf00      	nop
 8000c44:	2000022c 	.word	0x2000022c
 8000c48:	2000003c 	.word	0x2000003c
 8000c4c:	20000028 	.word	0x20000028

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2238      	movs	r2, #56	; 0x38
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fd48 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c76:	f001 fba9 	bl	80023cc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c90:	2314      	movs	r3, #20
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fc45 	bl	8002534 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000cb0:	f000 f94a 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 ff49 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 f936 	bl	8000f48 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	; 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2230      	movs	r2, #48	; 0x30
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fcff 	bl	80036f4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_DAC1_Init+0x6c>)
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <MX_DAC1_Init+0x70>)
 8000cfa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cfc:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_DAC1_Init+0x6c>)
 8000cfe:	f000 fbf2 	bl	80014e6 <HAL_DAC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d08:	f000 f91e 	bl	8000f48 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_DAC1_Init+0x6c>)
 8000d38:	f000 fce6 	bl	8001708 <HAL_DAC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000d42:	f000 f901 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	; 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000028 	.word	0x20000028
 8000d54:	50000800 	.word	0x50000800

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d80:	224f      	movs	r2, #79	; 0x4f
 8000d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000da0:	f002 f8d0 	bl	8002f44 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000daa:	f000 f8cd 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dbc:	f002 f98a 	bl	80030d4 <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f8bf 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dd8:	f002 fbd2 	bl	8003580 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000de2:	f000 f8b1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000022c 	.word	0x2000022c

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_DMA_Init+0x50>)
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <MX_DMA_Init+0x50>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6493      	str	r3, [r2, #72]	; 0x48
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_DMA_Init+0x50>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_DMA_Init+0x50>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <MX_DMA_Init+0x50>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_DMA_Init+0x50>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	200b      	movs	r0, #11
 8000e30:	f000 fb25 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e34:	200b      	movs	r0, #11
 8000e36:	f000 fb3c 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_GPIO_Init+0xf4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f001 fa45 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_GPIO_Init+0xf8>)
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4819      	ldr	r0, [pc, #100]	; (8000f44 <MX_GPIO_Init+0xfc>)
 8000ee0:	f001 f8b6 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 f8a5 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f06:	2320      	movs	r3, #32
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 f896 	bl	8002050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f000 faa8 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f000 fabf 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	10110000 	.word	0x10110000
 8000f44:	48000800 	.word	0x48000800

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	; 0x60
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f8a:	f001 fac3 	bl	8002514 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <HAL_DAC_MspInit+0xcc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d14f      	bne.n	800105e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_DAC_MspInit+0xd0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f001 f824 	bl	8002050 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 800100a:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <HAL_DAC_MspInit+0xd8>)
 800100c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001010:	2206      	movs	r2, #6
 8001012:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001016:	2210      	movs	r2, #16
 8001018:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001034:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001038:	2220      	movs	r2, #32
 800103a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001044:	f000 fd92 	bl	8001b6c <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800104e:	f7ff ff7b 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_DAC_MspInit+0xd4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	50000800 	.word	0x50000800
 800106c:	40021000 	.word	0x40021000
 8001070:	200001cc 	.word	0x200001cc
 8001074:	40020008 	.word	0x40020008

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d10b      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f8a2 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA1_Channel1_IRQHandler+0x10>)
 800110e:	f000 fe50 	bl	8001db2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001cc 	.word	0x200001cc

0800111c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001120:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001124:	f001 f92e 	bl	8002384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f002 fa95 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fd41 	bl	8000c08 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001194:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8001198:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800119c:	2000027c 	.word	0x2000027c

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>

080011a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f95b 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f80e 	bl	80011d4 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fec6 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d022      	beq.n	800122e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_InitTick+0x6c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f966 	bl	80014ce <HAL_SYSTICK_Config>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d809      	bhi.n	8001222 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001216:	f000 f932 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x70>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e007      	b.n	8001232 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e004      	b.n	8001232 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000008 	.word	0x20000008
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x1c>)
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000278 	.word	0x20000278
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000278 	.word	0x20000278

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800129c:	d004      	beq.n	80012a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_Delay+0x40>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a8:	bf00      	nop
 80012aa:	f7ff ffdf 	bl	800126c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d8f7      	bhi.n	80012aa <HAL_Delay+0x26>
  {
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff40 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff33 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa4 	bl	8001424 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e014      	b.n	8001522 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d105      	bne.n	800150e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fd47 	bl	8000f9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DAC_Start_DMA+0x22>
 800154a:	2302      	movs	r3, #2
 800154c:	e0ae      	b.n	80016ac <HAL_DAC_Start_DMA+0x180>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2202      	movs	r2, #2
 8001558:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12f      	bne.n	80015c0 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a53      	ldr	r2, [pc, #332]	; (80016b4 <HAL_DAC_Start_DMA+0x188>)
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_DAC_Start_DMA+0x18c>)
 800156e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_DAC_Start_DMA+0x190>)
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001586:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d013      	beq.n	80015b6 <HAL_DAC_Start_DMA+0x8a>
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d845      	bhi.n	8001620 <HAL_DAC_Start_DMA+0xf4>
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_DAC_Start_DMA+0x76>
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015a0:	e03e      	b.n	8001620 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3308      	adds	r3, #8
 80015a8:	613b      	str	r3, [r7, #16]
        break;
 80015aa:	e03c      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	330c      	adds	r3, #12
 80015b2:	613b      	str	r3, [r7, #16]
        break;
 80015b4:	e037      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3310      	adds	r3, #16
 80015bc:	613b      	str	r3, [r7, #16]
        break;
 80015be:	e032      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_DAC_Start_DMA+0x194>)
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_DAC_Start_DMA+0x198>)
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a3c      	ldr	r2, [pc, #240]	; (80016c8 <HAL_DAC_Start_DMA+0x19c>)
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d013      	beq.n	8001616 <HAL_DAC_Start_DMA+0xea>
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d817      	bhi.n	8001624 <HAL_DAC_Start_DMA+0xf8>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DAC_Start_DMA+0xd6>
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d005      	beq.n	800160c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001600:	e010      	b.n	8001624 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3314      	adds	r3, #20
 8001608:	613b      	str	r3, [r7, #16]
        break;
 800160a:	e00c      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3318      	adds	r3, #24
 8001612:	613b      	str	r3, [r7, #16]
        break;
 8001614:	e007      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	331c      	adds	r3, #28
 800161c:	613b      	str	r3, [r7, #16]
        break;
 800161e:	e002      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001620:	bf00      	nop
 8001622:	e000      	b.n	8001626 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001624:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d111      	bne.n	8001650 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800163a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6898      	ldr	r0, [r3, #8]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	f000 fb39 	bl	8001cbc <HAL_DMA_Start_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
 800164e:	e010      	b.n	8001672 <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800165e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68d8      	ldr	r0, [r3, #12]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	f000 fb27 	bl	8001cbc <HAL_DMA_Start_IT>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_DAC_Start_DMA+0x172>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2201      	movs	r2, #1
 800168c:	409a      	lsls	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fdf4 	bl	8001284 <HAL_Delay>
 800169c:	e005      	b.n	80016aa <HAL_DAC_Start_DMA+0x17e>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f043 0204 	orr.w	r2, r3, #4
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08001a59 	.word	0x08001a59
 80016b8:	08001a7b 	.word	0x08001a7b
 80016bc:	08001a97 	.word	0x08001a97
 80016c0:	08001b01 	.word	0x08001b01
 80016c4:	08001b23 	.word	0x08001b23
 80016c8:	08001b3f 	.word	0x08001b3f

080016cc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	795b      	ldrb	r3, [r3, #5]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_DAC_ConfigChannel+0x18>
 800171c:	2302      	movs	r3, #2
 800171e:	e192      	b.n	8001a46 <HAL_DAC_ConfigChannel+0x33e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2202      	movs	r2, #2
 800172a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d174      	bne.n	800181e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001734:	f7ff fd9a 	bl	800126c <HAL_GetTick>
 8001738:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d134      	bne.n	80017aa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001740:	e011      	b.n	8001766 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001742:	f7ff fd93 	bl	800126c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d90a      	bls.n	8001766 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f043 0208 	orr.w	r2, r3, #8
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2203      	movs	r2, #3
 8001760:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e16f      	b.n	8001a46 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e6      	bne.n	8001742 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fd85 	bl	8001284 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
 8001784:	e01e      	b.n	80017c4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001786:	f7ff fd71 	bl	800126c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d90a      	bls.n	80017aa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f043 0208 	orr.w	r2, r3, #8
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2203      	movs	r2, #3
 80017a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e14d      	b.n	8001a46 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dbe8      	blt.n	8001786 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fd65 	bl	8001284 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	ea02 0103 	and.w	r1, r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	409a      	lsls	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	21ff      	movs	r1, #255	; 0xff
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	ea02 0103 	and.w	r1, r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d11d      	bne.n	8001862 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	4013      	ands	r3, r2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	4313      	orrs	r3, r2
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2207      	movs	r2, #7
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	4013      	ands	r3, r2
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	e00f      	b.n	80018ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d102      	bne.n	800189a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	e008      	b.n	80018ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	e001      	b.n	80018ac <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	4013      	ands	r3, r2
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_DAC_ConfigChannel+0x1d8>
 80018da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018de:	e000      	b.n	80018e2 <HAL_DAC_ConfigChannel+0x1da>
 80018e0:	2300      	movs	r3, #0
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	4013      	ands	r3, r2
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	795b      	ldrb	r3, [r3, #5]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_DAC_ConfigChannel+0x204>
 8001906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190a:	e000      	b.n	800190e <HAL_DAC_ConfigChannel+0x206>
 800190c:	2300      	movs	r3, #0
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d114      	bne.n	800194e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001924:	f001 fabc 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8001928:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_DAC_ConfigChannel+0x348>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d904      	bls.n	800193c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	e00f      	b.n	800195c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_DAC_ConfigChannel+0x34c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d90a      	bls.n	800195a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	e006      	b.n	800195c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4313      	orrs	r3, r2
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	e000      	b.n	800195c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800195a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	4313      	orrs	r3, r2
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	4013      	ands	r3, r2
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	4313      	orrs	r3, r2
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	22c0      	movs	r2, #192	; 0xc0
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43da      	mvns	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	400a      	ands	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	ea02 0103 	and.w	r1, r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	09896800 	.word	0x09896800
 8001a54:	04c4b400 	.word	0x04c4b400

08001a58 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fe30 	bl	80016cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	711a      	strb	r2, [r3, #4]
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fe29 	bl	80016e0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f043 0204 	orr.w	r2, r3, #4
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fe1f 	bl	80016f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	711a      	strb	r2, [r3, #4]
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ffd8 	bl	8001ac4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	711a      	strb	r2, [r3, #4]
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff ffd1 	bl	8001ad8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff ffc7 	bl	8001aec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	711a      	strb	r2, [r3, #4]
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e08d      	b.n	8001c9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_DMA_Init+0x138>)
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d80f      	bhi.n	8001baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_DMA_Init+0x13c>)
 8001b92:	4413      	add	r3, r2
 8001b94:	4a45      	ldr	r2, [pc, #276]	; (8001cac <HAL_DMA_Init+0x140>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_DMA_Init+0x144>)
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba8:	e00e      	b.n	8001bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_DMA_Init+0x148>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_DMA_Init+0x140>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	009a      	lsls	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_DMA_Init+0x14c>)
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f9b6 	bl	8001f8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c28:	d102      	bne.n	8001c30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_DMA_Init+0x104>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d80c      	bhi.n	8001c70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f9d6 	bl	8002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e008      	b.n	8001c82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020407 	.word	0x40020407
 8001ca8:	bffdfff8 	.word	0xbffdfff8
 8001cac:	cccccccd 	.word	0xcccccccd
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	bffdfbf8 	.word	0xbffdfbf8
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Start_IT+0x20>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e066      	b.n	8001daa <HAL_DMA_Start_IT+0xee>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d155      	bne.n	8001d9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f8fb 	bl	8001f10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 020e 	orr.w	r2, r2, #14
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e00f      	b.n	8001d54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0204 	bic.w	r2, r2, #4
 8001d42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 020a 	orr.w	r2, r2, #10
 8001d52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e005      	b.n	8001da8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d026      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x7a>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0204 	bic.w	r2, r2, #4
 8001e04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2104      	movs	r1, #4
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d071      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e2a:	e06c      	b.n	8001f06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2202      	movs	r2, #2
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d02e      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d029      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020a 	bic.w	r2, r2, #10
 8001e66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d038      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e9c:	e033      	b.n	8001f06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d02a      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d025      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020e 	bic.w	r2, r2, #14
 8001eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
}
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f003 021f 	and.w	r2, r3, #31
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d108      	bne.n	8001f70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f6e:	e007      	b.n	8001f80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d802      	bhi.n	8001fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e001      	b.n	8001faa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001fa8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3b08      	subs	r3, #8
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2201      	movs	r2, #1
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40020407 	.word	0x40020407
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020820 	.word	0x40020820
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	40020880 	.word	0x40020880

08002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	1000823f 	.word	0x1000823f
 800204c:	40020940 	.word	0x40020940

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800205e:	e15a      	b.n	8002316 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 814c 	beq.w	8002310 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d00b      	beq.n	8002098 <HAL_GPIO_Init+0x48>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208c:	2b11      	cmp	r3, #17
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b12      	cmp	r3, #18
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0xea>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b12      	cmp	r3, #18
 8002138:	d123      	bne.n	8002182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0203 	and.w	r2, r3, #3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a6 	beq.w	8002310 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_GPIO_Init+0x2e4>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	4a5a      	ldr	r2, [pc, #360]	; (8002334 <HAL_GPIO_Init+0x2e4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6613      	str	r3, [r2, #96]	; 0x60
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x2e4>)
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021dc:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002206:	d01f      	beq.n	8002248 <HAL_GPIO_Init+0x1f8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_GPIO_Init+0x2ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d019      	beq.n	8002244 <HAL_GPIO_Init+0x1f4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <HAL_GPIO_Init+0x2f0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1f0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <HAL_GPIO_Init+0x2f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1ec>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2fc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002230:	2305      	movs	r3, #5
 8002232:	e00a      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 8002234:	2306      	movs	r3, #6
 8002236:	e008      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 8002238:	2304      	movs	r3, #4
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1fa>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225a:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_GPIO_Init+0x300>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228c:	4a30      	ldr	r2, [pc, #192]	; (8002350 <HAL_GPIO_Init+0x300>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x300>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_GPIO_Init+0x300>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_GPIO_Init+0x300>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_GPIO_Init+0x300>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x300>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230a:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_GPIO_Init+0x300>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f ae9d 	bne.w	8002060 <HAL_GPIO_Init+0x10>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	48001400 	.word	0x48001400
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002370:	e002      	b.n	8002378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f806 	bl	80023b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d141      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023da:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d131      	bne.n	800244c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ee:	4a46      	ldr	r2, [pc, #280]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002400:	4a41      	ldr	r2, [pc, #260]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002408:	4b40      	ldr	r3, [pc, #256]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2232      	movs	r2, #50	; 0x32
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241e:	e002      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002432:	d102      	bne.n	800243a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f2      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002446:	d158      	bne.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e057      	b.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002452:	4a2d      	ldr	r2, [pc, #180]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800245c:	e04d      	b.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d141      	bne.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d131      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2232      	movs	r2, #50	; 0x32
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024aa:	e002      	b.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024be:	d102      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f2      	bne.n	80024ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d2:	d112      	bne.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e011      	b.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024e8:	e007      	b.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40007000 	.word	0x40007000
 800250c:	20000000 	.word	0x20000000
 8002510:	431bde83 	.word	0x431bde83

08002514 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800251e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002522:	6093      	str	r3, [r2, #8]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40007000 	.word	0x40007000

08002534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e308      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d075      	beq.n	800263e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002552:	4ba3      	ldr	r3, [pc, #652]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255c:	4ba0      	ldr	r3, [pc, #640]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x3e>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d002      	beq.n	8002578 <HAL_RCC_OscConfig+0x44>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d10b      	bne.n	8002590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	4b99      	ldr	r3, [pc, #612]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05b      	beq.n	800263c <HAL_RCC_OscConfig+0x108>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d157      	bne.n	800263c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e2e3      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x74>
 800259a:	4b91      	ldr	r3, [pc, #580]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x98>
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a8a      	ldr	r2, [pc, #552]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a87      	ldr	r2, [pc, #540]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025cc:	4b84      	ldr	r3, [pc, #528]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a83      	ldr	r2, [pc, #524]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe3e 	bl	800126c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fe3a 	bl	800126c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2a8      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xc0>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fe2a 	bl	800126c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fe26 	bl	800126c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e294      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262e:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0xe8>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002654:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b0c      	cmp	r3, #12
 8002662:	d102      	bne.n	800266a <HAL_RCC_OscConfig+0x136>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d002      	beq.n	8002670 <HAL_RCC_OscConfig+0x13c>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11f      	bne.n	80026b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_OscConfig+0x154>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e267      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	4952      	ldr	r1, [pc, #328]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800269c:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_RCC_OscConfig+0x2b0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fd97 	bl	80011d4 <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e253      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a48      	ldr	r2, [pc, #288]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fdd2 	bl	800126c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe fdce 	bl	800126c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e23c      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	4939      	ldr	r1, [pc, #228]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
 80026fe:	e01a      	b.n	8002736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fdae 	bl	800126c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fdaa 	bl	800126c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e218      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1e0>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d03c      	beq.n	80027bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fd87 	bl	800126c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002762:	f7fe fd83 	bl	800126c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1f1      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ef      	beq.n	8002762 <HAL_RCC_OscConfig+0x22e>
 8002782:	e01b      	b.n	80027bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278a:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fd6a 	bl	800126c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fd66 	bl	800126c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1d4      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ef      	bne.n	800279c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80ab 	beq.w	8002920 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2b4>
 80027da:	2301      	movs	r3, #1
 80027dc:	e005      	b.n	80027ea <HAL_RCC_OscConfig+0x2b6>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	20000004 	.word	0x20000004
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4baf      	ldr	r3, [pc, #700]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4aae      	ldr	r2, [pc, #696]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
 80027fa:	4bac      	ldr	r3, [pc, #688]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4ba9      	ldr	r3, [pc, #676]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002816:	4ba6      	ldr	r3, [pc, #664]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4aa5      	ldr	r2, [pc, #660]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fe fd23 	bl	800126c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fd1f 	bl	800126c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e18d      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	4b9c      	ldr	r3, [pc, #624]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d108      	bne.n	8002862 <HAL_RCC_OscConfig+0x32e>
 8002850:	4b96      	ldr	r3, [pc, #600]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a95      	ldr	r2, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002860:	e024      	b.n	80028ac <HAL_RCC_OscConfig+0x378>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d110      	bne.n	800288c <HAL_RCC_OscConfig+0x358>
 800286a:	4b90      	ldr	r3, [pc, #576]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a8e      	ldr	r2, [pc, #568]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287a:	4b8c      	ldr	r3, [pc, #560]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a8a      	ldr	r2, [pc, #552]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800288a:	e00f      	b.n	80028ac <HAL_RCC_OscConfig+0x378>
 800288c:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a86      	ldr	r2, [pc, #536]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289c:	4b83      	ldr	r3, [pc, #524]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a82      	ldr	r2, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fcda 	bl	800126c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fcd6 	bl	800126c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e142      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ed      	beq.n	80028bc <HAL_RCC_OscConfig+0x388>
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fcc3 	bl	800126c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fcbf 	bl	800126c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e12b      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ed      	bne.n	80028ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	4a64      	ldr	r2, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d03c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01c      	beq.n	800296e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002934:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293a:	4a5c      	ldr	r2, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe fc92 	bl	800126c <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800294c:	f7fe fc8e 	bl	800126c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0fc      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800295e:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ef      	beq.n	800294c <HAL_RCC_OscConfig+0x418>
 800296c:	e01b      	b.n	80029a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800296e:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002974:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7fe fc75 	bl	800126c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002986:	f7fe fc71 	bl	800126c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0df      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002998:	4b44      	ldr	r3, [pc, #272]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800299a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ef      	bne.n	8002986 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80d3 	beq.w	8002b56 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	f000 808d 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d15a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a38      	ldr	r2, [pc, #224]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fc4b 	bl	800126c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fc47 	bl	800126c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b5      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCC_OscConfig+0x580>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6a11      	ldr	r1, [r2, #32]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a12:	0212      	lsls	r2, r2, #8
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0552      	lsls	r2, r2, #21
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a26:	0852      	lsrs	r2, r2, #1
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0652      	lsls	r2, r2, #25
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a32:	06d2      	lsls	r2, r2, #27
 8002a34:	430a      	orrs	r2, r1
 8002a36:	491d      	ldr	r1, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fc0a 	bl	800126c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fc06 	bl	800126c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e074      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x528>
 8002a7a:	e06c      	b.n	8002b56 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a9a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fbe2 	bl	800126c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aaa:	e00e      	b.n	8002aca <HAL_RCC_OscConfig+0x596>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fbd8 	bl	800126c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e046      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_OscConfig+0x62c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x584>
 8002ad6:	e03e      	b.n	8002b56 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e039      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCC_OscConfig+0x62c>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d12c      	bne.n	8002b52 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	3b01      	subs	r3, #1
 8002b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d123      	bne.n	8002b52 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d113      	bne.n	8002b52 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e11e      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b91      	ldr	r3, [pc, #580]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d910      	bls.n	8002bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b8e      	ldr	r3, [pc, #568]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 020f 	bic.w	r2, r3, #15
 8002b92:	498c      	ldr	r1, [pc, #560]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b8a      	ldr	r3, [pc, #552]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e106      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d073      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d129      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc0:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0f4      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bd0:	f000 f972 	bl	8002eb8 <RCC_GetSysClockFreqFromPLLSource>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4a7c      	ldr	r2, [pc, #496]	; (8002dcc <HAL_RCC_ClockConfig+0x268>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d93f      	bls.n	8002c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d033      	beq.n	8002c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d12f      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c06:	4a70      	ldr	r2, [pc, #448]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e024      	b.n	8002c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0c6      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0be      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c3c:	f000 f8ce 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <HAL_RCC_ClockConfig+0x268>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d909      	bls.n	8002c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c52:	4a5d      	ldr	r2, [pc, #372]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4957      	ldr	r1, [pc, #348]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c70:	f7fe fafc 	bl	800126c <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe faf8 	bl	800126c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e095      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4936      	ldr	r1, [pc, #216]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cfa:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4a32      	ldr	r2, [pc, #200]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d21d      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 020f 	bic.w	r2, r3, #15
 8002d1c:	4929      	ldr	r1, [pc, #164]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d24:	f7fe faa2 	bl	800126c <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fa9e 	bl	800126c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03b      	b.n	8002dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1ed      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4917      	ldr	r1, [pc, #92]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490f      	ldr	r1, [pc, #60]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8e:	f000 f825 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <HAL_RCC_ClockConfig+0x26c>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_RCC_ClockConfig+0x270>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fa0e 	bl	80011d4 <HAL_InitTick>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	04c4b400 	.word	0x04c4b400
 8002dd0:	08004790 	.word	0x08004790
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e047      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	e03e      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d136      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e3a:	68d2      	ldr	r2, [r2, #12]
 8002e3c:	0a12      	lsrs	r2, r2, #8
 8002e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
      break;
 8002e48:	e00c      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e4a:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	0a12      	lsrs	r2, r2, #8
 8002e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
      break;
 8002e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0e5b      	lsrs	r3, r3, #25
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e001      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e84:	693b      	ldr	r3, [r7, #16]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	016e3600 	.word	0x016e3600

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d10c      	bne.n	8002ef6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	0a12      	lsrs	r2, r2, #8
 8002eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	617b      	str	r3, [r7, #20]
    break;
 8002ef4:	e00c      	b.n	8002f10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	0a12      	lsrs	r2, r2, #8
 8002f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    break;
 8002f0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0e5b      	lsrs	r3, r3, #25
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f2a:	687b      	ldr	r3, [r7, #4]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	016e3600 	.word	0x016e3600
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e049      	b.n	8002fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe f884 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 f9b8 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d001      	beq.n	800300c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e04c      	b.n	80030a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_TIM_Base_Start+0xc0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d022      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d01d      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_TIM_Base_Start+0xc4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_TIM_Base_Start+0xc8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_TIM_Base_Start+0xcc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_TIM_Base_Start+0xd0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_TIM_Base_Start+0xd4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_Base_Start+0x70>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_TIM_Base_Start+0xd8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d115      	bne.n	8003090 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_TIM_Base_Start+0xdc>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d015      	beq.n	80030a2 <HAL_TIM_Base_Start+0xae>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d011      	beq.n	80030a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308e:	e008      	b.n	80030a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e000      	b.n	80030a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40013400 	.word	0x40013400
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40015000 	.word	0x40015000
 80030d0:	00010007 	.word	0x00010007

080030d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_TIM_ConfigClockSource+0x18>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0f5      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x204>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800310a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800310e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_TIM_ConfigClockSource+0x20c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f000 80c1 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800312c:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_TIM_ConfigClockSource+0x20c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f200 80c6 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003134:	4a6b      	ldr	r2, [pc, #428]	; (80032e4 <HAL_TIM_ConfigClockSource+0x210>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f000 80b9 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800313c:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <HAL_TIM_ConfigClockSource+0x210>)
 800313e:	4293      	cmp	r3, r2
 8003140:	f200 80be 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003144:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <HAL_TIM_ConfigClockSource+0x214>)
 8003146:	4293      	cmp	r3, r2
 8003148:	f000 80b1 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800314c:	4a66      	ldr	r2, [pc, #408]	; (80032e8 <HAL_TIM_ConfigClockSource+0x214>)
 800314e:	4293      	cmp	r3, r2
 8003150:	f200 80b6 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003154:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_TIM_ConfigClockSource+0x218>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f000 80a9 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800315c:	4a63      	ldr	r2, [pc, #396]	; (80032ec <HAL_TIM_ConfigClockSource+0x218>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f200 80ae 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003164:	4a62      	ldr	r2, [pc, #392]	; (80032f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	f000 80a1 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800316c:	4a60      	ldr	r2, [pc, #384]	; (80032f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	f200 80a6 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_TIM_ConfigClockSource+0x220>)
 8003176:	4293      	cmp	r3, r2
 8003178:	f000 8099 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800317c:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <HAL_TIM_ConfigClockSource+0x220>)
 800317e:	4293      	cmp	r3, r2
 8003180:	f200 809e 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003184:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003188:	f000 8091 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800318c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003190:	f200 8096 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003198:	f000 8089 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 800319c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a0:	f200 808e 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d03e      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x154>
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	f200 8087 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	f000 8085 	beq.w	80032c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d87f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d01a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x126>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d87b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031c8:	2b60      	cmp	r3, #96	; 0x60
 80031ca:	d050      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x19a>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d877      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d03c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x17a>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d873      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d058      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x1ba>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d86f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d064      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d86b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d060      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d867      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x1da>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d05a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031f8:	e062      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f000 f999 	bl	8003540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800321c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	609a      	str	r2, [r3, #8]
      break;
 8003226:	e04e      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f000 f982 	bl	8003540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e03b      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 f8f4 	bl	8003448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2150      	movs	r1, #80	; 0x50
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f94d 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 800326c:	e02b      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f913 	bl	80034a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2160      	movs	r1, #96	; 0x60
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f93d 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 800328c:	e01b      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f8d4 	bl	8003448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f92d 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e00b      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 f924 	bl	8003506 <TIM_ITRx_SetConfig>
        break;
 80032be:	e002      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80032c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00100070 	.word	0x00100070
 80032e4:	00100060 	.word	0x00100060
 80032e8:	00100050 	.word	0x00100050
 80032ec:	00100040 	.word	0x00100040
 80032f0:	00100030 	.word	0x00100030
 80032f4:	00100020 	.word	0x00100020

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a46      	ldr	r2, [pc, #280]	; (8003424 <TIM_Base_SetConfig+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d017      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d013      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a43      	ldr	r2, [pc, #268]	; (8003428 <TIM_Base_SetConfig+0x130>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a42      	ldr	r2, [pc, #264]	; (800342c <TIM_Base_SetConfig+0x134>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a41      	ldr	r2, [pc, #260]	; (8003430 <TIM_Base_SetConfig+0x138>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a40      	ldr	r2, [pc, #256]	; (8003434 <TIM_Base_SetConfig+0x13c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x48>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <TIM_Base_SetConfig+0x140>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a33      	ldr	r2, [pc, #204]	; (8003424 <TIM_Base_SetConfig+0x12c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d023      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d01f      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <TIM_Base_SetConfig+0x130>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01b      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2f      	ldr	r2, [pc, #188]	; (800342c <TIM_Base_SetConfig+0x134>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d017      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <TIM_Base_SetConfig+0x138>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <TIM_Base_SetConfig+0x13c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2d      	ldr	r2, [pc, #180]	; (800343c <TIM_Base_SetConfig+0x144>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <TIM_Base_SetConfig+0x148>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <TIM_Base_SetConfig+0x14c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0xaa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <TIM_Base_SetConfig+0x140>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <TIM_Base_SetConfig+0x12c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_Base_SetConfig+0x110>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <TIM_Base_SetConfig+0x13c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00f      	beq.n	8003408 <TIM_Base_SetConfig+0x110>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <TIM_Base_SetConfig+0x144>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0x110>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <TIM_Base_SetConfig+0x148>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x110>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <TIM_Base_SetConfig+0x14c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x110>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <TIM_Base_SetConfig+0x140>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40000c00 	.word	0x40000c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40015000 	.word	0x40015000
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800

08003448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f023 0201 	bic.w	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 030a 	bic.w	r3, r3, #10
 8003484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0210 	bic.w	r2, r3, #16
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	031b      	lsls	r3, r3, #12
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	f043 0307 	orr.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	021a      	lsls	r2, r3, #8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	431a      	orrs	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003594:	2302      	movs	r3, #2
 8003596:	e074      	b.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d01d      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10c      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40015000 	.word	0x40015000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40014000 	.word	0x40014000

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4d0d      	ldr	r5, [pc, #52]	; (80036e4 <__libc_init_array+0x38>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <__libc_init_array+0x3c>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	2600      	movs	r6, #0
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	4d0b      	ldr	r5, [pc, #44]	; (80036ec <__libc_init_array+0x40>)
 80036be:	4c0c      	ldr	r4, [pc, #48]	; (80036f0 <__libc_init_array+0x44>)
 80036c0:	f001 f858 	bl	8004774 <_init>
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	2600      	movs	r6, #0
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	08004978 	.word	0x08004978
 80036e8:	08004978 	.word	0x08004978
 80036ec:	08004978 	.word	0x08004978
 80036f0:	0800497c 	.word	0x0800497c

080036f4 <memset>:
 80036f4:	4402      	add	r2, r0
 80036f6:	4603      	mov	r3, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>
 8003704:	0000      	movs	r0, r0
	...

08003708 <sin>:
 8003708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800370a:	ec53 2b10 	vmov	r2, r3, d0
 800370e:	4826      	ldr	r0, [pc, #152]	; (80037a8 <sin+0xa0>)
 8003710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003714:	4281      	cmp	r1, r0
 8003716:	dc07      	bgt.n	8003728 <sin+0x20>
 8003718:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80037a0 <sin+0x98>
 800371c:	2000      	movs	r0, #0
 800371e:	f000 fe5b 	bl	80043d8 <__kernel_sin>
 8003722:	ec51 0b10 	vmov	r0, r1, d0
 8003726:	e007      	b.n	8003738 <sin+0x30>
 8003728:	4820      	ldr	r0, [pc, #128]	; (80037ac <sin+0xa4>)
 800372a:	4281      	cmp	r1, r0
 800372c:	dd09      	ble.n	8003742 <sin+0x3a>
 800372e:	ee10 0a10 	vmov	r0, s0
 8003732:	4619      	mov	r1, r3
 8003734:	f7fc fd74 	bl	8000220 <__aeabi_dsub>
 8003738:	ec41 0b10 	vmov	d0, r0, r1
 800373c:	b005      	add	sp, #20
 800373e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003742:	4668      	mov	r0, sp
 8003744:	f000 f834 	bl	80037b0 <__ieee754_rem_pio2>
 8003748:	f000 0003 	and.w	r0, r0, #3
 800374c:	2801      	cmp	r0, #1
 800374e:	d008      	beq.n	8003762 <sin+0x5a>
 8003750:	2802      	cmp	r0, #2
 8003752:	d00d      	beq.n	8003770 <sin+0x68>
 8003754:	b9d0      	cbnz	r0, 800378c <sin+0x84>
 8003756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800375a:	ed9d 0b00 	vldr	d0, [sp]
 800375e:	2001      	movs	r0, #1
 8003760:	e7dd      	b.n	800371e <sin+0x16>
 8003762:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003766:	ed9d 0b00 	vldr	d0, [sp]
 800376a:	f000 fa2d 	bl	8003bc8 <__kernel_cos>
 800376e:	e7d8      	b.n	8003722 <sin+0x1a>
 8003770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003774:	ed9d 0b00 	vldr	d0, [sp]
 8003778:	2001      	movs	r0, #1
 800377a:	f000 fe2d 	bl	80043d8 <__kernel_sin>
 800377e:	ec53 2b10 	vmov	r2, r3, d0
 8003782:	ee10 0a10 	vmov	r0, s0
 8003786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800378a:	e7d5      	b.n	8003738 <sin+0x30>
 800378c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003790:	ed9d 0b00 	vldr	d0, [sp]
 8003794:	f000 fa18 	bl	8003bc8 <__kernel_cos>
 8003798:	e7f1      	b.n	800377e <sin+0x76>
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
	...
 80037a8:	3fe921fb 	.word	0x3fe921fb
 80037ac:	7fefffff 	.word	0x7fefffff

080037b0 <__ieee754_rem_pio2>:
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	ed2d 8b02 	vpush	{d8}
 80037b8:	ec55 4b10 	vmov	r4, r5, d0
 80037bc:	4bca      	ldr	r3, [pc, #808]	; (8003ae8 <__ieee754_rem_pio2+0x338>)
 80037be:	b08b      	sub	sp, #44	; 0x2c
 80037c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80037c4:	4598      	cmp	r8, r3
 80037c6:	4682      	mov	sl, r0
 80037c8:	9502      	str	r5, [sp, #8]
 80037ca:	dc08      	bgt.n	80037de <__ieee754_rem_pio2+0x2e>
 80037cc:	2200      	movs	r2, #0
 80037ce:	2300      	movs	r3, #0
 80037d0:	ed80 0b00 	vstr	d0, [r0]
 80037d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80037d8:	f04f 0b00 	mov.w	fp, #0
 80037dc:	e028      	b.n	8003830 <__ieee754_rem_pio2+0x80>
 80037de:	4bc3      	ldr	r3, [pc, #780]	; (8003aec <__ieee754_rem_pio2+0x33c>)
 80037e0:	4598      	cmp	r8, r3
 80037e2:	dc78      	bgt.n	80038d6 <__ieee754_rem_pio2+0x126>
 80037e4:	9b02      	ldr	r3, [sp, #8]
 80037e6:	4ec2      	ldr	r6, [pc, #776]	; (8003af0 <__ieee754_rem_pio2+0x340>)
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	ee10 0a10 	vmov	r0, s0
 80037ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x300>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	4629      	mov	r1, r5
 80037f6:	dd39      	ble.n	800386c <__ieee754_rem_pio2+0xbc>
 80037f8:	f7fc fd12 	bl	8000220 <__aeabi_dsub>
 80037fc:	45b0      	cmp	r8, r6
 80037fe:	4604      	mov	r4, r0
 8003800:	460d      	mov	r5, r1
 8003802:	d01b      	beq.n	800383c <__ieee754_rem_pio2+0x8c>
 8003804:	a3ac      	add	r3, pc, #688	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x308>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc fd09 	bl	8000220 <__aeabi_dsub>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	e9ca 2300 	strd	r2, r3, [sl]
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f7fc fd01 	bl	8000220 <__aeabi_dsub>
 800381e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x308>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fcfc 	bl	8000220 <__aeabi_dsub>
 8003828:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800382c:	f04f 0b01 	mov.w	fp, #1
 8003830:	4658      	mov	r0, fp
 8003832:	b00b      	add	sp, #44	; 0x2c
 8003834:	ecbd 8b02 	vpop	{d8}
 8003838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x310>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fced 	bl	8000220 <__aeabi_dsub>
 8003846:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x318>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	4604      	mov	r4, r0
 800384e:	460d      	mov	r5, r1
 8003850:	f7fc fce6 	bl	8000220 <__aeabi_dsub>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	e9ca 2300 	strd	r2, r3, [sl]
 800385c:	4620      	mov	r0, r4
 800385e:	4629      	mov	r1, r5
 8003860:	f7fc fcde 	bl	8000220 <__aeabi_dsub>
 8003864:	a398      	add	r3, pc, #608	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x318>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	e7db      	b.n	8003824 <__ieee754_rem_pio2+0x74>
 800386c:	f7fc fcda 	bl	8000224 <__adddf3>
 8003870:	45b0      	cmp	r8, r6
 8003872:	4604      	mov	r4, r0
 8003874:	460d      	mov	r5, r1
 8003876:	d016      	beq.n	80038a6 <__ieee754_rem_pio2+0xf6>
 8003878:	a38f      	add	r3, pc, #572	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x308>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fcd1 	bl	8000224 <__adddf3>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	e9ca 2300 	strd	r2, r3, [sl]
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fc fcc7 	bl	8000220 <__aeabi_dsub>
 8003892:	a389      	add	r3, pc, #548	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x308>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc fcc4 	bl	8000224 <__adddf3>
 800389c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80038a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80038a4:	e7c4      	b.n	8003830 <__ieee754_rem_pio2+0x80>
 80038a6:	a386      	add	r3, pc, #536	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x310>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fcba 	bl	8000224 <__adddf3>
 80038b0:	a385      	add	r3, pc, #532	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x318>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	4604      	mov	r4, r0
 80038b8:	460d      	mov	r5, r1
 80038ba:	f7fc fcb3 	bl	8000224 <__adddf3>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	e9ca 2300 	strd	r2, r3, [sl]
 80038c6:	4620      	mov	r0, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	f7fc fca9 	bl	8000220 <__aeabi_dsub>
 80038ce:	a37e      	add	r3, pc, #504	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x318>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	e7e0      	b.n	8003898 <__ieee754_rem_pio2+0xe8>
 80038d6:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <__ieee754_rem_pio2+0x344>)
 80038d8:	4598      	cmp	r8, r3
 80038da:	f300 80d9 	bgt.w	8003a90 <__ieee754_rem_pio2+0x2e0>
 80038de:	f000 fe39 	bl	8004554 <fabs>
 80038e2:	ec55 4b10 	vmov	r4, r5, d0
 80038e6:	ee10 0a10 	vmov	r0, s0
 80038ea:	a379      	add	r3, pc, #484	; (adr r3, 8003ad0 <__ieee754_rem_pio2+0x320>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fe4d 	bl	8000590 <__aeabi_dmul>
 80038f6:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <__ieee754_rem_pio2+0x348>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	f7fc fc93 	bl	8000224 <__adddf3>
 80038fe:	f7fd f8e1 	bl	8000ac4 <__aeabi_d2iz>
 8003902:	4683      	mov	fp, r0
 8003904:	f7fc fdda 	bl	80004bc <__aeabi_i2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	ec43 2b18 	vmov	d8, r2, r3
 8003910:	a367      	add	r3, pc, #412	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x300>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fe3b 	bl	8000590 <__aeabi_dmul>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fc fc7d 	bl	8000220 <__aeabi_dsub>
 8003926:	a364      	add	r3, pc, #400	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x308>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	4606      	mov	r6, r0
 800392e:	460f      	mov	r7, r1
 8003930:	ec51 0b18 	vmov	r0, r1, d8
 8003934:	f7fc fe2c 	bl	8000590 <__aeabi_dmul>
 8003938:	f1bb 0f1f 	cmp.w	fp, #31
 800393c:	4604      	mov	r4, r0
 800393e:	460d      	mov	r5, r1
 8003940:	dc0d      	bgt.n	800395e <__ieee754_rem_pio2+0x1ae>
 8003942:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <__ieee754_rem_pio2+0x34c>)
 8003944:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	4543      	cmp	r3, r8
 800394e:	d006      	beq.n	800395e <__ieee754_rem_pio2+0x1ae>
 8003950:	4622      	mov	r2, r4
 8003952:	462b      	mov	r3, r5
 8003954:	4630      	mov	r0, r6
 8003956:	4639      	mov	r1, r7
 8003958:	f7fc fc62 	bl	8000220 <__aeabi_dsub>
 800395c:	e00f      	b.n	800397e <__ieee754_rem_pio2+0x1ce>
 800395e:	462b      	mov	r3, r5
 8003960:	4622      	mov	r2, r4
 8003962:	4630      	mov	r0, r6
 8003964:	4639      	mov	r1, r7
 8003966:	f7fc fc5b 	bl	8000220 <__aeabi_dsub>
 800396a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800396e:	9303      	str	r3, [sp, #12]
 8003970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003974:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003978:	f1b8 0f10 	cmp.w	r8, #16
 800397c:	dc02      	bgt.n	8003984 <__ieee754_rem_pio2+0x1d4>
 800397e:	e9ca 0100 	strd	r0, r1, [sl]
 8003982:	e039      	b.n	80039f8 <__ieee754_rem_pio2+0x248>
 8003984:	a34e      	add	r3, pc, #312	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x310>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	ec51 0b18 	vmov	r0, r1, d8
 800398e:	f7fc fdff 	bl	8000590 <__aeabi_dmul>
 8003992:	4604      	mov	r4, r0
 8003994:	460d      	mov	r5, r1
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4630      	mov	r0, r6
 800399c:	4639      	mov	r1, r7
 800399e:	f7fc fc3f 	bl	8000220 <__aeabi_dsub>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4680      	mov	r8, r0
 80039a8:	4689      	mov	r9, r1
 80039aa:	4630      	mov	r0, r6
 80039ac:	4639      	mov	r1, r7
 80039ae:	f7fc fc37 	bl	8000220 <__aeabi_dsub>
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	f7fc fc33 	bl	8000220 <__aeabi_dsub>
 80039ba:	a343      	add	r3, pc, #268	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x318>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	4604      	mov	r4, r0
 80039c2:	460d      	mov	r5, r1
 80039c4:	ec51 0b18 	vmov	r0, r1, d8
 80039c8:	f7fc fde2 	bl	8000590 <__aeabi_dmul>
 80039cc:	4622      	mov	r2, r4
 80039ce:	462b      	mov	r3, r5
 80039d0:	f7fc fc26 	bl	8000220 <__aeabi_dsub>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4604      	mov	r4, r0
 80039da:	460d      	mov	r5, r1
 80039dc:	4640      	mov	r0, r8
 80039de:	4649      	mov	r1, r9
 80039e0:	f7fc fc1e 	bl	8000220 <__aeabi_dsub>
 80039e4:	9a03      	ldr	r2, [sp, #12]
 80039e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b31      	cmp	r3, #49	; 0x31
 80039ee:	dc24      	bgt.n	8003a3a <__ieee754_rem_pio2+0x28a>
 80039f0:	e9ca 0100 	strd	r0, r1, [sl]
 80039f4:	4646      	mov	r6, r8
 80039f6:	464f      	mov	r7, r9
 80039f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80039fc:	4630      	mov	r0, r6
 80039fe:	4642      	mov	r2, r8
 8003a00:	464b      	mov	r3, r9
 8003a02:	4639      	mov	r1, r7
 8003a04:	f7fc fc0c 	bl	8000220 <__aeabi_dsub>
 8003a08:	462b      	mov	r3, r5
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	f7fc fc08 	bl	8000220 <__aeabi_dsub>
 8003a10:	9b02      	ldr	r3, [sp, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a18:	f6bf af0a 	bge.w	8003830 <__ieee754_rem_pio2+0x80>
 8003a1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003a20:	f8ca 3004 	str.w	r3, [sl, #4]
 8003a24:	f8ca 8000 	str.w	r8, [sl]
 8003a28:	f8ca 0008 	str.w	r0, [sl, #8]
 8003a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a30:	f8ca 300c 	str.w	r3, [sl, #12]
 8003a34:	f1cb 0b00 	rsb	fp, fp, #0
 8003a38:	e6fa      	b.n	8003830 <__ieee754_rem_pio2+0x80>
 8003a3a:	a327      	add	r3, pc, #156	; (adr r3, 8003ad8 <__ieee754_rem_pio2+0x328>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	ec51 0b18 	vmov	r0, r1, d8
 8003a44:	f7fc fda4 	bl	8000590 <__aeabi_dmul>
 8003a48:	4604      	mov	r4, r0
 8003a4a:	460d      	mov	r5, r1
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4640      	mov	r0, r8
 8003a52:	4649      	mov	r1, r9
 8003a54:	f7fc fbe4 	bl	8000220 <__aeabi_dsub>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4606      	mov	r6, r0
 8003a5e:	460f      	mov	r7, r1
 8003a60:	4640      	mov	r0, r8
 8003a62:	4649      	mov	r1, r9
 8003a64:	f7fc fbdc 	bl	8000220 <__aeabi_dsub>
 8003a68:	4622      	mov	r2, r4
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	f7fc fbd8 	bl	8000220 <__aeabi_dsub>
 8003a70:	a31b      	add	r3, pc, #108	; (adr r3, 8003ae0 <__ieee754_rem_pio2+0x330>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	4604      	mov	r4, r0
 8003a78:	460d      	mov	r5, r1
 8003a7a:	ec51 0b18 	vmov	r0, r1, d8
 8003a7e:	f7fc fd87 	bl	8000590 <__aeabi_dmul>
 8003a82:	4622      	mov	r2, r4
 8003a84:	462b      	mov	r3, r5
 8003a86:	f7fc fbcb 	bl	8000220 <__aeabi_dsub>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	e75f      	b.n	8003950 <__ieee754_rem_pio2+0x1a0>
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <__ieee754_rem_pio2+0x350>)
 8003a92:	4598      	cmp	r8, r3
 8003a94:	dd36      	ble.n	8003b04 <__ieee754_rem_pio2+0x354>
 8003a96:	ee10 2a10 	vmov	r2, s0
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7fc fbbe 	bl	8000220 <__aeabi_dsub>
 8003aa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003aa8:	e9ca 0100 	strd	r0, r1, [sl]
 8003aac:	e694      	b.n	80037d8 <__ieee754_rem_pio2+0x28>
 8003aae:	bf00      	nop
 8003ab0:	54400000 	.word	0x54400000
 8003ab4:	3ff921fb 	.word	0x3ff921fb
 8003ab8:	1a626331 	.word	0x1a626331
 8003abc:	3dd0b461 	.word	0x3dd0b461
 8003ac0:	1a600000 	.word	0x1a600000
 8003ac4:	3dd0b461 	.word	0x3dd0b461
 8003ac8:	2e037073 	.word	0x2e037073
 8003acc:	3ba3198a 	.word	0x3ba3198a
 8003ad0:	6dc9c883 	.word	0x6dc9c883
 8003ad4:	3fe45f30 	.word	0x3fe45f30
 8003ad8:	2e000000 	.word	0x2e000000
 8003adc:	3ba3198a 	.word	0x3ba3198a
 8003ae0:	252049c1 	.word	0x252049c1
 8003ae4:	397b839a 	.word	0x397b839a
 8003ae8:	3fe921fb 	.word	0x3fe921fb
 8003aec:	4002d97b 	.word	0x4002d97b
 8003af0:	3ff921fb 	.word	0x3ff921fb
 8003af4:	413921fb 	.word	0x413921fb
 8003af8:	3fe00000 	.word	0x3fe00000
 8003afc:	080047a0 	.word	0x080047a0
 8003b00:	7fefffff 	.word	0x7fefffff
 8003b04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003b08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003b0c:	ee10 0a10 	vmov	r0, s0
 8003b10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003b14:	ee10 6a10 	vmov	r6, s0
 8003b18:	460f      	mov	r7, r1
 8003b1a:	f7fc ffd3 	bl	8000ac4 <__aeabi_d2iz>
 8003b1e:	f7fc fccd 	bl	80004bc <__aeabi_i2d>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4630      	mov	r0, r6
 8003b28:	4639      	mov	r1, r7
 8003b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b2e:	f7fc fb77 	bl	8000220 <__aeabi_dsub>
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <__ieee754_rem_pio2+0x40c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	f7fc fd2b 	bl	8000590 <__aeabi_dmul>
 8003b3a:	460f      	mov	r7, r1
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	f7fc ffc1 	bl	8000ac4 <__aeabi_d2iz>
 8003b42:	f7fc fcbb 	bl	80004bc <__aeabi_i2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b52:	f7fc fb65 	bl	8000220 <__aeabi_dsub>
 8003b56:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <__ieee754_rem_pio2+0x40c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f7fc fd19 	bl	8000590 <__aeabi_dmul>
 8003b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b62:	ad04      	add	r5, sp, #16
 8003b64:	f04f 0803 	mov.w	r8, #3
 8003b68:	46a9      	mov	r9, r5
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	2700      	movs	r7, #0
 8003b6e:	4632      	mov	r2, r6
 8003b70:	463b      	mov	r3, r7
 8003b72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003b76:	46c3      	mov	fp, r8
 8003b78:	3d08      	subs	r5, #8
 8003b7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003b7e:	f7fc ff6f 	bl	8000a60 <__aeabi_dcmpeq>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1f3      	bne.n	8003b6e <__ieee754_rem_pio2+0x3be>
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <__ieee754_rem_pio2+0x410>)
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4622      	mov	r2, r4
 8003b90:	465b      	mov	r3, fp
 8003b92:	4651      	mov	r1, sl
 8003b94:	4648      	mov	r0, r9
 8003b96:	f000 f8df 	bl	8003d58 <__kernel_rem_pio2>
 8003b9a:	9b02      	ldr	r3, [sp, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	4683      	mov	fp, r0
 8003ba0:	f6bf ae46 	bge.w	8003830 <__ieee754_rem_pio2+0x80>
 8003ba4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003bac:	f8ca 3004 	str.w	r3, [sl, #4]
 8003bb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003bb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003bb8:	e73a      	b.n	8003a30 <__ieee754_rem_pio2+0x280>
 8003bba:	bf00      	nop
 8003bbc:	41700000 	.word	0x41700000
 8003bc0:	08004820 	.word	0x08004820
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <__kernel_cos>:
 8003bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	ec57 6b10 	vmov	r6, r7, d0
 8003bd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003bd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003bd8:	ed8d 1b00 	vstr	d1, [sp]
 8003bdc:	da07      	bge.n	8003bee <__kernel_cos+0x26>
 8003bde:	ee10 0a10 	vmov	r0, s0
 8003be2:	4639      	mov	r1, r7
 8003be4:	f7fc ff6e 	bl	8000ac4 <__aeabi_d2iz>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f000 8088 	beq.w	8003cfe <__kernel_cos+0x136>
 8003bee:	4632      	mov	r2, r6
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	4639      	mov	r1, r7
 8003bf6:	f7fc fccb 	bl	8000590 <__aeabi_dmul>
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <__kernel_cos+0x178>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	f7fc fcc5 	bl	8000590 <__aeabi_dmul>
 8003c06:	a340      	add	r3, pc, #256	; (adr r3, 8003d08 <__kernel_cos+0x140>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	4682      	mov	sl, r0
 8003c0e:	468b      	mov	fp, r1
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc fcbc 	bl	8000590 <__aeabi_dmul>
 8003c18:	a33d      	add	r3, pc, #244	; (adr r3, 8003d10 <__kernel_cos+0x148>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f7fc fb01 	bl	8000224 <__adddf3>
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	f7fc fcb3 	bl	8000590 <__aeabi_dmul>
 8003c2a:	a33b      	add	r3, pc, #236	; (adr r3, 8003d18 <__kernel_cos+0x150>)
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f7fc faf6 	bl	8000220 <__aeabi_dsub>
 8003c34:	4622      	mov	r2, r4
 8003c36:	462b      	mov	r3, r5
 8003c38:	f7fc fcaa 	bl	8000590 <__aeabi_dmul>
 8003c3c:	a338      	add	r3, pc, #224	; (adr r3, 8003d20 <__kernel_cos+0x158>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f7fc faef 	bl	8000224 <__adddf3>
 8003c46:	4622      	mov	r2, r4
 8003c48:	462b      	mov	r3, r5
 8003c4a:	f7fc fca1 	bl	8000590 <__aeabi_dmul>
 8003c4e:	a336      	add	r3, pc, #216	; (adr r3, 8003d28 <__kernel_cos+0x160>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f7fc fae4 	bl	8000220 <__aeabi_dsub>
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f7fc fc98 	bl	8000590 <__aeabi_dmul>
 8003c60:	a333      	add	r3, pc, #204	; (adr r3, 8003d30 <__kernel_cos+0x168>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fadd 	bl	8000224 <__adddf3>
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	f7fc fc8f 	bl	8000590 <__aeabi_dmul>
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	f7fc fc8b 	bl	8000590 <__aeabi_dmul>
 8003c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c7e:	4604      	mov	r4, r0
 8003c80:	460d      	mov	r5, r1
 8003c82:	4630      	mov	r0, r6
 8003c84:	4639      	mov	r1, r7
 8003c86:	f7fc fc83 	bl	8000590 <__aeabi_dmul>
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4629      	mov	r1, r5
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7fc fac5 	bl	8000220 <__aeabi_dsub>
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <__kernel_cos+0x17c>)
 8003c98:	4598      	cmp	r8, r3
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	460f      	mov	r7, r1
 8003c9e:	dc10      	bgt.n	8003cc2 <__kernel_cos+0xfa>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4650      	mov	r0, sl
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	f7fc faba 	bl	8000220 <__aeabi_dsub>
 8003cac:	460b      	mov	r3, r1
 8003cae:	4926      	ldr	r1, [pc, #152]	; (8003d48 <__kernel_cos+0x180>)
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fc fab4 	bl	8000220 <__aeabi_dsub>
 8003cb8:	ec41 0b10 	vmov	d0, r0, r1
 8003cbc:	b003      	add	sp, #12
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <__kernel_cos+0x184>)
 8003cc4:	4920      	ldr	r1, [pc, #128]	; (8003d48 <__kernel_cos+0x180>)
 8003cc6:	4598      	cmp	r8, r3
 8003cc8:	bfcc      	ite	gt
 8003cca:	4d21      	ldrgt	r5, [pc, #132]	; (8003d50 <__kernel_cos+0x188>)
 8003ccc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003cd0:	2400      	movs	r4, #0
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fc faa2 	bl	8000220 <__aeabi_dsub>
 8003cdc:	4622      	mov	r2, r4
 8003cde:	4680      	mov	r8, r0
 8003ce0:	4689      	mov	r9, r1
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	f7fc fa9a 	bl	8000220 <__aeabi_dsub>
 8003cec:	4632      	mov	r2, r6
 8003cee:	463b      	mov	r3, r7
 8003cf0:	f7fc fa96 	bl	8000220 <__aeabi_dsub>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	e7da      	b.n	8003cb4 <__kernel_cos+0xec>
 8003cfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003d38 <__kernel_cos+0x170>
 8003d02:	e7db      	b.n	8003cbc <__kernel_cos+0xf4>
 8003d04:	f3af 8000 	nop.w
 8003d08:	be8838d4 	.word	0xbe8838d4
 8003d0c:	bda8fae9 	.word	0xbda8fae9
 8003d10:	bdb4b1c4 	.word	0xbdb4b1c4
 8003d14:	3e21ee9e 	.word	0x3e21ee9e
 8003d18:	809c52ad 	.word	0x809c52ad
 8003d1c:	3e927e4f 	.word	0x3e927e4f
 8003d20:	19cb1590 	.word	0x19cb1590
 8003d24:	3efa01a0 	.word	0x3efa01a0
 8003d28:	16c15177 	.word	0x16c15177
 8003d2c:	3f56c16c 	.word	0x3f56c16c
 8003d30:	5555554c 	.word	0x5555554c
 8003d34:	3fa55555 	.word	0x3fa55555
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	3ff00000 	.word	0x3ff00000
 8003d40:	3fe00000 	.word	0x3fe00000
 8003d44:	3fd33332 	.word	0x3fd33332
 8003d48:	3ff00000 	.word	0x3ff00000
 8003d4c:	3fe90000 	.word	0x3fe90000
 8003d50:	3fd20000 	.word	0x3fd20000
 8003d54:	00000000 	.word	0x00000000

08003d58 <__kernel_rem_pio2>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	ed2d 8b02 	vpush	{d8}
 8003d60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003d64:	f112 0f14 	cmn.w	r2, #20
 8003d68:	9308      	str	r3, [sp, #32]
 8003d6a:	9101      	str	r1, [sp, #4]
 8003d6c:	4bc6      	ldr	r3, [pc, #792]	; (8004088 <__kernel_rem_pio2+0x330>)
 8003d6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003d70:	9009      	str	r0, [sp, #36]	; 0x24
 8003d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9b08      	ldr	r3, [sp, #32]
 8003d7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003d7e:	bfa8      	it	ge
 8003d80:	1ed4      	subge	r4, r2, #3
 8003d82:	9306      	str	r3, [sp, #24]
 8003d84:	bfb2      	itee	lt
 8003d86:	2400      	movlt	r4, #0
 8003d88:	2318      	movge	r3, #24
 8003d8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003d8e:	f06f 0317 	mvn.w	r3, #23
 8003d92:	fb04 3303 	mla	r3, r4, r3, r3
 8003d96:	eb03 0a02 	add.w	sl, r3, r2
 8003d9a:	9b04      	ldr	r3, [sp, #16]
 8003d9c:	9a06      	ldr	r2, [sp, #24]
 8003d9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004078 <__kernel_rem_pio2+0x320>
 8003da2:	eb03 0802 	add.w	r8, r3, r2
 8003da6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003da8:	1aa7      	subs	r7, r4, r2
 8003daa:	ae20      	add	r6, sp, #128	; 0x80
 8003dac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003db0:	2500      	movs	r5, #0
 8003db2:	4545      	cmp	r5, r8
 8003db4:	dd18      	ble.n	8003de8 <__kernel_rem_pio2+0x90>
 8003db6:	9b08      	ldr	r3, [sp, #32]
 8003db8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003dbc:	aa20      	add	r2, sp, #128	; 0x80
 8003dbe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004078 <__kernel_rem_pio2+0x320>
 8003dc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003dc6:	f1c3 0301 	rsb	r3, r3, #1
 8003dca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003dce:	9307      	str	r3, [sp, #28]
 8003dd0:	9b07      	ldr	r3, [sp, #28]
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	4443      	add	r3, r8
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	db2f      	blt.n	8003e3a <__kernel_rem_pio2+0xe2>
 8003dda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003dde:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003de2:	462f      	mov	r7, r5
 8003de4:	2600      	movs	r6, #0
 8003de6:	e01b      	b.n	8003e20 <__kernel_rem_pio2+0xc8>
 8003de8:	42ef      	cmn	r7, r5
 8003dea:	d407      	bmi.n	8003dfc <__kernel_rem_pio2+0xa4>
 8003dec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003df0:	f7fc fb64 	bl	80004bc <__aeabi_i2d>
 8003df4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003df8:	3501      	adds	r5, #1
 8003dfa:	e7da      	b.n	8003db2 <__kernel_rem_pio2+0x5a>
 8003dfc:	ec51 0b18 	vmov	r0, r1, d8
 8003e00:	e7f8      	b.n	8003df4 <__kernel_rem_pio2+0x9c>
 8003e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e06:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003e0a:	f7fc fbc1 	bl	8000590 <__aeabi_dmul>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e16:	f7fc fa05 	bl	8000224 <__adddf3>
 8003e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e1e:	3601      	adds	r6, #1
 8003e20:	9b06      	ldr	r3, [sp, #24]
 8003e22:	429e      	cmp	r6, r3
 8003e24:	f1a7 0708 	sub.w	r7, r7, #8
 8003e28:	ddeb      	ble.n	8003e02 <__kernel_rem_pio2+0xaa>
 8003e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e2e:	3508      	adds	r5, #8
 8003e30:	ecab 7b02 	vstmia	fp!, {d7}
 8003e34:	f108 0801 	add.w	r8, r8, #1
 8003e38:	e7ca      	b.n	8003dd0 <__kernel_rem_pio2+0x78>
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	aa0c      	add	r2, sp, #48	; 0x30
 8003e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e44:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003e46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003e4a:	9c04      	ldr	r4, [sp, #16]
 8003e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e4e:	ab98      	add	r3, sp, #608	; 0x260
 8003e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e54:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003e58:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8003e5c:	f8cd b008 	str.w	fp, [sp, #8]
 8003e60:	4625      	mov	r5, r4
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	dc78      	bgt.n	8003f58 <__kernel_rem_pio2+0x200>
 8003e66:	ec47 6b10 	vmov	d0, r6, r7
 8003e6a:	4650      	mov	r0, sl
 8003e6c:	f000 fbfc 	bl	8004668 <scalbn>
 8003e70:	ec57 6b10 	vmov	r6, r7, d0
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003e7a:	ee10 0a10 	vmov	r0, s0
 8003e7e:	4639      	mov	r1, r7
 8003e80:	f7fc fb86 	bl	8000590 <__aeabi_dmul>
 8003e84:	ec41 0b10 	vmov	d0, r0, r1
 8003e88:	f000 fb6e 	bl	8004568 <floor>
 8003e8c:	4b7f      	ldr	r3, [pc, #508]	; (800408c <__kernel_rem_pio2+0x334>)
 8003e8e:	ec51 0b10 	vmov	r0, r1, d0
 8003e92:	2200      	movs	r2, #0
 8003e94:	f7fc fb7c 	bl	8000590 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fc f9be 	bl	8000220 <__aeabi_dsub>
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	f7fc fe0c 	bl	8000ac4 <__aeabi_d2iz>
 8003eac:	9007      	str	r0, [sp, #28]
 8003eae:	f7fc fb05 	bl	80004bc <__aeabi_i2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4639      	mov	r1, r7
 8003eba:	f7fc f9b1 	bl	8000220 <__aeabi_dsub>
 8003ebe:	f1ba 0f00 	cmp.w	sl, #0
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	dd70      	ble.n	8003faa <__kernel_rem_pio2+0x252>
 8003ec8:	1e62      	subs	r2, r4, #1
 8003eca:	ab0c      	add	r3, sp, #48	; 0x30
 8003ecc:	9d07      	ldr	r5, [sp, #28]
 8003ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ed2:	f1ca 0118 	rsb	r1, sl, #24
 8003ed6:	fa40 f301 	asr.w	r3, r0, r1
 8003eda:	441d      	add	r5, r3
 8003edc:	408b      	lsls	r3, r1
 8003ede:	1ac0      	subs	r0, r0, r3
 8003ee0:	ab0c      	add	r3, sp, #48	; 0x30
 8003ee2:	9507      	str	r5, [sp, #28]
 8003ee4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003ee8:	f1ca 0317 	rsb	r3, sl, #23
 8003eec:	fa40 f303 	asr.w	r3, r0, r3
 8003ef0:	9302      	str	r3, [sp, #8]
 8003ef2:	9b02      	ldr	r3, [sp, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dd66      	ble.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003ef8:	9b07      	ldr	r3, [sp, #28]
 8003efa:	2200      	movs	r2, #0
 8003efc:	3301      	adds	r3, #1
 8003efe:	9307      	str	r3, [sp, #28]
 8003f00:	4615      	mov	r5, r2
 8003f02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003f06:	4294      	cmp	r4, r2
 8003f08:	f300 8099 	bgt.w	800403e <__kernel_rem_pio2+0x2e6>
 8003f0c:	f1ba 0f00 	cmp.w	sl, #0
 8003f10:	dd07      	ble.n	8003f22 <__kernel_rem_pio2+0x1ca>
 8003f12:	f1ba 0f01 	cmp.w	sl, #1
 8003f16:	f000 80a5 	beq.w	8004064 <__kernel_rem_pio2+0x30c>
 8003f1a:	f1ba 0f02 	cmp.w	sl, #2
 8003f1e:	f000 80c1 	beq.w	80040a4 <__kernel_rem_pio2+0x34c>
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d14e      	bne.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f28:	4632      	mov	r2, r6
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4958      	ldr	r1, [pc, #352]	; (8004090 <__kernel_rem_pio2+0x338>)
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7fc f976 	bl	8000220 <__aeabi_dsub>
 8003f34:	4606      	mov	r6, r0
 8003f36:	460f      	mov	r7, r1
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	d044      	beq.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004080 <__kernel_rem_pio2+0x328>
 8003f42:	f000 fb91 	bl	8004668 <scalbn>
 8003f46:	4630      	mov	r0, r6
 8003f48:	4639      	mov	r1, r7
 8003f4a:	ec53 2b10 	vmov	r2, r3, d0
 8003f4e:	f7fc f967 	bl	8000220 <__aeabi_dsub>
 8003f52:	4606      	mov	r6, r0
 8003f54:	460f      	mov	r7, r1
 8003f56:	e036      	b.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f58:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <__kernel_rem_pio2+0x33c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f7fc fb16 	bl	8000590 <__aeabi_dmul>
 8003f64:	f7fc fdae 	bl	8000ac4 <__aeabi_d2iz>
 8003f68:	f7fc faa8 	bl	80004bc <__aeabi_i2d>
 8003f6c:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <__kernel_rem_pio2+0x340>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4680      	mov	r8, r0
 8003f72:	4689      	mov	r9, r1
 8003f74:	f7fc fb0c 	bl	8000590 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f7fc f94e 	bl	8000220 <__aeabi_dsub>
 8003f84:	f7fc fd9e 	bl	8000ac4 <__aeabi_d2iz>
 8003f88:	9b02      	ldr	r3, [sp, #8]
 8003f8a:	f843 0b04 	str.w	r0, [r3], #4
 8003f8e:	3d01      	subs	r5, #1
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	ab70      	add	r3, sp, #448	; 0x1c0
 8003f94:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc f940 	bl	8000224 <__adddf3>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	e75b      	b.n	8003e62 <__kernel_rem_pio2+0x10a>
 8003faa:	d105      	bne.n	8003fb8 <__kernel_rem_pio2+0x260>
 8003fac:	1e63      	subs	r3, r4, #1
 8003fae:	aa0c      	add	r2, sp, #48	; 0x30
 8003fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003fb4:	15c3      	asrs	r3, r0, #23
 8003fb6:	e79b      	b.n	8003ef0 <__kernel_rem_pio2+0x198>
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <__kernel_rem_pio2+0x344>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f7fc fd6e 	bl	8000a9c <__aeabi_dcmpge>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d139      	bne.n	8004038 <__kernel_rem_pio2+0x2e0>
 8003fc4:	9002      	str	r0, [sp, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4630      	mov	r0, r6
 8003fcc:	4639      	mov	r1, r7
 8003fce:	f7fc fd47 	bl	8000a60 <__aeabi_dcmpeq>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f000 80b4 	beq.w	8004140 <__kernel_rem_pio2+0x3e8>
 8003fd8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8003fdc:	465b      	mov	r3, fp
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9904      	ldr	r1, [sp, #16]
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	da65      	bge.n	80040b2 <__kernel_rem_pio2+0x35a>
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d07b      	beq.n	80040e2 <__kernel_rem_pio2+0x38a>
 8003fea:	ab0c      	add	r3, sp, #48	; 0x30
 8003fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8003ff0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a0 	beq.w	800413a <__kernel_rem_pio2+0x3e2>
 8003ffa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004080 <__kernel_rem_pio2+0x328>
 8003ffe:	4650      	mov	r0, sl
 8004000:	f000 fb32 	bl	8004668 <scalbn>
 8004004:	4f23      	ldr	r7, [pc, #140]	; (8004094 <__kernel_rem_pio2+0x33c>)
 8004006:	ec55 4b10 	vmov	r4, r5, d0
 800400a:	46d8      	mov	r8, fp
 800400c:	2600      	movs	r6, #0
 800400e:	f1b8 0f00 	cmp.w	r8, #0
 8004012:	f280 80cf 	bge.w	80041b4 <__kernel_rem_pio2+0x45c>
 8004016:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004078 <__kernel_rem_pio2+0x320>
 800401a:	465f      	mov	r7, fp
 800401c:	f04f 0800 	mov.w	r8, #0
 8004020:	2f00      	cmp	r7, #0
 8004022:	f2c0 80fd 	blt.w	8004220 <__kernel_rem_pio2+0x4c8>
 8004026:	ab70      	add	r3, sp, #448	; 0x1c0
 8004028:	f8df a074 	ldr.w	sl, [pc, #116]	; 80040a0 <__kernel_rem_pio2+0x348>
 800402c:	ec55 4b18 	vmov	r4, r5, d8
 8004030:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004034:	2600      	movs	r6, #0
 8004036:	e0e5      	b.n	8004204 <__kernel_rem_pio2+0x4ac>
 8004038:	2302      	movs	r3, #2
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	e75c      	b.n	8003ef8 <__kernel_rem_pio2+0x1a0>
 800403e:	f8db 3000 	ldr.w	r3, [fp]
 8004042:	b955      	cbnz	r5, 800405a <__kernel_rem_pio2+0x302>
 8004044:	b123      	cbz	r3, 8004050 <__kernel_rem_pio2+0x2f8>
 8004046:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800404a:	f8cb 3000 	str.w	r3, [fp]
 800404e:	2301      	movs	r3, #1
 8004050:	3201      	adds	r2, #1
 8004052:	f10b 0b04 	add.w	fp, fp, #4
 8004056:	461d      	mov	r5, r3
 8004058:	e755      	b.n	8003f06 <__kernel_rem_pio2+0x1ae>
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	f8cb 3000 	str.w	r3, [fp]
 8004060:	462b      	mov	r3, r5
 8004062:	e7f5      	b.n	8004050 <__kernel_rem_pio2+0x2f8>
 8004064:	1e62      	subs	r2, r4, #1
 8004066:	ab0c      	add	r3, sp, #48	; 0x30
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004070:	a90c      	add	r1, sp, #48	; 0x30
 8004072:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004076:	e754      	b.n	8003f22 <__kernel_rem_pio2+0x1ca>
	...
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	08004968 	.word	0x08004968
 800408c:	40200000 	.word	0x40200000
 8004090:	3ff00000 	.word	0x3ff00000
 8004094:	3e700000 	.word	0x3e700000
 8004098:	41700000 	.word	0x41700000
 800409c:	3fe00000 	.word	0x3fe00000
 80040a0:	08004928 	.word	0x08004928
 80040a4:	1e62      	subs	r2, r4, #1
 80040a6:	ab0c      	add	r3, sp, #48	; 0x30
 80040a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80040b0:	e7de      	b.n	8004070 <__kernel_rem_pio2+0x318>
 80040b2:	a90c      	add	r1, sp, #48	; 0x30
 80040b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	430a      	orrs	r2, r1
 80040bc:	e790      	b.n	8003fe0 <__kernel_rem_pio2+0x288>
 80040be:	3301      	adds	r3, #1
 80040c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d0fa      	beq.n	80040be <__kernel_rem_pio2+0x366>
 80040c8:	9a08      	ldr	r2, [sp, #32]
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	18a6      	adds	r6, r4, r2
 80040ce:	aa20      	add	r2, sp, #128	; 0x80
 80040d0:	1c65      	adds	r5, r4, #1
 80040d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	42ab      	cmp	r3, r5
 80040dc:	da04      	bge.n	80040e8 <__kernel_rem_pio2+0x390>
 80040de:	461c      	mov	r4, r3
 80040e0:	e6b5      	b.n	8003e4e <__kernel_rem_pio2+0xf6>
 80040e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040e4:	2301      	movs	r3, #1
 80040e6:	e7eb      	b.n	80040c0 <__kernel_rem_pio2+0x368>
 80040e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040ee:	f7fc f9e5 	bl	80004bc <__aeabi_i2d>
 80040f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80040f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f8:	46b3      	mov	fp, r6
 80040fa:	461c      	mov	r4, r3
 80040fc:	2700      	movs	r7, #0
 80040fe:	f04f 0800 	mov.w	r8, #0
 8004102:	f04f 0900 	mov.w	r9, #0
 8004106:	9b06      	ldr	r3, [sp, #24]
 8004108:	429f      	cmp	r7, r3
 800410a:	dd06      	ble.n	800411a <__kernel_rem_pio2+0x3c2>
 800410c:	ab70      	add	r3, sp, #448	; 0x1c0
 800410e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004112:	e9c3 8900 	strd	r8, r9, [r3]
 8004116:	3501      	adds	r5, #1
 8004118:	e7de      	b.n	80040d8 <__kernel_rem_pio2+0x380>
 800411a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800411e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004122:	f7fc fa35 	bl	8000590 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4640      	mov	r0, r8
 800412c:	4649      	mov	r1, r9
 800412e:	f7fc f879 	bl	8000224 <__adddf3>
 8004132:	3701      	adds	r7, #1
 8004134:	4680      	mov	r8, r0
 8004136:	4689      	mov	r9, r1
 8004138:	e7e5      	b.n	8004106 <__kernel_rem_pio2+0x3ae>
 800413a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800413e:	e754      	b.n	8003fea <__kernel_rem_pio2+0x292>
 8004140:	ec47 6b10 	vmov	d0, r6, r7
 8004144:	f1ca 0000 	rsb	r0, sl, #0
 8004148:	f000 fa8e 	bl	8004668 <scalbn>
 800414c:	ec57 6b10 	vmov	r6, r7, d0
 8004150:	4b9f      	ldr	r3, [pc, #636]	; (80043d0 <__kernel_rem_pio2+0x678>)
 8004152:	ee10 0a10 	vmov	r0, s0
 8004156:	2200      	movs	r2, #0
 8004158:	4639      	mov	r1, r7
 800415a:	f7fc fc9f 	bl	8000a9c <__aeabi_dcmpge>
 800415e:	b300      	cbz	r0, 80041a2 <__kernel_rem_pio2+0x44a>
 8004160:	4b9c      	ldr	r3, [pc, #624]	; (80043d4 <__kernel_rem_pio2+0x67c>)
 8004162:	2200      	movs	r2, #0
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f7fc fa12 	bl	8000590 <__aeabi_dmul>
 800416c:	f7fc fcaa 	bl	8000ac4 <__aeabi_d2iz>
 8004170:	4605      	mov	r5, r0
 8004172:	f7fc f9a3 	bl	80004bc <__aeabi_i2d>
 8004176:	4b96      	ldr	r3, [pc, #600]	; (80043d0 <__kernel_rem_pio2+0x678>)
 8004178:	2200      	movs	r2, #0
 800417a:	f7fc fa09 	bl	8000590 <__aeabi_dmul>
 800417e:	460b      	mov	r3, r1
 8004180:	4602      	mov	r2, r0
 8004182:	4639      	mov	r1, r7
 8004184:	4630      	mov	r0, r6
 8004186:	f7fc f84b 	bl	8000220 <__aeabi_dsub>
 800418a:	f7fc fc9b 	bl	8000ac4 <__aeabi_d2iz>
 800418e:	f104 0b01 	add.w	fp, r4, #1
 8004192:	ab0c      	add	r3, sp, #48	; 0x30
 8004194:	f10a 0a18 	add.w	sl, sl, #24
 8004198:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800419c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80041a0:	e72b      	b.n	8003ffa <__kernel_rem_pio2+0x2a2>
 80041a2:	4630      	mov	r0, r6
 80041a4:	4639      	mov	r1, r7
 80041a6:	f7fc fc8d 	bl	8000ac4 <__aeabi_d2iz>
 80041aa:	ab0c      	add	r3, sp, #48	; 0x30
 80041ac:	46a3      	mov	fp, r4
 80041ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80041b2:	e722      	b.n	8003ffa <__kernel_rem_pio2+0x2a2>
 80041b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80041b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80041ba:	ab0c      	add	r3, sp, #48	; 0x30
 80041bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80041c0:	f7fc f97c 	bl	80004bc <__aeabi_i2d>
 80041c4:	4622      	mov	r2, r4
 80041c6:	462b      	mov	r3, r5
 80041c8:	f7fc f9e2 	bl	8000590 <__aeabi_dmul>
 80041cc:	4632      	mov	r2, r6
 80041ce:	e9c9 0100 	strd	r0, r1, [r9]
 80041d2:	463b      	mov	r3, r7
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc f9da 	bl	8000590 <__aeabi_dmul>
 80041dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80041e0:	4604      	mov	r4, r0
 80041e2:	460d      	mov	r5, r1
 80041e4:	e713      	b.n	800400e <__kernel_rem_pio2+0x2b6>
 80041e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80041ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80041ee:	f7fc f9cf 	bl	8000590 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc f813 	bl	8000224 <__adddf3>
 80041fe:	3601      	adds	r6, #1
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	429e      	cmp	r6, r3
 8004208:	dc01      	bgt.n	800420e <__kernel_rem_pio2+0x4b6>
 800420a:	45b0      	cmp	r8, r6
 800420c:	daeb      	bge.n	80041e6 <__kernel_rem_pio2+0x48e>
 800420e:	ab48      	add	r3, sp, #288	; 0x120
 8004210:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004214:	e9c3 4500 	strd	r4, r5, [r3]
 8004218:	3f01      	subs	r7, #1
 800421a:	f108 0801 	add.w	r8, r8, #1
 800421e:	e6ff      	b.n	8004020 <__kernel_rem_pio2+0x2c8>
 8004220:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004222:	2b02      	cmp	r3, #2
 8004224:	dc0b      	bgt.n	800423e <__kernel_rem_pio2+0x4e6>
 8004226:	2b00      	cmp	r3, #0
 8004228:	dc6e      	bgt.n	8004308 <__kernel_rem_pio2+0x5b0>
 800422a:	d045      	beq.n	80042b8 <__kernel_rem_pio2+0x560>
 800422c:	9b07      	ldr	r3, [sp, #28]
 800422e:	f003 0007 	and.w	r0, r3, #7
 8004232:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004236:	ecbd 8b02 	vpop	{d8}
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004240:	2b03      	cmp	r3, #3
 8004242:	d1f3      	bne.n	800422c <__kernel_rem_pio2+0x4d4>
 8004244:	ab48      	add	r3, sp, #288	; 0x120
 8004246:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800424a:	46d0      	mov	r8, sl
 800424c:	46d9      	mov	r9, fp
 800424e:	f1b9 0f00 	cmp.w	r9, #0
 8004252:	f1a8 0808 	sub.w	r8, r8, #8
 8004256:	dc64      	bgt.n	8004322 <__kernel_rem_pio2+0x5ca>
 8004258:	465c      	mov	r4, fp
 800425a:	2c01      	cmp	r4, #1
 800425c:	f1aa 0a08 	sub.w	sl, sl, #8
 8004260:	dc7e      	bgt.n	8004360 <__kernel_rem_pio2+0x608>
 8004262:	2000      	movs	r0, #0
 8004264:	2100      	movs	r1, #0
 8004266:	f1bb 0f01 	cmp.w	fp, #1
 800426a:	f300 8097 	bgt.w	800439c <__kernel_rem_pio2+0x644>
 800426e:	9b02      	ldr	r3, [sp, #8]
 8004270:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8004274:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 8099 	bne.w	80043b0 <__kernel_rem_pio2+0x658>
 800427e:	9b01      	ldr	r3, [sp, #4]
 8004280:	e9c3 5600 	strd	r5, r6, [r3]
 8004284:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004288:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800428c:	e7ce      	b.n	800422c <__kernel_rem_pio2+0x4d4>
 800428e:	ab48      	add	r3, sp, #288	; 0x120
 8004290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fb ffc4 	bl	8000224 <__adddf3>
 800429c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80042a0:	f1bb 0f00 	cmp.w	fp, #0
 80042a4:	daf3      	bge.n	800428e <__kernel_rem_pio2+0x536>
 80042a6:	9b02      	ldr	r3, [sp, #8]
 80042a8:	b113      	cbz	r3, 80042b0 <__kernel_rem_pio2+0x558>
 80042aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042ae:	4619      	mov	r1, r3
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	e9c3 0100 	strd	r0, r1, [r3]
 80042b6:	e7b9      	b.n	800422c <__kernel_rem_pio2+0x4d4>
 80042b8:	2000      	movs	r0, #0
 80042ba:	2100      	movs	r1, #0
 80042bc:	e7f0      	b.n	80042a0 <__kernel_rem_pio2+0x548>
 80042be:	ab48      	add	r3, sp, #288	; 0x120
 80042c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fb ffac 	bl	8000224 <__adddf3>
 80042cc:	3c01      	subs	r4, #1
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	daf5      	bge.n	80042be <__kernel_rem_pio2+0x566>
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	b1e3      	cbz	r3, 8004310 <__kernel_rem_pio2+0x5b8>
 80042d6:	4602      	mov	r2, r0
 80042d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042dc:	9c01      	ldr	r4, [sp, #4]
 80042de:	e9c4 2300 	strd	r2, r3, [r4]
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80042ea:	f7fb ff99 	bl	8000220 <__aeabi_dsub>
 80042ee:	ad4a      	add	r5, sp, #296	; 0x128
 80042f0:	2401      	movs	r4, #1
 80042f2:	45a3      	cmp	fp, r4
 80042f4:	da0f      	bge.n	8004316 <__kernel_rem_pio2+0x5be>
 80042f6:	9b02      	ldr	r3, [sp, #8]
 80042f8:	b113      	cbz	r3, 8004300 <__kernel_rem_pio2+0x5a8>
 80042fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042fe:	4619      	mov	r1, r3
 8004300:	9b01      	ldr	r3, [sp, #4]
 8004302:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004306:	e791      	b.n	800422c <__kernel_rem_pio2+0x4d4>
 8004308:	465c      	mov	r4, fp
 800430a:	2000      	movs	r0, #0
 800430c:	2100      	movs	r1, #0
 800430e:	e7de      	b.n	80042ce <__kernel_rem_pio2+0x576>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	e7e2      	b.n	80042dc <__kernel_rem_pio2+0x584>
 8004316:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800431a:	f7fb ff83 	bl	8000224 <__adddf3>
 800431e:	3401      	adds	r4, #1
 8004320:	e7e7      	b.n	80042f2 <__kernel_rem_pio2+0x59a>
 8004322:	e9d8 4500 	ldrd	r4, r5, [r8]
 8004326:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800432a:	4620      	mov	r0, r4
 800432c:	4632      	mov	r2, r6
 800432e:	463b      	mov	r3, r7
 8004330:	4629      	mov	r1, r5
 8004332:	f7fb ff77 	bl	8000224 <__adddf3>
 8004336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fb ff6d 	bl	8000220 <__aeabi_dsub>
 8004346:	4632      	mov	r2, r6
 8004348:	463b      	mov	r3, r7
 800434a:	f7fb ff6b 	bl	8000224 <__adddf3>
 800434e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004352:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8004356:	ed88 7b00 	vstr	d7, [r8]
 800435a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800435e:	e776      	b.n	800424e <__kernel_rem_pio2+0x4f6>
 8004360:	e9da 8900 	ldrd	r8, r9, [sl]
 8004364:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004368:	4640      	mov	r0, r8
 800436a:	4632      	mov	r2, r6
 800436c:	463b      	mov	r3, r7
 800436e:	4649      	mov	r1, r9
 8004370:	f7fb ff58 	bl	8000224 <__adddf3>
 8004374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4640      	mov	r0, r8
 800437e:	4649      	mov	r1, r9
 8004380:	f7fb ff4e 	bl	8000220 <__aeabi_dsub>
 8004384:	4632      	mov	r2, r6
 8004386:	463b      	mov	r3, r7
 8004388:	f7fb ff4c 	bl	8000224 <__adddf3>
 800438c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004390:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004394:	ed8a 7b00 	vstr	d7, [sl]
 8004398:	3c01      	subs	r4, #1
 800439a:	e75e      	b.n	800425a <__kernel_rem_pio2+0x502>
 800439c:	ab48      	add	r3, sp, #288	; 0x120
 800439e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fb ff3d 	bl	8000224 <__adddf3>
 80043aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043ae:	e75a      	b.n	8004266 <__kernel_rem_pio2+0x50e>
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	9a01      	ldr	r2, [sp, #4]
 80043b4:	601d      	str	r5, [r3, #0]
 80043b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80043ba:	605c      	str	r4, [r3, #4]
 80043bc:	609f      	str	r7, [r3, #8]
 80043be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80043c2:	60d3      	str	r3, [r2, #12]
 80043c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043c8:	6110      	str	r0, [r2, #16]
 80043ca:	6153      	str	r3, [r2, #20]
 80043cc:	e72e      	b.n	800422c <__kernel_rem_pio2+0x4d4>
 80043ce:	bf00      	nop
 80043d0:	41700000 	.word	0x41700000
 80043d4:	3e700000 	.word	0x3e700000

080043d8 <__kernel_sin>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	ed2d 8b04 	vpush	{d8-d9}
 80043e0:	eeb0 8a41 	vmov.f32	s16, s2
 80043e4:	eef0 8a61 	vmov.f32	s17, s3
 80043e8:	ec55 4b10 	vmov	r4, r5, d0
 80043ec:	b083      	sub	sp, #12
 80043ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80043f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	da06      	bge.n	8004408 <__kernel_sin+0x30>
 80043fa:	ee10 0a10 	vmov	r0, s0
 80043fe:	4629      	mov	r1, r5
 8004400:	f7fc fb60 	bl	8000ac4 <__aeabi_d2iz>
 8004404:	2800      	cmp	r0, #0
 8004406:	d051      	beq.n	80044ac <__kernel_sin+0xd4>
 8004408:	4622      	mov	r2, r4
 800440a:	462b      	mov	r3, r5
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fc f8be 	bl	8000590 <__aeabi_dmul>
 8004414:	4682      	mov	sl, r0
 8004416:	468b      	mov	fp, r1
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4620      	mov	r0, r4
 800441e:	4629      	mov	r1, r5
 8004420:	f7fc f8b6 	bl	8000590 <__aeabi_dmul>
 8004424:	a341      	add	r3, pc, #260	; (adr r3, 800452c <__kernel_sin+0x154>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	4680      	mov	r8, r0
 800442c:	4689      	mov	r9, r1
 800442e:	4650      	mov	r0, sl
 8004430:	4659      	mov	r1, fp
 8004432:	f7fc f8ad 	bl	8000590 <__aeabi_dmul>
 8004436:	a33f      	add	r3, pc, #252	; (adr r3, 8004534 <__kernel_sin+0x15c>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb fef0 	bl	8000220 <__aeabi_dsub>
 8004440:	4652      	mov	r2, sl
 8004442:	465b      	mov	r3, fp
 8004444:	f7fc f8a4 	bl	8000590 <__aeabi_dmul>
 8004448:	a33c      	add	r3, pc, #240	; (adr r3, 800453c <__kernel_sin+0x164>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fb fee9 	bl	8000224 <__adddf3>
 8004452:	4652      	mov	r2, sl
 8004454:	465b      	mov	r3, fp
 8004456:	f7fc f89b 	bl	8000590 <__aeabi_dmul>
 800445a:	a33a      	add	r3, pc, #232	; (adr r3, 8004544 <__kernel_sin+0x16c>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fb fede 	bl	8000220 <__aeabi_dsub>
 8004464:	4652      	mov	r2, sl
 8004466:	465b      	mov	r3, fp
 8004468:	f7fc f892 	bl	8000590 <__aeabi_dmul>
 800446c:	a337      	add	r3, pc, #220	; (adr r3, 800454c <__kernel_sin+0x174>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fb fed7 	bl	8000224 <__adddf3>
 8004476:	9b01      	ldr	r3, [sp, #4]
 8004478:	4606      	mov	r6, r0
 800447a:	460f      	mov	r7, r1
 800447c:	b9eb      	cbnz	r3, 80044ba <__kernel_sin+0xe2>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4650      	mov	r0, sl
 8004484:	4659      	mov	r1, fp
 8004486:	f7fc f883 	bl	8000590 <__aeabi_dmul>
 800448a:	a325      	add	r3, pc, #148	; (adr r3, 8004520 <__kernel_sin+0x148>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fb fec6 	bl	8000220 <__aeabi_dsub>
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	f7fc f87a 	bl	8000590 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4620      	mov	r0, r4
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fb febe 	bl	8000224 <__adddf3>
 80044a8:	4604      	mov	r4, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	ec45 4b10 	vmov	d0, r4, r5
 80044b0:	b003      	add	sp, #12
 80044b2:	ecbd 8b04 	vpop	{d8-d9}
 80044b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ba:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <__kernel_sin+0x150>)
 80044bc:	ec51 0b18 	vmov	r0, r1, d8
 80044c0:	2200      	movs	r2, #0
 80044c2:	f7fc f865 	bl	8000590 <__aeabi_dmul>
 80044c6:	4632      	mov	r2, r6
 80044c8:	ec41 0b19 	vmov	d9, r0, r1
 80044cc:	463b      	mov	r3, r7
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fc f85d 	bl	8000590 <__aeabi_dmul>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	ec51 0b19 	vmov	r0, r1, d9
 80044de:	f7fb fe9f 	bl	8000220 <__aeabi_dsub>
 80044e2:	4652      	mov	r2, sl
 80044e4:	465b      	mov	r3, fp
 80044e6:	f7fc f853 	bl	8000590 <__aeabi_dmul>
 80044ea:	ec53 2b18 	vmov	r2, r3, d8
 80044ee:	f7fb fe97 	bl	8000220 <__aeabi_dsub>
 80044f2:	a30b      	add	r3, pc, #44	; (adr r3, 8004520 <__kernel_sin+0x148>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	4606      	mov	r6, r0
 80044fa:	460f      	mov	r7, r1
 80044fc:	4640      	mov	r0, r8
 80044fe:	4649      	mov	r1, r9
 8004500:	f7fc f846 	bl	8000590 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4630      	mov	r0, r6
 800450a:	4639      	mov	r1, r7
 800450c:	f7fb fe8a 	bl	8000224 <__adddf3>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4620      	mov	r0, r4
 8004516:	4629      	mov	r1, r5
 8004518:	f7fb fe82 	bl	8000220 <__aeabi_dsub>
 800451c:	e7c4      	b.n	80044a8 <__kernel_sin+0xd0>
 800451e:	bf00      	nop
 8004520:	55555549 	.word	0x55555549
 8004524:	3fc55555 	.word	0x3fc55555
 8004528:	3fe00000 	.word	0x3fe00000
 800452c:	5acfd57c 	.word	0x5acfd57c
 8004530:	3de5d93a 	.word	0x3de5d93a
 8004534:	8a2b9ceb 	.word	0x8a2b9ceb
 8004538:	3e5ae5e6 	.word	0x3e5ae5e6
 800453c:	57b1fe7d 	.word	0x57b1fe7d
 8004540:	3ec71de3 	.word	0x3ec71de3
 8004544:	19c161d5 	.word	0x19c161d5
 8004548:	3f2a01a0 	.word	0x3f2a01a0
 800454c:	1110f8a6 	.word	0x1110f8a6
 8004550:	3f811111 	.word	0x3f811111

08004554 <fabs>:
 8004554:	ec51 0b10 	vmov	r0, r1, d0
 8004558:	ee10 2a10 	vmov	r2, s0
 800455c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004560:	ec43 2b10 	vmov	d0, r2, r3
 8004564:	4770      	bx	lr
	...

08004568 <floor>:
 8004568:	ec51 0b10 	vmov	r0, r1, d0
 800456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004578:	2e13      	cmp	r6, #19
 800457a:	ee10 5a10 	vmov	r5, s0
 800457e:	ee10 8a10 	vmov	r8, s0
 8004582:	460c      	mov	r4, r1
 8004584:	dc32      	bgt.n	80045ec <floor+0x84>
 8004586:	2e00      	cmp	r6, #0
 8004588:	da14      	bge.n	80045b4 <floor+0x4c>
 800458a:	a333      	add	r3, pc, #204	; (adr r3, 8004658 <floor+0xf0>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fb fe48 	bl	8000224 <__adddf3>
 8004594:	2200      	movs	r2, #0
 8004596:	2300      	movs	r3, #0
 8004598:	f7fc fa8a 	bl	8000ab0 <__aeabi_dcmpgt>
 800459c:	b138      	cbz	r0, 80045ae <floor+0x46>
 800459e:	2c00      	cmp	r4, #0
 80045a0:	da57      	bge.n	8004652 <floor+0xea>
 80045a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80045a6:	431d      	orrs	r5, r3
 80045a8:	d001      	beq.n	80045ae <floor+0x46>
 80045aa:	4c2d      	ldr	r4, [pc, #180]	; (8004660 <floor+0xf8>)
 80045ac:	2500      	movs	r5, #0
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	e025      	b.n	8004600 <floor+0x98>
 80045b4:	4f2b      	ldr	r7, [pc, #172]	; (8004664 <floor+0xfc>)
 80045b6:	4137      	asrs	r7, r6
 80045b8:	ea01 0307 	and.w	r3, r1, r7
 80045bc:	4303      	orrs	r3, r0
 80045be:	d01f      	beq.n	8004600 <floor+0x98>
 80045c0:	a325      	add	r3, pc, #148	; (adr r3, 8004658 <floor+0xf0>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fb fe2d 	bl	8000224 <__adddf3>
 80045ca:	2200      	movs	r2, #0
 80045cc:	2300      	movs	r3, #0
 80045ce:	f7fc fa6f 	bl	8000ab0 <__aeabi_dcmpgt>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d0eb      	beq.n	80045ae <floor+0x46>
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	bfbe      	ittt	lt
 80045da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80045de:	fa43 f606 	asrlt.w	r6, r3, r6
 80045e2:	19a4      	addlt	r4, r4, r6
 80045e4:	ea24 0407 	bic.w	r4, r4, r7
 80045e8:	2500      	movs	r5, #0
 80045ea:	e7e0      	b.n	80045ae <floor+0x46>
 80045ec:	2e33      	cmp	r6, #51	; 0x33
 80045ee:	dd0b      	ble.n	8004608 <floor+0xa0>
 80045f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80045f4:	d104      	bne.n	8004600 <floor+0x98>
 80045f6:	ee10 2a10 	vmov	r2, s0
 80045fa:	460b      	mov	r3, r1
 80045fc:	f7fb fe12 	bl	8000224 <__adddf3>
 8004600:	ec41 0b10 	vmov	d0, r0, r1
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800460c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004610:	fa23 f707 	lsr.w	r7, r3, r7
 8004614:	4207      	tst	r7, r0
 8004616:	d0f3      	beq.n	8004600 <floor+0x98>
 8004618:	a30f      	add	r3, pc, #60	; (adr r3, 8004658 <floor+0xf0>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f7fb fe01 	bl	8000224 <__adddf3>
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	f7fc fa43 	bl	8000ab0 <__aeabi_dcmpgt>
 800462a:	2800      	cmp	r0, #0
 800462c:	d0bf      	beq.n	80045ae <floor+0x46>
 800462e:	2c00      	cmp	r4, #0
 8004630:	da02      	bge.n	8004638 <floor+0xd0>
 8004632:	2e14      	cmp	r6, #20
 8004634:	d103      	bne.n	800463e <floor+0xd6>
 8004636:	3401      	adds	r4, #1
 8004638:	ea25 0507 	bic.w	r5, r5, r7
 800463c:	e7b7      	b.n	80045ae <floor+0x46>
 800463e:	2301      	movs	r3, #1
 8004640:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004644:	fa03 f606 	lsl.w	r6, r3, r6
 8004648:	4435      	add	r5, r6
 800464a:	4545      	cmp	r5, r8
 800464c:	bf38      	it	cc
 800464e:	18e4      	addcc	r4, r4, r3
 8004650:	e7f2      	b.n	8004638 <floor+0xd0>
 8004652:	2500      	movs	r5, #0
 8004654:	462c      	mov	r4, r5
 8004656:	e7aa      	b.n	80045ae <floor+0x46>
 8004658:	8800759c 	.word	0x8800759c
 800465c:	7e37e43c 	.word	0x7e37e43c
 8004660:	bff00000 	.word	0xbff00000
 8004664:	000fffff 	.word	0x000fffff

08004668 <scalbn>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	ec55 4b10 	vmov	r4, r5, d0
 800466e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004672:	4606      	mov	r6, r0
 8004674:	462b      	mov	r3, r5
 8004676:	b99a      	cbnz	r2, 80046a0 <scalbn+0x38>
 8004678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800467c:	4323      	orrs	r3, r4
 800467e:	d036      	beq.n	80046ee <scalbn+0x86>
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <scalbn+0x100>)
 8004682:	4629      	mov	r1, r5
 8004684:	ee10 0a10 	vmov	r0, s0
 8004688:	2200      	movs	r2, #0
 800468a:	f7fb ff81 	bl	8000590 <__aeabi_dmul>
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <scalbn+0x104>)
 8004690:	429e      	cmp	r6, r3
 8004692:	4604      	mov	r4, r0
 8004694:	460d      	mov	r5, r1
 8004696:	da10      	bge.n	80046ba <scalbn+0x52>
 8004698:	a32b      	add	r3, pc, #172	; (adr r3, 8004748 <scalbn+0xe0>)
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	e03a      	b.n	8004716 <scalbn+0xae>
 80046a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80046a4:	428a      	cmp	r2, r1
 80046a6:	d10c      	bne.n	80046c2 <scalbn+0x5a>
 80046a8:	ee10 2a10 	vmov	r2, s0
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fb fdb8 	bl	8000224 <__adddf3>
 80046b4:	4604      	mov	r4, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	e019      	b.n	80046ee <scalbn+0x86>
 80046ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80046be:	460b      	mov	r3, r1
 80046c0:	3a36      	subs	r2, #54	; 0x36
 80046c2:	4432      	add	r2, r6
 80046c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80046c8:	428a      	cmp	r2, r1
 80046ca:	dd08      	ble.n	80046de <scalbn+0x76>
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	a120      	add	r1, pc, #128	; (adr r1, 8004750 <scalbn+0xe8>)
 80046d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d4:	da1c      	bge.n	8004710 <scalbn+0xa8>
 80046d6:	a120      	add	r1, pc, #128	; (adr r1, 8004758 <scalbn+0xf0>)
 80046d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046dc:	e018      	b.n	8004710 <scalbn+0xa8>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	dd08      	ble.n	80046f4 <scalbn+0x8c>
 80046e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046ee:	ec45 4b10 	vmov	d0, r4, r5
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80046f8:	da19      	bge.n	800472e <scalbn+0xc6>
 80046fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046fe:	429e      	cmp	r6, r3
 8004700:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004704:	dd0a      	ble.n	800471c <scalbn+0xb4>
 8004706:	a112      	add	r1, pc, #72	; (adr r1, 8004750 <scalbn+0xe8>)
 8004708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e2      	bne.n	80046d6 <scalbn+0x6e>
 8004710:	a30f      	add	r3, pc, #60	; (adr r3, 8004750 <scalbn+0xe8>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb ff3b 	bl	8000590 <__aeabi_dmul>
 800471a:	e7cb      	b.n	80046b4 <scalbn+0x4c>
 800471c:	a10a      	add	r1, pc, #40	; (adr r1, 8004748 <scalbn+0xe0>)
 800471e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0b8      	beq.n	8004698 <scalbn+0x30>
 8004726:	a10e      	add	r1, pc, #56	; (adr r1, 8004760 <scalbn+0xf8>)
 8004728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800472c:	e7b4      	b.n	8004698 <scalbn+0x30>
 800472e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004732:	3236      	adds	r2, #54	; 0x36
 8004734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800473c:	4620      	mov	r0, r4
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <scalbn+0x108>)
 8004740:	2200      	movs	r2, #0
 8004742:	e7e8      	b.n	8004716 <scalbn+0xae>
 8004744:	f3af 8000 	nop.w
 8004748:	c2f8f359 	.word	0xc2f8f359
 800474c:	01a56e1f 	.word	0x01a56e1f
 8004750:	8800759c 	.word	0x8800759c
 8004754:	7e37e43c 	.word	0x7e37e43c
 8004758:	8800759c 	.word	0x8800759c
 800475c:	fe37e43c 	.word	0xfe37e43c
 8004760:	c2f8f359 	.word	0xc2f8f359
 8004764:	81a56e1f 	.word	0x81a56e1f
 8004768:	43500000 	.word	0x43500000
 800476c:	ffff3cb0 	.word	0xffff3cb0
 8004770:	3c900000 	.word	0x3c900000

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
