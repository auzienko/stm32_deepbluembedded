
STM32_LM35_Temperature_Sensor_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005d20  08005d20  00015d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006154  08006154  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006154  08006154  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006154  08006154  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08006338  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006338  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009438  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6f  00000000  00000000  0002963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185db  00000000  00000000  0002c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009978  00000000  00000000  000448a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a7f  00000000  00000000  0004e21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  000d6cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d04 	.word	0x08005d04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005d04 	.word	0x08005d04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  float Temp = 0;
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t MSG[36] = {0};
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fa3e 	bl	8002fc0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 fb00 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f844 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 f906 	bl	8000d5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b50:	f000 f89c 	bl	8000c8c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b54:	f000 f8d8 	bl	8000d08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <main+0xa0>)
 8000b5a:	f000 ffa7 	bl	8001aac <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <main+0xa0>)
 8000b60:	f000 fc50 	bl	8001404 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8000b64:	210a      	movs	r1, #10
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <main+0xa0>)
 8000b68:	f000 fcfa 	bl	8001560 <HAL_ADC_PollForConversion>
    //3.3v/(2^12 * 10)
    //2^12 - ADC resolution
    //10 - divider from datasheet LM35
    //~0.0806
    Temp = HAL_ADC_GetValue(&hadc1) * 0.0806;
 8000b6c:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <main+0xa0>)
 8000b6e:	f000 fdfd 	bl	800176c <HAL_ADC_GetValue>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc35 	bl	80003e4 <__aeabi_ui2d>
 8000b7a:	a311      	add	r3, pc, #68	; (adr r3, 8000bc0 <main+0x98>)
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	f7ff fcaa 	bl	80004d8 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__aeabi_d2f>
 8000b90:	4603      	mov	r3, r0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    sprintf(MSG, "Temperature Is: %.3f C\n\r", Temp);
 8000b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b96:	f7ff fc47 	bl	8000428 <__aeabi_f2d>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	490a      	ldr	r1, [pc, #40]	; (8000bcc <main+0xa4>)
 8000ba2:	f002 fe75 	bl	8003890 <siprintf>
    HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8000ba6:	4639      	mov	r1, r7
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2224      	movs	r2, #36	; 0x24
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <main+0xa8>)
 8000bae:	f002 f872 	bl	8002c96 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb6:	f000 fb29 	bl	800120c <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000bba:	e7d0      	b.n	8000b5e <main+0x36>
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	9c0ebee0 	.word	0x9c0ebee0
 8000bc4:	3fb4a233 	.word	0x3fb4a233
 8000bc8:	20000204 	.word	0x20000204
 8000bcc:	08005d20 	.word	0x08005d20
 8000bd0:	20000234 	.word	0x20000234

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	; 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 f9ec 	bl	8002fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c12:	2301      	movs	r3, #1
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fa52 	bl	80020d4 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c36:	f000 f8b3 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fcbc 	bl	80025d4 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c62:	f000 f89d 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c66:	2302      	movs	r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fe48 	bl	8002908 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c7e:	f000 f88f 	bl	8000da0 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3750      	adds	r7, #80	; 0x50
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <MX_ADC1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cca:	f000 fac3 	bl	8001254 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 f864 	bl	8000da0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_ADC1_Init+0x74>)
 8000cea:	f000 fd4b 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cf4:	f000 f854 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000204 	.word	0x20000204
 8000d04:	40012400 	.word	0x40012400

08000d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART1_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f001 ff5c 	bl	8002bfc <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f829 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000234 	.word	0x20000234
 8000d58:	40013800 	.word	0x40013800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MX_GPIO_Init+0x40>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_MspInit+0x60>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_MspInit+0x60>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x6c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d121      	bne.n	8000e74 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_ADC_MspInit+0x74>)
 8000e70:	f000 ffac 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40012400 	.word	0x40012400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_UART_MspInit+0x8c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d131      	bne.n	8000f0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000eee:	f000 ff6d 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000f08:	f000 ff60 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f935 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
	return 1;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <_kill>:

int _kill(int pid, int sig)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f86:	f001 fff1 	bl	8002f6c <__errno>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2216      	movs	r2, #22
 8000f8e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_exit>:

void _exit (int status)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe7 	bl	8000f7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fae:	e7fe      	b.n	8000fae <_exit+0x12>

08000fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
	}

return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x12>
	}
	return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	605a      	str	r2, [r3, #4]
	return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f001 ff5a 	bl	8002f6c <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20005000 	.word	0x20005000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	20000290 	.word	0x20000290

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001122:	f7ff ffe5 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f001 ff27 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f7ff fcfd 	bl	8000b28 <main>
  bx lr
 800112e:	4770      	bx	lr
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001138:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 800113c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001140:	2000028c 	.word	0x2000028c

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 fe03 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fe22 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fe0d 	bl	8001db2 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f000 fde3 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_IncTick+0x1c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x20>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <HAL_IncTick+0x20>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000278 	.word	0x20000278

080011f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_GetTick+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000278 	.word	0x20000278

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fff0 	bl	80011f8 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffe0 	bl	80011f8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0be      	b.n	80013f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fdbc 	bl	8000e10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fbc5 	bl	8001a28 <ADC_ConversionStop_Disable>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 8099 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8095 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c0:	f023 0302 	bic.w	r3, r3, #2
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_Init+0xa2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_Init+0xa8>
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0xaa>
 80012fc:	2300      	movs	r3, #0
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d119      	bne.n	8001340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	035a      	lsls	r2, r3, #13
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e00b      	b.n	8001340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_ADC_Init+0x1a8>)
 800135c:	4013      	ands	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001370:	d003      	beq.n	800137a <HAL_ADC_Init+0x126>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	3b01      	subs	r3, #1
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	430a      	orrs	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_ADC_Init+0x1ac>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013be:	e018      	b.n	80013f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f023 0312 	bic.w	r3, r3, #18
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001400:	ff1f0efe 	.word	0xff1f0efe

08001404 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Start+0x1a>
 800141a:	2302      	movs	r3, #2
 800141c:	e098      	b.n	8001550 <HAL_ADC_Start+0x14c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 faa4 	bl	8001974 <ADC_Enable>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 8087 	bne.w	8001546 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_ADC_Start+0x154>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d105      	bne.n	8001462 <HAL_ADC_Start+0x5e>
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_ADC_Start+0x158>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d115      	bne.n	800148e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001478:	2b00      	cmp	r3, #0
 800147a:	d026      	beq.n	80014ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800148c:	e01d      	b.n	80014ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_ADC_Start+0x158>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Start+0xaa>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <HAL_ADC_Start+0x154>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10d      	bne.n	80014ca <HAL_ADC_Start+0xc6>
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_ADC_Start+0x158>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f023 0206 	bic.w	r2, r3, #6
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	e002      	b.n	80014ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f06f 0202 	mvn.w	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800150a:	d113      	bne.n	8001534 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_ADC_Start+0x154>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d105      	bne.n	8001522 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_ADC_Start+0x158>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	e00c      	b.n	800154e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e003      	b.n	800154e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012800 	.word	0x40012800
 800155c:	40012400 	.word	0x40012400

08001560 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001576:	f7ff fe3f 	bl	80011f8 <HAL_GetTick>
 800157a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0d3      	b.n	800174a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d131      	bne.n	8001614 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d12a      	bne.n	8001614 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015be:	e021      	b.n	8001604 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c6:	d01d      	beq.n	8001604 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_ADC_PollForConversion+0x7e>
 80015ce:	f7ff fe13 	bl	80011f8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d212      	bcs.n	8001604 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f043 0204 	orr.w	r2, r3, #4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0a2      	b.n	800174a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0d6      	beq.n	80015c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001612:	e070      	b.n	80016f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001614:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <HAL_ADC_PollForConversion+0x1f4>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	2002      	movs	r0, #2
 800161a:	f001 fa2b 	bl	8002a74 <HAL_RCCEx_GetPeriphCLKFreq>
 800161e:	4603      	mov	r3, r0
 8001620:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <HAL_ADC_PollForConversion+0x1f8>)
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_ADC_PollForConversion+0x104>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68d9      	ldr	r1, [r3, #12]
 8001638:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_ADC_PollForConversion+0x1fc>)
 800163a:	400b      	ands	r3, r1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <HAL_ADC_PollForConversion+0x104>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_ADC_PollForConversion+0x200>)
 8001648:	400b      	ands	r3, r1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_ADC_PollForConversion+0x100>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d9      	ldr	r1, [r3, #12]
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <HAL_ADC_PollForConversion+0x204>)
 8001656:	400b      	ands	r3, r1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_ADC_PollForConversion+0x100>
 800165c:	2314      	movs	r3, #20
 800165e:	e020      	b.n	80016a2 <HAL_ADC_PollForConversion+0x142>
 8001660:	2329      	movs	r3, #41	; 0x29
 8001662:	e01e      	b.n	80016a2 <HAL_ADC_PollForConversion+0x142>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_ADC_PollForConversion+0x200>)
 800166c:	400b      	ands	r3, r1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_ADC_PollForConversion+0x120>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68d9      	ldr	r1, [r3, #12]
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <HAL_ADC_PollForConversion+0x204>)
 800167a:	400b      	ands	r3, r1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <HAL_ADC_PollForConversion+0x13c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6919      	ldr	r1, [r3, #16]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_ADC_PollForConversion+0x208>)
 8001688:	400b      	ands	r3, r1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x140>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_ADC_PollForConversion+0x208>)
 8001696:	400b      	ands	r3, r1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x140>
 800169c:	2354      	movs	r3, #84	; 0x54
 800169e:	e000      	b.n	80016a2 <HAL_ADC_PollForConversion+0x142>
 80016a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016a8:	e021      	b.n	80016ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b0:	d01a      	beq.n	80016e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_ADC_PollForConversion+0x168>
 80016b8:	f7ff fd9e 	bl	80011f8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d20f      	bcs.n	80016e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d90b      	bls.n	80016e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e030      	b.n	800174a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8d9      	bhi.n	80016aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f06f 0212 	mvn.w	r2, #18
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001716:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800171a:	d115      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	20000000 	.word	0x20000000
 8001758:	24924924 	.word	0x24924924
 800175c:	00924924 	.word	0x00924924
 8001760:	12492492 	.word	0x12492492
 8001764:	00492492 	.word	0x00492492
 8001768:	00249249 	.word	0x00249249

0800176c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x20>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e0dc      	b.n	800195e <HAL_ADC_ConfigChannel+0x1da>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	d81c      	bhi.n	80017ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b05      	subs	r3, #5
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b05      	subs	r3, #5
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
 80017ec:	e03c      	b.n	8001868 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d81c      	bhi.n	8001830 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	3b23      	subs	r3, #35	; 0x23
 8001808:	221f      	movs	r2, #31
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	4019      	ands	r1, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b23      	subs	r3, #35	; 0x23
 8001822:	fa00 f203 	lsl.w	r2, r0, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
 800182e:	e01b      	b.n	8001868 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	3b41      	subs	r3, #65	; 0x41
 8001842:	221f      	movs	r2, #31
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	4019      	ands	r1, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b41      	subs	r3, #65	; 0x41
 800185c:	fa00 f203 	lsl.w	r2, r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d91c      	bls.n	80018aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	3b1e      	subs	r3, #30
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	e019      	b.n	80018de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6919      	ldr	r1, [r3, #16]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d003      	beq.n	80018ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ea:	2b11      	cmp	r3, #17
 80018ec:	d132      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_ADC_ConfigChannel+0x1e4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d125      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d126      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001914:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d11a      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_ConfigChannel+0x1e8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_ADC_ConfigChannel+0x1ec>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9a      	lsrs	r2, r3, #18
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001934:	e002      	b.n	800193c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x1b2>
 8001942:	e007      	b.n	8001954 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40012400 	.word	0x40012400
 800196c:	20000000 	.word	0x20000000
 8001970:	431bde83 	.word	0x431bde83

08001974 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d040      	beq.n	8001a14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <ADC_Enable+0xac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <ADC_Enable+0xb0>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019b0:	e002      	b.n	80019b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019be:	f7ff fc1b 	bl	80011f8 <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019c4:	e01f      	b.n	8001a06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019c6:	f7ff fc17 	bl	80011f8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d918      	bls.n	8001a06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d011      	beq.n	8001a06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f043 0210 	orr.w	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e007      	b.n	8001a16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d1d8      	bne.n	80019c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12e      	bne.n	8001aa0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a52:	f7ff fbd1 	bl	80011f8 <HAL_GetTick>
 8001a56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a58:	e01b      	b.n	8001a92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a5a:	f7ff fbcd 	bl	80011f8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d914      	bls.n	8001a92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10d      	bne.n	8001a92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e007      	b.n	8001aa2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d0dc      	beq.n	8001a5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADCEx_Calibration_Start+0x1e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e095      	b.n	8001bf6 <HAL_ADCEx_Calibration_Start+0x14a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa8 	bl	8001a28 <ADC_ConversionStop_Disable>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8084 	bne.w	8001bec <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aec:	f023 0302 	bic.w	r3, r3, #2
 8001af0:	f043 0202 	orr.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_ADCEx_Calibration_Start+0x154>)
 8001afa:	681c      	ldr	r4, [r3, #0]
 8001afc:	2002      	movs	r0, #2
 8001afe:	f000 ffb9 	bl	8002a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b08:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001b0a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001b0c:	e002      	b.n	8001b14 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f9      	bne.n	8001b0e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff2a 	bl	8001974 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b30:	f7ff fb62 	bl	80011f8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b36:	e01b      	b.n	8001b70 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b38:	f7ff fb5e 	bl	80011f8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d914      	bls.n	8001b70 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f023 0312 	bic.w	r3, r3, #18
 8001b5c:	f043 0210 	orr.w	r2, r3, #16
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e042      	b.n	8001bf6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1dc      	bne.n	8001b38 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0204 	orr.w	r2, r2, #4
 8001b8c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b8e:	f7ff fb33 	bl	80011f8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b94:	e01b      	b.n	8001bce <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b96:	f7ff fb2f 	bl	80011f8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b0a      	cmp	r3, #10
 8001ba2:	d914      	bls.n	8001bce <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f023 0312 	bic.w	r3, r3, #18
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e013      	b.n	8001bf6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1dc      	bne.n	8001b96 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f023 0303 	bic.w	r3, r3, #3
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000000 	.word	0x20000000

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff49 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff5e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffb0 	bl	8001d20 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e169      	b.n	80020b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de0:	2201      	movs	r2, #1
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8158 	bne.w	80020ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a9a      	ldr	r2, [pc, #616]	; (800206c <HAL_GPIO_Init+0x2a0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e08:	4a98      	ldr	r2, [pc, #608]	; (800206c <HAL_GPIO_Init+0x2a0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d875      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e0e:	4a98      	ldr	r2, [pc, #608]	; (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d058      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e14:	4a96      	ldr	r2, [pc, #600]	; (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d86f      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e1a:	4a96      	ldr	r2, [pc, #600]	; (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d052      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e20:	4a94      	ldr	r2, [pc, #592]	; (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d869      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e26:	4a94      	ldr	r2, [pc, #592]	; (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04c      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a92      	ldr	r2, [pc, #584]	; (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d863      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e32:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_GPIO_Init+0x2b0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d046      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a90      	ldr	r2, [pc, #576]	; (800207c <HAL_GPIO_Init+0x2b0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d85d      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d82a      	bhi.n	8001e98 <HAL_GPIO_Init+0xcc>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d859      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_GPIO_Init+0x80>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ea1 	.word	0x08001ea1
 8001e54:	08001eb3 	.word	0x08001eb3
 8001e58:	08001ef5 	.word	0x08001ef5
 8001e5c:	08001efb 	.word	0x08001efb
 8001e60:	08001efb 	.word	0x08001efb
 8001e64:	08001efb 	.word	0x08001efb
 8001e68:	08001efb 	.word	0x08001efb
 8001e6c:	08001efb 	.word	0x08001efb
 8001e70:	08001efb 	.word	0x08001efb
 8001e74:	08001efb 	.word	0x08001efb
 8001e78:	08001efb 	.word	0x08001efb
 8001e7c:	08001efb 	.word	0x08001efb
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001efb 	.word	0x08001efb
 8001e88:	08001efb 	.word	0x08001efb
 8001e8c:	08001efb 	.word	0x08001efb
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001ebd 	.word	0x08001ebd
 8001e98:	4a79      	ldr	r2, [pc, #484]	; (8002080 <HAL_GPIO_Init+0x2b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9e:	e02c      	b.n	8001efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e029      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	3304      	adds	r3, #4
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e024      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e01f      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e01a      	b.n	8001efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e013      	b.n	8001efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	611a      	str	r2, [r3, #16]
          break;
 8001ee6:	e009      	b.n	8001efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	615a      	str	r2, [r3, #20]
          break;
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x130>
          break;
 8001efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d801      	bhi.n	8001f06 <HAL_GPIO_Init+0x13a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_Init+0x13e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d802      	bhi.n	8001f18 <HAL_GPIO_Init+0x14c>
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x152>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	3b08      	subs	r3, #8
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	210f      	movs	r1, #15
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80b1 	beq.w	80020ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f64:	4a48      	ldr	r2, [pc, #288]	; (8002088 <HAL_GPIO_Init+0x2bc>)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a40      	ldr	r2, [pc, #256]	; (800208c <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <HAL_GPIO_Init+0x2c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <HAL_GPIO_Init+0x2cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_GPIO_Init+0x1e0>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fca:	492f      	ldr	r1, [pc, #188]	; (8002088 <HAL_GPIO_Init+0x2bc>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	492c      	ldr	r1, [pc, #176]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4928      	ldr	r1, [pc, #160]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	491e      	ldr	r1, [pc, #120]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4918      	ldr	r1, [pc, #96]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4914      	ldr	r1, [pc, #80]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
 8002068:	e021      	b.n	80020ae <HAL_GPIO_Init+0x2e2>
 800206a:	bf00      	nop
 800206c:	10320000 	.word	0x10320000
 8002070:	10310000 	.word	0x10310000
 8002074:	10220000 	.word	0x10220000
 8002078:	10210000 	.word	0x10210000
 800207c:	10120000 	.word	0x10120000
 8002080:	10110000 	.word	0x10110000
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	40011000 	.word	0x40011000
 8002098:	40011400 	.word	0x40011400
 800209c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_GPIO_Init+0x304>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4909      	ldr	r1, [pc, #36]	; (80020d0 <HAL_GPIO_Init+0x304>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f47f ae8e 	bne.w	8001de0 <HAL_GPIO_Init+0x14>
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	372c      	adds	r7, #44	; 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e26c      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8087 	beq.w	8002202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f4:	4b92      	ldr	r3, [pc, #584]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d00c      	beq.n	800211a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002100:	4b8f      	ldr	r3, [pc, #572]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d112      	bne.n	8002132 <HAL_RCC_OscConfig+0x5e>
 800210c:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d10b      	bne.n	8002132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d06c      	beq.n	8002200 <HAL_RCC_OscConfig+0x12c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d168      	bne.n	8002200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e246      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x76>
 800213c:	4b80      	ldr	r3, [pc, #512]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7f      	ldr	r2, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e02e      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x98>
 8002152:	4b7b      	ldr	r3, [pc, #492]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7a      	ldr	r2, [pc, #488]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b78      	ldr	r3, [pc, #480]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a77      	ldr	r2, [pc, #476]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0xbc>
 8002176:	4b72      	ldr	r3, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a71      	ldr	r2, [pc, #452]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 8002190:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a67      	ldr	r2, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f822 	bl	80011f8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff f81e 	bl	80011f8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1fa      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe4>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff f80e 	bl	80011f8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f80a 	bl	80011f8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1e6      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x10c>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d063      	beq.n	80022d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220e:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b08      	cmp	r3, #8
 8002224:	d11c      	bne.n	8002260 <HAL_RCC_OscConfig+0x18c>
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x176>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e1ba      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4939      	ldr	r1, [pc, #228]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	e03a      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe ffc3 	bl	80011f8 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002276:	f7fe ffbf 	bl	80011f8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e19b      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4927      	ldr	r1, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e015      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe ffa2 	bl	80011f8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b8:	f7fe ff9e 	bl	80011f8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e17a      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d03a      	beq.n	8002358 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe ff82 	bl	80011f8 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe ff7e 	bl	80011f8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e15a      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002316:	2001      	movs	r0, #1
 8002318:	f000 fad8 	bl	80028cc <RCC_Delay>
 800231c:	e01c      	b.n	8002358 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe ff68 	bl	80011f8 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232a:	e00f      	b.n	800234c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe ff64 	bl	80011f8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d908      	bls.n	800234c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e140      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	42420000 	.word	0x42420000
 8002348:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e9      	bne.n	800232c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a6 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b97      	ldr	r3, [pc, #604]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b94      	ldr	r3, [pc, #592]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a93      	ldr	r2, [pc, #588]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b91      	ldr	r3, [pc, #580]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <HAL_RCC_OscConfig+0x4f8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a8a      	ldr	r2, [pc, #552]	; (80025cc <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe ff25 	bl	80011f8 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe ff21 	bl	80011f8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0fd      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x312>
 80023d8:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x334>
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	e01c      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x356>
 8002410:	4b6d      	ldr	r3, [pc, #436]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a6c      	ldr	r2, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fed5 	bl	80011f8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fed1 	bl	80011f8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0ab      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x37e>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe febf 	bl	80011f8 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe febb 	bl	80011f8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e095      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8081 	beq.w	80025be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d061      	beq.n	800258c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d146      	bne.n	800255e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_OscConfig+0x4fc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe8f 	bl	80011f8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fe8b 	bl	80011f8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e067      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	492d      	ldr	r1, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a19      	ldr	r1, [r3, #32]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	430b      	orrs	r3, r1
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fe5f 	bl	80011f8 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fe5b 	bl	80011f8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e037      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x46a>
 800255c:	e02f      	b.n	80025be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_RCC_OscConfig+0x4fc>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fe48 	bl	80011f8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fe44 	bl	80011f8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e020      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x498>
 800258a:	e018      	b.n	80025be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42420060 	.word	0x42420060

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4965      	ldr	r1, [pc, #404]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800263a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fd98 	bl	80011f8 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fd94 	bl	80011f8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4922      	ldr	r1, [pc, #136]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fcf6 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	08005d5c 	.word	0x08005d5c
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b490      	push	{r4, r7}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027b0:	1d3c      	adds	r4, r7, #4
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b8:	f240 2301 	movw	r3, #513	; 0x201
 80027bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x40>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x46>
 80027e6:	e02d      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ea:	623b      	str	r3, [r7, #32]
      break;
 80027ec:	e02d      	b.n	800284a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fa:	4413      	add	r3, r2
 80027fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002800:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_GetSysClockFreq+0xb4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0c5b      	lsrs	r3, r3, #17
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800281a:	4413      	add	r3, r2
 800281c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002820:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002826:	fb02 f203 	mul.w	r2, r2, r3
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	e004      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	623b      	str	r3, [r7, #32]
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	623b      	str	r3, [r7, #32]
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6a3b      	ldr	r3, [r7, #32]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3728      	adds	r7, #40	; 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc90      	pop	{r4, r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	08005d3c 	.word	0x08005d3c
 800285c:	40021000 	.word	0x40021000
 8002860:	007a1200 	.word	0x007a1200
 8002864:	003d0900 	.word	0x003d0900

08002868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <HAL_RCC_GetHCLKFreq+0x10>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002880:	f7ff fff2 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08005d6c 	.word	0x08005d6c

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a8:	f7ff ffde 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08005d6c 	.word	0x08005d6c

080028cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <RCC_Delay+0x34>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <RCC_Delay+0x38>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0a5b      	lsrs	r3, r3, #9
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e8:	bf00      	nop
  }
  while (Delay --);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	60fa      	str	r2, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f9      	bne.n	80028e8 <RCC_Delay+0x1c>
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000000 	.word	0x20000000
 8002904:	10624dd3 	.word	0x10624dd3

08002908 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d07d      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002928:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10d      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	61d3      	str	r3, [r2, #28]
 8002940:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d118      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295c:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002968:	f7fe fc46 	bl	80011f8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	e008      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002970:	f7fe fc42 	bl	80011f8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e06d      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d02e      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d027      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ac:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d014      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fc11 	bl	80011f8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe fc0d 	bl	80011f8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e036      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4917      	ldr	r1, [pc, #92]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	490b      	ldr	r1, [pc, #44]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4904      	ldr	r1, [pc, #16]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42420440 	.word	0x42420440

08002a74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b08d      	sub	sp, #52	; 0x34
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a7c:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a7e:	f107 040c 	add.w	r4, r7, #12
 8002a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a88:	f240 2301 	movw	r3, #513	; 0x201
 8002a8c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	f200 8091 	bhi.w	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d04c      	beq.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d07c      	beq.n	8002bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002abc:	e089      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8082 	beq.w	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ade:	4413      	add	r3, r2
 8002ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ae4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d018      	beq.n	8002b22 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af0:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c5b      	lsrs	r3, r3, #17
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002afe:	4413      	add	r3, r2
 8002b00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b10:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	e004      	b.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b38:	d102      	bne.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b3e:	e04a      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b4e:	e042      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d108      	bne.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b72:	e01f      	b.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7e:	d109      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002b8c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	e00f      	b.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b9e:	d11c      	bne.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002bac:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bb2:	e012      	b.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002bb4:	e011      	b.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bb6:	f7ff fe75 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0b9b      	lsrs	r3, r3, #14
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bd0:	e004      	b.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002bda:	bf00      	nop
    }
  }
  return (frequency);
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3734      	adds	r7, #52	; 0x34
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08005d4c 	.word	0x08005d4c
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	007a1200 	.word	0x007a1200
 8002bf4:	003d0900 	.word	0x003d0900
 8002bf8:	aaaaaaab 	.word	0xaaaaaaab

08002bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e03f      	b.n	8002c8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe f930 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f905 	bl	8002e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af02      	add	r7, sp, #8
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d17c      	bne.n	8002db0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_UART_Transmit+0x2c>
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e075      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x3e>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e06e      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	; 0x21
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cea:	f7fe fa85 	bl	80011f8 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d108      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e003      	b.n	8002d20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d28:	e02a      	b.n	8002d80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f840 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e036      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e007      	b.n	8002d72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1cf      	bne.n	8002d2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f810 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e006      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dca:	e02c      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d028      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <UART_WaitOnFlagUntilTimeout+0x30>
 8002dda:	f7fe fa0d 	bl	80011f8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d21d      	bcs.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002df8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e00f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0c3      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e8a:	f023 030c 	bic.w	r3, r3, #12
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <UART_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb8:	f7ff fcf4 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	e002      	b.n	8002ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ec0:	f7ff fcdc 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <UART_SetConfig+0x118>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	0119      	lsls	r1, r3, #4
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	; 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1c:	4419      	add	r1, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <UART_SetConfig+0x118>)
 8002f36:	fba3 0302 	umull	r0, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2064      	movs	r0, #100	; 0x64
 8002f3e:	fb00 f303 	mul.w	r3, r0, r3
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	; 0x32
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <UART_SetConfig+0x118>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	440a      	add	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013800 	.word	0x40013800
 8002f68:	51eb851f 	.word	0x51eb851f

08002f6c <__errno>:
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <__errno+0x8>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	; (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	; (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f002 febc 	bl	8005d04 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	; (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	08006154 	.word	0x08006154
 8002fb4:	08006154 	.word	0x08006154
 8002fb8:	08006154 	.word	0x08006154
 8002fbc:	08006158 	.word	0x08006158

08002fc0 <memset>:
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d100      	bne.n	8002fca <memset+0xa>
 8002fc8:	4770      	bx	lr
 8002fca:	f803 1b01 	strb.w	r1, [r3], #1
 8002fce:	e7f9      	b.n	8002fc4 <memset+0x4>

08002fd0 <__cvt>:
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd6:	461f      	mov	r7, r3
 8002fd8:	bfbb      	ittet	lt
 8002fda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fde:	461f      	movlt	r7, r3
 8002fe0:	2300      	movge	r3, #0
 8002fe2:	232d      	movlt	r3, #45	; 0x2d
 8002fe4:	b088      	sub	sp, #32
 8002fe6:	4614      	mov	r4, r2
 8002fe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fec:	7013      	strb	r3, [r2, #0]
 8002fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ff0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002ff4:	f023 0820 	bic.w	r8, r3, #32
 8002ff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ffc:	d005      	beq.n	800300a <__cvt+0x3a>
 8002ffe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003002:	d100      	bne.n	8003006 <__cvt+0x36>
 8003004:	3501      	adds	r5, #1
 8003006:	2302      	movs	r3, #2
 8003008:	e000      	b.n	800300c <__cvt+0x3c>
 800300a:	2303      	movs	r3, #3
 800300c:	aa07      	add	r2, sp, #28
 800300e:	9204      	str	r2, [sp, #16]
 8003010:	aa06      	add	r2, sp, #24
 8003012:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003016:	e9cd 3500 	strd	r3, r5, [sp]
 800301a:	4622      	mov	r2, r4
 800301c:	463b      	mov	r3, r7
 800301e:	f000 fce7 	bl	80039f0 <_dtoa_r>
 8003022:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003026:	4606      	mov	r6, r0
 8003028:	d102      	bne.n	8003030 <__cvt+0x60>
 800302a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800302c:	07db      	lsls	r3, r3, #31
 800302e:	d522      	bpl.n	8003076 <__cvt+0xa6>
 8003030:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003034:	eb06 0905 	add.w	r9, r6, r5
 8003038:	d110      	bne.n	800305c <__cvt+0x8c>
 800303a:	7833      	ldrb	r3, [r6, #0]
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d10a      	bne.n	8003056 <__cvt+0x86>
 8003040:	2200      	movs	r2, #0
 8003042:	2300      	movs	r3, #0
 8003044:	4620      	mov	r0, r4
 8003046:	4639      	mov	r1, r7
 8003048:	f7fd fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800304c:	b918      	cbnz	r0, 8003056 <__cvt+0x86>
 800304e:	f1c5 0501 	rsb	r5, r5, #1
 8003052:	f8ca 5000 	str.w	r5, [sl]
 8003056:	f8da 3000 	ldr.w	r3, [sl]
 800305a:	4499      	add	r9, r3
 800305c:	2200      	movs	r2, #0
 800305e:	2300      	movs	r3, #0
 8003060:	4620      	mov	r0, r4
 8003062:	4639      	mov	r1, r7
 8003064:	f7fd fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8003068:	b108      	cbz	r0, 800306e <__cvt+0x9e>
 800306a:	f8cd 901c 	str.w	r9, [sp, #28]
 800306e:	2230      	movs	r2, #48	; 0x30
 8003070:	9b07      	ldr	r3, [sp, #28]
 8003072:	454b      	cmp	r3, r9
 8003074:	d307      	bcc.n	8003086 <__cvt+0xb6>
 8003076:	4630      	mov	r0, r6
 8003078:	9b07      	ldr	r3, [sp, #28]
 800307a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800307c:	1b9b      	subs	r3, r3, r6
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	b008      	add	sp, #32
 8003082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	9107      	str	r1, [sp, #28]
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e7f0      	b.n	8003070 <__cvt+0xa0>

0800308e <__exponent>:
 800308e:	4603      	mov	r3, r0
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003092:	2900      	cmp	r1, #0
 8003094:	f803 2b02 	strb.w	r2, [r3], #2
 8003098:	bfb6      	itet	lt
 800309a:	222d      	movlt	r2, #45	; 0x2d
 800309c:	222b      	movge	r2, #43	; 0x2b
 800309e:	4249      	neglt	r1, r1
 80030a0:	2909      	cmp	r1, #9
 80030a2:	7042      	strb	r2, [r0, #1]
 80030a4:	dd2b      	ble.n	80030fe <__exponent+0x70>
 80030a6:	f10d 0407 	add.w	r4, sp, #7
 80030aa:	46a4      	mov	ip, r4
 80030ac:	270a      	movs	r7, #10
 80030ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80030b2:	460a      	mov	r2, r1
 80030b4:	46a6      	mov	lr, r4
 80030b6:	fb07 1516 	mls	r5, r7, r6, r1
 80030ba:	2a63      	cmp	r2, #99	; 0x63
 80030bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80030c0:	4631      	mov	r1, r6
 80030c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80030c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80030ca:	dcf0      	bgt.n	80030ae <__exponent+0x20>
 80030cc:	3130      	adds	r1, #48	; 0x30
 80030ce:	f1ae 0502 	sub.w	r5, lr, #2
 80030d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80030d6:	4629      	mov	r1, r5
 80030d8:	1c44      	adds	r4, r0, #1
 80030da:	4561      	cmp	r1, ip
 80030dc:	d30a      	bcc.n	80030f4 <__exponent+0x66>
 80030de:	f10d 0209 	add.w	r2, sp, #9
 80030e2:	eba2 020e 	sub.w	r2, r2, lr
 80030e6:	4565      	cmp	r5, ip
 80030e8:	bf88      	it	hi
 80030ea:	2200      	movhi	r2, #0
 80030ec:	4413      	add	r3, r2
 80030ee:	1a18      	subs	r0, r3, r0
 80030f0:	b003      	add	sp, #12
 80030f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80030fc:	e7ed      	b.n	80030da <__exponent+0x4c>
 80030fe:	2330      	movs	r3, #48	; 0x30
 8003100:	3130      	adds	r1, #48	; 0x30
 8003102:	7083      	strb	r3, [r0, #2]
 8003104:	70c1      	strb	r1, [r0, #3]
 8003106:	1d03      	adds	r3, r0, #4
 8003108:	e7f1      	b.n	80030ee <__exponent+0x60>
	...

0800310c <_printf_float>:
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	b091      	sub	sp, #68	; 0x44
 8003112:	460c      	mov	r4, r1
 8003114:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003118:	4616      	mov	r6, r2
 800311a:	461f      	mov	r7, r3
 800311c:	4605      	mov	r5, r0
 800311e:	f001 fa55 	bl	80045cc <_localeconv_r>
 8003122:	6803      	ldr	r3, [r0, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	9309      	str	r3, [sp, #36]	; 0x24
 8003128:	f7fd f812 	bl	8000150 <strlen>
 800312c:	2300      	movs	r3, #0
 800312e:	930e      	str	r3, [sp, #56]	; 0x38
 8003130:	f8d8 3000 	ldr.w	r3, [r8]
 8003134:	900a      	str	r0, [sp, #40]	; 0x28
 8003136:	3307      	adds	r3, #7
 8003138:	f023 0307 	bic.w	r3, r3, #7
 800313c:	f103 0208 	add.w	r2, r3, #8
 8003140:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003144:	f8d4 b000 	ldr.w	fp, [r4]
 8003148:	f8c8 2000 	str.w	r2, [r8]
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003154:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003158:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800315c:	930b      	str	r3, [sp, #44]	; 0x2c
 800315e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003162:	4640      	mov	r0, r8
 8003164:	4b9c      	ldr	r3, [pc, #624]	; (80033d8 <_printf_float+0x2cc>)
 8003166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003168:	f7fd fc50 	bl	8000a0c <__aeabi_dcmpun>
 800316c:	bb70      	cbnz	r0, 80031cc <_printf_float+0xc0>
 800316e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003172:	4640      	mov	r0, r8
 8003174:	4b98      	ldr	r3, [pc, #608]	; (80033d8 <_printf_float+0x2cc>)
 8003176:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003178:	f7fd fc2a 	bl	80009d0 <__aeabi_dcmple>
 800317c:	bb30      	cbnz	r0, 80031cc <_printf_float+0xc0>
 800317e:	2200      	movs	r2, #0
 8003180:	2300      	movs	r3, #0
 8003182:	4640      	mov	r0, r8
 8003184:	4651      	mov	r1, sl
 8003186:	f7fd fc19 	bl	80009bc <__aeabi_dcmplt>
 800318a:	b110      	cbz	r0, 8003192 <_printf_float+0x86>
 800318c:	232d      	movs	r3, #45	; 0x2d
 800318e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003192:	4b92      	ldr	r3, [pc, #584]	; (80033dc <_printf_float+0x2d0>)
 8003194:	4892      	ldr	r0, [pc, #584]	; (80033e0 <_printf_float+0x2d4>)
 8003196:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800319a:	bf94      	ite	ls
 800319c:	4698      	movls	r8, r3
 800319e:	4680      	movhi	r8, r0
 80031a0:	2303      	movs	r3, #3
 80031a2:	f04f 0a00 	mov.w	sl, #0
 80031a6:	6123      	str	r3, [r4, #16]
 80031a8:	f02b 0304 	bic.w	r3, fp, #4
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	4633      	mov	r3, r6
 80031b0:	4621      	mov	r1, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	9700      	str	r7, [sp, #0]
 80031b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80031b8:	f000 f9d4 	bl	8003564 <_printf_common>
 80031bc:	3001      	adds	r0, #1
 80031be:	f040 8090 	bne.w	80032e2 <_printf_float+0x1d6>
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c6:	b011      	add	sp, #68	; 0x44
 80031c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031cc:	4642      	mov	r2, r8
 80031ce:	4653      	mov	r3, sl
 80031d0:	4640      	mov	r0, r8
 80031d2:	4651      	mov	r1, sl
 80031d4:	f7fd fc1a 	bl	8000a0c <__aeabi_dcmpun>
 80031d8:	b148      	cbz	r0, 80031ee <_printf_float+0xe2>
 80031da:	f1ba 0f00 	cmp.w	sl, #0
 80031de:	bfb8      	it	lt
 80031e0:	232d      	movlt	r3, #45	; 0x2d
 80031e2:	4880      	ldr	r0, [pc, #512]	; (80033e4 <_printf_float+0x2d8>)
 80031e4:	bfb8      	it	lt
 80031e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <_printf_float+0x2dc>)
 80031ec:	e7d3      	b.n	8003196 <_printf_float+0x8a>
 80031ee:	6863      	ldr	r3, [r4, #4]
 80031f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	d142      	bne.n	800327e <_printf_float+0x172>
 80031f8:	2306      	movs	r3, #6
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	9206      	str	r2, [sp, #24]
 8003200:	aa0e      	add	r2, sp, #56	; 0x38
 8003202:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003206:	aa0d      	add	r2, sp, #52	; 0x34
 8003208:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800320c:	9203      	str	r2, [sp, #12]
 800320e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003212:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	6863      	ldr	r3, [r4, #4]
 800321a:	4642      	mov	r2, r8
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4628      	mov	r0, r5
 8003220:	4653      	mov	r3, sl
 8003222:	910b      	str	r1, [sp, #44]	; 0x2c
 8003224:	f7ff fed4 	bl	8002fd0 <__cvt>
 8003228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800322a:	4680      	mov	r8, r0
 800322c:	2947      	cmp	r1, #71	; 0x47
 800322e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003230:	d108      	bne.n	8003244 <_printf_float+0x138>
 8003232:	1cc8      	adds	r0, r1, #3
 8003234:	db02      	blt.n	800323c <_printf_float+0x130>
 8003236:	6863      	ldr	r3, [r4, #4]
 8003238:	4299      	cmp	r1, r3
 800323a:	dd40      	ble.n	80032be <_printf_float+0x1b2>
 800323c:	f1a9 0902 	sub.w	r9, r9, #2
 8003240:	fa5f f989 	uxtb.w	r9, r9
 8003244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003248:	d81f      	bhi.n	800328a <_printf_float+0x17e>
 800324a:	464a      	mov	r2, r9
 800324c:	3901      	subs	r1, #1
 800324e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003252:	910d      	str	r1, [sp, #52]	; 0x34
 8003254:	f7ff ff1b 	bl	800308e <__exponent>
 8003258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800325a:	4682      	mov	sl, r0
 800325c:	1813      	adds	r3, r2, r0
 800325e:	2a01      	cmp	r2, #1
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	dc02      	bgt.n	800326a <_printf_float+0x15e>
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	07d2      	lsls	r2, r2, #31
 8003268:	d501      	bpl.n	800326e <_printf_float+0x162>
 800326a:	3301      	adds	r3, #1
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003272:	2b00      	cmp	r3, #0
 8003274:	d09b      	beq.n	80031ae <_printf_float+0xa2>
 8003276:	232d      	movs	r3, #45	; 0x2d
 8003278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800327c:	e797      	b.n	80031ae <_printf_float+0xa2>
 800327e:	2947      	cmp	r1, #71	; 0x47
 8003280:	d1bc      	bne.n	80031fc <_printf_float+0xf0>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ba      	bne.n	80031fc <_printf_float+0xf0>
 8003286:	2301      	movs	r3, #1
 8003288:	e7b7      	b.n	80031fa <_printf_float+0xee>
 800328a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800328e:	d118      	bne.n	80032c2 <_printf_float+0x1b6>
 8003290:	2900      	cmp	r1, #0
 8003292:	6863      	ldr	r3, [r4, #4]
 8003294:	dd0b      	ble.n	80032ae <_printf_float+0x1a2>
 8003296:	6121      	str	r1, [r4, #16]
 8003298:	b913      	cbnz	r3, 80032a0 <_printf_float+0x194>
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	07d0      	lsls	r0, r2, #31
 800329e:	d502      	bpl.n	80032a6 <_printf_float+0x19a>
 80032a0:	3301      	adds	r3, #1
 80032a2:	440b      	add	r3, r1
 80032a4:	6123      	str	r3, [r4, #16]
 80032a6:	f04f 0a00 	mov.w	sl, #0
 80032aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80032ac:	e7df      	b.n	800326e <_printf_float+0x162>
 80032ae:	b913      	cbnz	r3, 80032b6 <_printf_float+0x1aa>
 80032b0:	6822      	ldr	r2, [r4, #0]
 80032b2:	07d2      	lsls	r2, r2, #31
 80032b4:	d501      	bpl.n	80032ba <_printf_float+0x1ae>
 80032b6:	3302      	adds	r3, #2
 80032b8:	e7f4      	b.n	80032a4 <_printf_float+0x198>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e7f2      	b.n	80032a4 <_printf_float+0x198>
 80032be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032c4:	4299      	cmp	r1, r3
 80032c6:	db05      	blt.n	80032d4 <_printf_float+0x1c8>
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	6121      	str	r1, [r4, #16]
 80032cc:	07d8      	lsls	r0, r3, #31
 80032ce:	d5ea      	bpl.n	80032a6 <_printf_float+0x19a>
 80032d0:	1c4b      	adds	r3, r1, #1
 80032d2:	e7e7      	b.n	80032a4 <_printf_float+0x198>
 80032d4:	2900      	cmp	r1, #0
 80032d6:	bfcc      	ite	gt
 80032d8:	2201      	movgt	r2, #1
 80032da:	f1c1 0202 	rsble	r2, r1, #2
 80032de:	4413      	add	r3, r2
 80032e0:	e7e0      	b.n	80032a4 <_printf_float+0x198>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	055a      	lsls	r2, r3, #21
 80032e6:	d407      	bmi.n	80032f8 <_printf_float+0x1ec>
 80032e8:	6923      	ldr	r3, [r4, #16]
 80032ea:	4642      	mov	r2, r8
 80032ec:	4631      	mov	r1, r6
 80032ee:	4628      	mov	r0, r5
 80032f0:	47b8      	blx	r7
 80032f2:	3001      	adds	r0, #1
 80032f4:	d12b      	bne.n	800334e <_printf_float+0x242>
 80032f6:	e764      	b.n	80031c2 <_printf_float+0xb6>
 80032f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032fc:	f240 80dd 	bls.w	80034ba <_printf_float+0x3ae>
 8003300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003304:	2200      	movs	r2, #0
 8003306:	2300      	movs	r3, #0
 8003308:	f7fd fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800330c:	2800      	cmp	r0, #0
 800330e:	d033      	beq.n	8003378 <_printf_float+0x26c>
 8003310:	2301      	movs	r3, #1
 8003312:	4631      	mov	r1, r6
 8003314:	4628      	mov	r0, r5
 8003316:	4a35      	ldr	r2, [pc, #212]	; (80033ec <_printf_float+0x2e0>)
 8003318:	47b8      	blx	r7
 800331a:	3001      	adds	r0, #1
 800331c:	f43f af51 	beq.w	80031c2 <_printf_float+0xb6>
 8003320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003324:	429a      	cmp	r2, r3
 8003326:	db02      	blt.n	800332e <_printf_float+0x222>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	07d8      	lsls	r0, r3, #31
 800332c:	d50f      	bpl.n	800334e <_printf_float+0x242>
 800332e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	47b8      	blx	r7
 8003338:	3001      	adds	r0, #1
 800333a:	f43f af42 	beq.w	80031c2 <_printf_float+0xb6>
 800333e:	f04f 0800 	mov.w	r8, #0
 8003342:	f104 091a 	add.w	r9, r4, #26
 8003346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003348:	3b01      	subs	r3, #1
 800334a:	4543      	cmp	r3, r8
 800334c:	dc09      	bgt.n	8003362 <_printf_float+0x256>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	079b      	lsls	r3, r3, #30
 8003352:	f100 8102 	bmi.w	800355a <_printf_float+0x44e>
 8003356:	68e0      	ldr	r0, [r4, #12]
 8003358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800335a:	4298      	cmp	r0, r3
 800335c:	bfb8      	it	lt
 800335e:	4618      	movlt	r0, r3
 8003360:	e731      	b.n	80031c6 <_printf_float+0xba>
 8003362:	2301      	movs	r3, #1
 8003364:	464a      	mov	r2, r9
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	f43f af28 	beq.w	80031c2 <_printf_float+0xb6>
 8003372:	f108 0801 	add.w	r8, r8, #1
 8003376:	e7e6      	b.n	8003346 <_printf_float+0x23a>
 8003378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800337a:	2b00      	cmp	r3, #0
 800337c:	dc38      	bgt.n	80033f0 <_printf_float+0x2e4>
 800337e:	2301      	movs	r3, #1
 8003380:	4631      	mov	r1, r6
 8003382:	4628      	mov	r0, r5
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <_printf_float+0x2e0>)
 8003386:	47b8      	blx	r7
 8003388:	3001      	adds	r0, #1
 800338a:	f43f af1a 	beq.w	80031c2 <_printf_float+0xb6>
 800338e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003392:	4313      	orrs	r3, r2
 8003394:	d102      	bne.n	800339c <_printf_float+0x290>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	07d9      	lsls	r1, r3, #31
 800339a:	d5d8      	bpl.n	800334e <_printf_float+0x242>
 800339c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033a0:	4631      	mov	r1, r6
 80033a2:	4628      	mov	r0, r5
 80033a4:	47b8      	blx	r7
 80033a6:	3001      	adds	r0, #1
 80033a8:	f43f af0b 	beq.w	80031c2 <_printf_float+0xb6>
 80033ac:	f04f 0900 	mov.w	r9, #0
 80033b0:	f104 0a1a 	add.w	sl, r4, #26
 80033b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033b6:	425b      	negs	r3, r3
 80033b8:	454b      	cmp	r3, r9
 80033ba:	dc01      	bgt.n	80033c0 <_printf_float+0x2b4>
 80033bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033be:	e794      	b.n	80032ea <_printf_float+0x1de>
 80033c0:	2301      	movs	r3, #1
 80033c2:	4652      	mov	r2, sl
 80033c4:	4631      	mov	r1, r6
 80033c6:	4628      	mov	r0, r5
 80033c8:	47b8      	blx	r7
 80033ca:	3001      	adds	r0, #1
 80033cc:	f43f aef9 	beq.w	80031c2 <_printf_float+0xb6>
 80033d0:	f109 0901 	add.w	r9, r9, #1
 80033d4:	e7ee      	b.n	80033b4 <_printf_float+0x2a8>
 80033d6:	bf00      	nop
 80033d8:	7fefffff 	.word	0x7fefffff
 80033dc:	08005d78 	.word	0x08005d78
 80033e0:	08005d7c 	.word	0x08005d7c
 80033e4:	08005d84 	.word	0x08005d84
 80033e8:	08005d80 	.word	0x08005d80
 80033ec:	08005d88 	.word	0x08005d88
 80033f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bfa8      	it	ge
 80033f8:	461a      	movge	r2, r3
 80033fa:	2a00      	cmp	r2, #0
 80033fc:	4691      	mov	r9, r2
 80033fe:	dc37      	bgt.n	8003470 <_printf_float+0x364>
 8003400:	f04f 0b00 	mov.w	fp, #0
 8003404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003408:	f104 021a 	add.w	r2, r4, #26
 800340c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003410:	ebaa 0309 	sub.w	r3, sl, r9
 8003414:	455b      	cmp	r3, fp
 8003416:	dc33      	bgt.n	8003480 <_printf_float+0x374>
 8003418:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800341c:	429a      	cmp	r2, r3
 800341e:	db3b      	blt.n	8003498 <_printf_float+0x38c>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	07da      	lsls	r2, r3, #31
 8003424:	d438      	bmi.n	8003498 <_printf_float+0x38c>
 8003426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003428:	990d      	ldr	r1, [sp, #52]	; 0x34
 800342a:	eba2 030a 	sub.w	r3, r2, sl
 800342e:	eba2 0901 	sub.w	r9, r2, r1
 8003432:	4599      	cmp	r9, r3
 8003434:	bfa8      	it	ge
 8003436:	4699      	movge	r9, r3
 8003438:	f1b9 0f00 	cmp.w	r9, #0
 800343c:	dc34      	bgt.n	80034a8 <_printf_float+0x39c>
 800343e:	f04f 0800 	mov.w	r8, #0
 8003442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003446:	f104 0a1a 	add.w	sl, r4, #26
 800344a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	eba3 0309 	sub.w	r3, r3, r9
 8003454:	4543      	cmp	r3, r8
 8003456:	f77f af7a 	ble.w	800334e <_printf_float+0x242>
 800345a:	2301      	movs	r3, #1
 800345c:	4652      	mov	r2, sl
 800345e:	4631      	mov	r1, r6
 8003460:	4628      	mov	r0, r5
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	f43f aeac 	beq.w	80031c2 <_printf_float+0xb6>
 800346a:	f108 0801 	add.w	r8, r8, #1
 800346e:	e7ec      	b.n	800344a <_printf_float+0x33e>
 8003470:	4613      	mov	r3, r2
 8003472:	4631      	mov	r1, r6
 8003474:	4642      	mov	r2, r8
 8003476:	4628      	mov	r0, r5
 8003478:	47b8      	blx	r7
 800347a:	3001      	adds	r0, #1
 800347c:	d1c0      	bne.n	8003400 <_printf_float+0x2f4>
 800347e:	e6a0      	b.n	80031c2 <_printf_float+0xb6>
 8003480:	2301      	movs	r3, #1
 8003482:	4631      	mov	r1, r6
 8003484:	4628      	mov	r0, r5
 8003486:	920b      	str	r2, [sp, #44]	; 0x2c
 8003488:	47b8      	blx	r7
 800348a:	3001      	adds	r0, #1
 800348c:	f43f ae99 	beq.w	80031c2 <_printf_float+0xb6>
 8003490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003492:	f10b 0b01 	add.w	fp, fp, #1
 8003496:	e7b9      	b.n	800340c <_printf_float+0x300>
 8003498:	4631      	mov	r1, r6
 800349a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800349e:	4628      	mov	r0, r5
 80034a0:	47b8      	blx	r7
 80034a2:	3001      	adds	r0, #1
 80034a4:	d1bf      	bne.n	8003426 <_printf_float+0x31a>
 80034a6:	e68c      	b.n	80031c2 <_printf_float+0xb6>
 80034a8:	464b      	mov	r3, r9
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	eb08 020a 	add.w	r2, r8, sl
 80034b2:	47b8      	blx	r7
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1c2      	bne.n	800343e <_printf_float+0x332>
 80034b8:	e683      	b.n	80031c2 <_printf_float+0xb6>
 80034ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034bc:	2a01      	cmp	r2, #1
 80034be:	dc01      	bgt.n	80034c4 <_printf_float+0x3b8>
 80034c0:	07db      	lsls	r3, r3, #31
 80034c2:	d537      	bpl.n	8003534 <_printf_float+0x428>
 80034c4:	2301      	movs	r3, #1
 80034c6:	4642      	mov	r2, r8
 80034c8:	4631      	mov	r1, r6
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b8      	blx	r7
 80034ce:	3001      	adds	r0, #1
 80034d0:	f43f ae77 	beq.w	80031c2 <_printf_float+0xb6>
 80034d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d8:	4631      	mov	r1, r6
 80034da:	4628      	mov	r0, r5
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f ae6f 	beq.w	80031c2 <_printf_float+0xb6>
 80034e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034e8:	2200      	movs	r2, #0
 80034ea:	2300      	movs	r3, #0
 80034ec:	f7fd fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80034f0:	b9d8      	cbnz	r0, 800352a <_printf_float+0x41e>
 80034f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f4:	f108 0201 	add.w	r2, r8, #1
 80034f8:	3b01      	subs	r3, #1
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	d10e      	bne.n	8003522 <_printf_float+0x416>
 8003504:	e65d      	b.n	80031c2 <_printf_float+0xb6>
 8003506:	2301      	movs	r3, #1
 8003508:	464a      	mov	r2, r9
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	f43f ae56 	beq.w	80031c2 <_printf_float+0xb6>
 8003516:	f108 0801 	add.w	r8, r8, #1
 800351a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800351c:	3b01      	subs	r3, #1
 800351e:	4543      	cmp	r3, r8
 8003520:	dcf1      	bgt.n	8003506 <_printf_float+0x3fa>
 8003522:	4653      	mov	r3, sl
 8003524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003528:	e6e0      	b.n	80032ec <_printf_float+0x1e0>
 800352a:	f04f 0800 	mov.w	r8, #0
 800352e:	f104 091a 	add.w	r9, r4, #26
 8003532:	e7f2      	b.n	800351a <_printf_float+0x40e>
 8003534:	2301      	movs	r3, #1
 8003536:	4642      	mov	r2, r8
 8003538:	e7df      	b.n	80034fa <_printf_float+0x3ee>
 800353a:	2301      	movs	r3, #1
 800353c:	464a      	mov	r2, r9
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f ae3c 	beq.w	80031c2 <_printf_float+0xb6>
 800354a:	f108 0801 	add.w	r8, r8, #1
 800354e:	68e3      	ldr	r3, [r4, #12]
 8003550:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003552:	1a5b      	subs	r3, r3, r1
 8003554:	4543      	cmp	r3, r8
 8003556:	dcf0      	bgt.n	800353a <_printf_float+0x42e>
 8003558:	e6fd      	b.n	8003356 <_printf_float+0x24a>
 800355a:	f04f 0800 	mov.w	r8, #0
 800355e:	f104 0919 	add.w	r9, r4, #25
 8003562:	e7f4      	b.n	800354e <_printf_float+0x442>

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4616      	mov	r6, r2
 800356a:	4699      	mov	r9, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	4607      	mov	r7, r0
 8003572:	4293      	cmp	r3, r2
 8003574:	bfb8      	it	lt
 8003576:	4613      	movlt	r3, r2
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800357e:	460c      	mov	r4, r1
 8003580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003584:	b10a      	cbz	r2, 800358a <_printf_common+0x26>
 8003586:	3301      	adds	r3, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	0699      	lsls	r1, r3, #26
 800358e:	bf42      	ittt	mi
 8003590:	6833      	ldrmi	r3, [r6, #0]
 8003592:	3302      	addmi	r3, #2
 8003594:	6033      	strmi	r3, [r6, #0]
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	f015 0506 	ands.w	r5, r5, #6
 800359c:	d106      	bne.n	80035ac <_printf_common+0x48>
 800359e:	f104 0a19 	add.w	sl, r4, #25
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dc28      	bgt.n	80035fe <_printf_common+0x9a>
 80035ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b0:	1e13      	subs	r3, r2, #0
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	0692      	lsls	r2, r2, #26
 80035ba:	d42d      	bmi.n	8003618 <_printf_common+0xb4>
 80035bc:	4649      	mov	r1, r9
 80035be:	4638      	mov	r0, r7
 80035c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d020      	beq.n	800360c <_printf_common+0xa8>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	68e5      	ldr	r5, [r4, #12]
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf18      	it	ne
 80035d6:	2500      	movne	r5, #0
 80035d8:	6832      	ldr	r2, [r6, #0]
 80035da:	f04f 0600 	mov.w	r6, #0
 80035de:	68a3      	ldr	r3, [r4, #8]
 80035e0:	bf08      	it	eq
 80035e2:	1aad      	subeq	r5, r5, r2
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	bf08      	it	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfc4      	itt	gt
 80035f0:	1a9b      	subgt	r3, r3, r2
 80035f2:	18ed      	addgt	r5, r5, r3
 80035f4:	341a      	adds	r4, #26
 80035f6:	42b5      	cmp	r5, r6
 80035f8:	d11a      	bne.n	8003630 <_printf_common+0xcc>
 80035fa:	2000      	movs	r0, #0
 80035fc:	e008      	b.n	8003610 <_printf_common+0xac>
 80035fe:	2301      	movs	r3, #1
 8003600:	4652      	mov	r2, sl
 8003602:	4649      	mov	r1, r9
 8003604:	4638      	mov	r0, r7
 8003606:	47c0      	blx	r8
 8003608:	3001      	adds	r0, #1
 800360a:	d103      	bne.n	8003614 <_printf_common+0xb0>
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003614:	3501      	adds	r5, #1
 8003616:	e7c4      	b.n	80035a2 <_printf_common+0x3e>
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	18e1      	adds	r1, r4, r3
 800361c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003626:	4422      	add	r2, r4
 8003628:	3302      	adds	r3, #2
 800362a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800362e:	e7c5      	b.n	80035bc <_printf_common+0x58>
 8003630:	2301      	movs	r3, #1
 8003632:	4622      	mov	r2, r4
 8003634:	4649      	mov	r1, r9
 8003636:	4638      	mov	r0, r7
 8003638:	47c0      	blx	r8
 800363a:	3001      	adds	r0, #1
 800363c:	d0e6      	beq.n	800360c <_printf_common+0xa8>
 800363e:	3601      	adds	r6, #1
 8003640:	e7d9      	b.n	80035f6 <_printf_common+0x92>
	...

08003644 <_printf_i>:
 8003644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	460c      	mov	r4, r1
 800364a:	7e27      	ldrb	r7, [r4, #24]
 800364c:	4691      	mov	r9, r2
 800364e:	2f78      	cmp	r7, #120	; 0x78
 8003650:	4680      	mov	r8, r0
 8003652:	469a      	mov	sl, r3
 8003654:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800365a:	d807      	bhi.n	800366c <_printf_i+0x28>
 800365c:	2f62      	cmp	r7, #98	; 0x62
 800365e:	d80a      	bhi.n	8003676 <_printf_i+0x32>
 8003660:	2f00      	cmp	r7, #0
 8003662:	f000 80d9 	beq.w	8003818 <_printf_i+0x1d4>
 8003666:	2f58      	cmp	r7, #88	; 0x58
 8003668:	f000 80a4 	beq.w	80037b4 <_printf_i+0x170>
 800366c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003674:	e03a      	b.n	80036ec <_printf_i+0xa8>
 8003676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800367a:	2b15      	cmp	r3, #21
 800367c:	d8f6      	bhi.n	800366c <_printf_i+0x28>
 800367e:	a001      	add	r0, pc, #4	; (adr r0, 8003684 <_printf_i+0x40>)
 8003680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036f1 	.word	0x080036f1
 800368c:	0800366d 	.word	0x0800366d
 8003690:	0800366d 	.word	0x0800366d
 8003694:	0800366d 	.word	0x0800366d
 8003698:	0800366d 	.word	0x0800366d
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	0800366d 	.word	0x0800366d
 80036a4:	0800366d 	.word	0x0800366d
 80036a8:	0800366d 	.word	0x0800366d
 80036ac:	0800366d 	.word	0x0800366d
 80036b0:	080037ff 	.word	0x080037ff
 80036b4:	08003721 	.word	0x08003721
 80036b8:	080037e1 	.word	0x080037e1
 80036bc:	0800366d 	.word	0x0800366d
 80036c0:	0800366d 	.word	0x0800366d
 80036c4:	08003821 	.word	0x08003821
 80036c8:	0800366d 	.word	0x0800366d
 80036cc:	08003721 	.word	0x08003721
 80036d0:	0800366d 	.word	0x0800366d
 80036d4:	0800366d 	.word	0x0800366d
 80036d8:	080037e9 	.word	0x080037e9
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	600a      	str	r2, [r1, #0]
 80036e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0a4      	b.n	800383a <_printf_i+0x1f6>
 80036f0:	6825      	ldr	r5, [r4, #0]
 80036f2:	6808      	ldr	r0, [r1, #0]
 80036f4:	062e      	lsls	r6, r5, #24
 80036f6:	f100 0304 	add.w	r3, r0, #4
 80036fa:	d50a      	bpl.n	8003712 <_printf_i+0xce>
 80036fc:	6805      	ldr	r5, [r0, #0]
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	2d00      	cmp	r5, #0
 8003702:	da03      	bge.n	800370c <_printf_i+0xc8>
 8003704:	232d      	movs	r3, #45	; 0x2d
 8003706:	426d      	negs	r5, r5
 8003708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370c:	230a      	movs	r3, #10
 800370e:	485e      	ldr	r0, [pc, #376]	; (8003888 <_printf_i+0x244>)
 8003710:	e019      	b.n	8003746 <_printf_i+0x102>
 8003712:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003716:	6805      	ldr	r5, [r0, #0]
 8003718:	600b      	str	r3, [r1, #0]
 800371a:	bf18      	it	ne
 800371c:	b22d      	sxthne	r5, r5
 800371e:	e7ef      	b.n	8003700 <_printf_i+0xbc>
 8003720:	680b      	ldr	r3, [r1, #0]
 8003722:	6825      	ldr	r5, [r4, #0]
 8003724:	1d18      	adds	r0, r3, #4
 8003726:	6008      	str	r0, [r1, #0]
 8003728:	0628      	lsls	r0, r5, #24
 800372a:	d501      	bpl.n	8003730 <_printf_i+0xec>
 800372c:	681d      	ldr	r5, [r3, #0]
 800372e:	e002      	b.n	8003736 <_printf_i+0xf2>
 8003730:	0669      	lsls	r1, r5, #25
 8003732:	d5fb      	bpl.n	800372c <_printf_i+0xe8>
 8003734:	881d      	ldrh	r5, [r3, #0]
 8003736:	2f6f      	cmp	r7, #111	; 0x6f
 8003738:	bf0c      	ite	eq
 800373a:	2308      	moveq	r3, #8
 800373c:	230a      	movne	r3, #10
 800373e:	4852      	ldr	r0, [pc, #328]	; (8003888 <_printf_i+0x244>)
 8003740:	2100      	movs	r1, #0
 8003742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003746:	6866      	ldr	r6, [r4, #4]
 8003748:	2e00      	cmp	r6, #0
 800374a:	bfa8      	it	ge
 800374c:	6821      	ldrge	r1, [r4, #0]
 800374e:	60a6      	str	r6, [r4, #8]
 8003750:	bfa4      	itt	ge
 8003752:	f021 0104 	bicge.w	r1, r1, #4
 8003756:	6021      	strge	r1, [r4, #0]
 8003758:	b90d      	cbnz	r5, 800375e <_printf_i+0x11a>
 800375a:	2e00      	cmp	r6, #0
 800375c:	d04d      	beq.n	80037fa <_printf_i+0x1b6>
 800375e:	4616      	mov	r6, r2
 8003760:	fbb5 f1f3 	udiv	r1, r5, r3
 8003764:	fb03 5711 	mls	r7, r3, r1, r5
 8003768:	5dc7      	ldrb	r7, [r0, r7]
 800376a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800376e:	462f      	mov	r7, r5
 8003770:	42bb      	cmp	r3, r7
 8003772:	460d      	mov	r5, r1
 8003774:	d9f4      	bls.n	8003760 <_printf_i+0x11c>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d10b      	bne.n	8003792 <_printf_i+0x14e>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	07df      	lsls	r7, r3, #31
 800377e:	d508      	bpl.n	8003792 <_printf_i+0x14e>
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	6861      	ldr	r1, [r4, #4]
 8003784:	4299      	cmp	r1, r3
 8003786:	bfde      	ittt	le
 8003788:	2330      	movle	r3, #48	; 0x30
 800378a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800378e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003792:	1b92      	subs	r2, r2, r6
 8003794:	6122      	str	r2, [r4, #16]
 8003796:	464b      	mov	r3, r9
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f8cd a000 	str.w	sl, [sp]
 80037a0:	aa03      	add	r2, sp, #12
 80037a2:	f7ff fedf 	bl	8003564 <_printf_common>
 80037a6:	3001      	adds	r0, #1
 80037a8:	d14c      	bne.n	8003844 <_printf_i+0x200>
 80037aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037ae:	b004      	add	sp, #16
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	4834      	ldr	r0, [pc, #208]	; (8003888 <_printf_i+0x244>)
 80037b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037ba:	680e      	ldr	r6, [r1, #0]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f856 5b04 	ldr.w	r5, [r6], #4
 80037c2:	061f      	lsls	r7, r3, #24
 80037c4:	600e      	str	r6, [r1, #0]
 80037c6:	d514      	bpl.n	80037f2 <_printf_i+0x1ae>
 80037c8:	07d9      	lsls	r1, r3, #31
 80037ca:	bf44      	itt	mi
 80037cc:	f043 0320 	orrmi.w	r3, r3, #32
 80037d0:	6023      	strmi	r3, [r4, #0]
 80037d2:	b91d      	cbnz	r5, 80037dc <_printf_i+0x198>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	2310      	movs	r3, #16
 80037de:	e7af      	b.n	8003740 <_printf_i+0xfc>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f043 0320 	orr.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2378      	movs	r3, #120	; 0x78
 80037ea:	4828      	ldr	r0, [pc, #160]	; (800388c <_printf_i+0x248>)
 80037ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037f0:	e7e3      	b.n	80037ba <_printf_i+0x176>
 80037f2:	065e      	lsls	r6, r3, #25
 80037f4:	bf48      	it	mi
 80037f6:	b2ad      	uxthmi	r5, r5
 80037f8:	e7e6      	b.n	80037c8 <_printf_i+0x184>
 80037fa:	4616      	mov	r6, r2
 80037fc:	e7bb      	b.n	8003776 <_printf_i+0x132>
 80037fe:	680b      	ldr	r3, [r1, #0]
 8003800:	6826      	ldr	r6, [r4, #0]
 8003802:	1d1d      	adds	r5, r3, #4
 8003804:	6960      	ldr	r0, [r4, #20]
 8003806:	600d      	str	r5, [r1, #0]
 8003808:	0635      	lsls	r5, r6, #24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	d501      	bpl.n	8003812 <_printf_i+0x1ce>
 800380e:	6018      	str	r0, [r3, #0]
 8003810:	e002      	b.n	8003818 <_printf_i+0x1d4>
 8003812:	0671      	lsls	r1, r6, #25
 8003814:	d5fb      	bpl.n	800380e <_printf_i+0x1ca>
 8003816:	8018      	strh	r0, [r3, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	4616      	mov	r6, r2
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	e7ba      	b.n	8003796 <_printf_i+0x152>
 8003820:	680b      	ldr	r3, [r1, #0]
 8003822:	1d1a      	adds	r2, r3, #4
 8003824:	600a      	str	r2, [r1, #0]
 8003826:	681e      	ldr	r6, [r3, #0]
 8003828:	2100      	movs	r1, #0
 800382a:	4630      	mov	r0, r6
 800382c:	6862      	ldr	r2, [r4, #4]
 800382e:	f000 fed9 	bl	80045e4 <memchr>
 8003832:	b108      	cbz	r0, 8003838 <_printf_i+0x1f4>
 8003834:	1b80      	subs	r0, r0, r6
 8003836:	6060      	str	r0, [r4, #4]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2300      	movs	r3, #0
 800383e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003842:	e7a8      	b.n	8003796 <_printf_i+0x152>
 8003844:	4632      	mov	r2, r6
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	47d0      	blx	sl
 800384e:	3001      	adds	r0, #1
 8003850:	d0ab      	beq.n	80037aa <_printf_i+0x166>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	079b      	lsls	r3, r3, #30
 8003856:	d413      	bmi.n	8003880 <_printf_i+0x23c>
 8003858:	68e0      	ldr	r0, [r4, #12]
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	4298      	cmp	r0, r3
 800385e:	bfb8      	it	lt
 8003860:	4618      	movlt	r0, r3
 8003862:	e7a4      	b.n	80037ae <_printf_i+0x16a>
 8003864:	2301      	movs	r3, #1
 8003866:	4632      	mov	r2, r6
 8003868:	4649      	mov	r1, r9
 800386a:	4640      	mov	r0, r8
 800386c:	47d0      	blx	sl
 800386e:	3001      	adds	r0, #1
 8003870:	d09b      	beq.n	80037aa <_printf_i+0x166>
 8003872:	3501      	adds	r5, #1
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	9903      	ldr	r1, [sp, #12]
 8003878:	1a5b      	subs	r3, r3, r1
 800387a:	42ab      	cmp	r3, r5
 800387c:	dcf2      	bgt.n	8003864 <_printf_i+0x220>
 800387e:	e7eb      	b.n	8003858 <_printf_i+0x214>
 8003880:	2500      	movs	r5, #0
 8003882:	f104 0619 	add.w	r6, r4, #25
 8003886:	e7f5      	b.n	8003874 <_printf_i+0x230>
 8003888:	08005d8a 	.word	0x08005d8a
 800388c:	08005d9b 	.word	0x08005d9b

08003890 <siprintf>:
 8003890:	b40e      	push	{r1, r2, r3}
 8003892:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003896:	b500      	push	{lr}
 8003898:	b09c      	sub	sp, #112	; 0x70
 800389a:	ab1d      	add	r3, sp, #116	; 0x74
 800389c:	9002      	str	r0, [sp, #8]
 800389e:	9006      	str	r0, [sp, #24]
 80038a0:	9107      	str	r1, [sp, #28]
 80038a2:	9104      	str	r1, [sp, #16]
 80038a4:	4808      	ldr	r0, [pc, #32]	; (80038c8 <siprintf+0x38>)
 80038a6:	4909      	ldr	r1, [pc, #36]	; (80038cc <siprintf+0x3c>)
 80038a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ac:	9105      	str	r1, [sp, #20]
 80038ae:	6800      	ldr	r0, [r0, #0]
 80038b0:	a902      	add	r1, sp, #8
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	f001 fb44 	bl	8004f40 <_svfiprintf_r>
 80038b8:	2200      	movs	r2, #0
 80038ba:	9b02      	ldr	r3, [sp, #8]
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	b01c      	add	sp, #112	; 0x70
 80038c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c4:	b003      	add	sp, #12
 80038c6:	4770      	bx	lr
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	ffff0208 	.word	0xffff0208

080038d0 <quorem>:
 80038d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	6903      	ldr	r3, [r0, #16]
 80038d6:	690c      	ldr	r4, [r1, #16]
 80038d8:	4607      	mov	r7, r0
 80038da:	42a3      	cmp	r3, r4
 80038dc:	f2c0 8083 	blt.w	80039e6 <quorem+0x116>
 80038e0:	3c01      	subs	r4, #1
 80038e2:	f100 0514 	add.w	r5, r0, #20
 80038e6:	f101 0814 	add.w	r8, r1, #20
 80038ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038f8:	3301      	adds	r3, #1
 80038fa:	429a      	cmp	r2, r3
 80038fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8003900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003908:	d332      	bcc.n	8003970 <quorem+0xa0>
 800390a:	f04f 0e00 	mov.w	lr, #0
 800390e:	4640      	mov	r0, r8
 8003910:	46ac      	mov	ip, r5
 8003912:	46f2      	mov	sl, lr
 8003914:	f850 2b04 	ldr.w	r2, [r0], #4
 8003918:	b293      	uxth	r3, r2
 800391a:	fb06 e303 	mla	r3, r6, r3, lr
 800391e:	0c12      	lsrs	r2, r2, #16
 8003920:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003924:	fb06 e202 	mla	r2, r6, r2, lr
 8003928:	b29b      	uxth	r3, r3
 800392a:	ebaa 0303 	sub.w	r3, sl, r3
 800392e:	f8dc a000 	ldr.w	sl, [ip]
 8003932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003936:	fa1f fa8a 	uxth.w	sl, sl
 800393a:	4453      	add	r3, sl
 800393c:	fa1f fa82 	uxth.w	sl, r2
 8003940:	f8dc 2000 	ldr.w	r2, [ip]
 8003944:	4581      	cmp	r9, r0
 8003946:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800394a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800394e:	b29b      	uxth	r3, r3
 8003950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003954:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003958:	f84c 3b04 	str.w	r3, [ip], #4
 800395c:	d2da      	bcs.n	8003914 <quorem+0x44>
 800395e:	f855 300b 	ldr.w	r3, [r5, fp]
 8003962:	b92b      	cbnz	r3, 8003970 <quorem+0xa0>
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	3b04      	subs	r3, #4
 8003968:	429d      	cmp	r5, r3
 800396a:	461a      	mov	r2, r3
 800396c:	d32f      	bcc.n	80039ce <quorem+0xfe>
 800396e:	613c      	str	r4, [r7, #16]
 8003970:	4638      	mov	r0, r7
 8003972:	f001 f8cd 	bl	8004b10 <__mcmp>
 8003976:	2800      	cmp	r0, #0
 8003978:	db25      	blt.n	80039c6 <quorem+0xf6>
 800397a:	4628      	mov	r0, r5
 800397c:	f04f 0c00 	mov.w	ip, #0
 8003980:	3601      	adds	r6, #1
 8003982:	f858 1b04 	ldr.w	r1, [r8], #4
 8003986:	f8d0 e000 	ldr.w	lr, [r0]
 800398a:	b28b      	uxth	r3, r1
 800398c:	ebac 0303 	sub.w	r3, ip, r3
 8003990:	fa1f f28e 	uxth.w	r2, lr
 8003994:	4413      	add	r3, r2
 8003996:	0c0a      	lsrs	r2, r1, #16
 8003998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800399c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039a6:	45c1      	cmp	r9, r8
 80039a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80039ac:	f840 3b04 	str.w	r3, [r0], #4
 80039b0:	d2e7      	bcs.n	8003982 <quorem+0xb2>
 80039b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ba:	b922      	cbnz	r2, 80039c6 <quorem+0xf6>
 80039bc:	3b04      	subs	r3, #4
 80039be:	429d      	cmp	r5, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	d30a      	bcc.n	80039da <quorem+0x10a>
 80039c4:	613c      	str	r4, [r7, #16]
 80039c6:	4630      	mov	r0, r6
 80039c8:	b003      	add	sp, #12
 80039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	3b04      	subs	r3, #4
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	d1cb      	bne.n	800396e <quorem+0x9e>
 80039d6:	3c01      	subs	r4, #1
 80039d8:	e7c6      	b.n	8003968 <quorem+0x98>
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	3b04      	subs	r3, #4
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d1f0      	bne.n	80039c4 <quorem+0xf4>
 80039e2:	3c01      	subs	r4, #1
 80039e4:	e7eb      	b.n	80039be <quorem+0xee>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e7ee      	b.n	80039c8 <quorem+0xf8>
 80039ea:	0000      	movs	r0, r0
 80039ec:	0000      	movs	r0, r0
	...

080039f0 <_dtoa_r>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	4616      	mov	r6, r2
 80039f6:	461f      	mov	r7, r3
 80039f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80039fa:	b099      	sub	sp, #100	; 0x64
 80039fc:	4605      	mov	r5, r0
 80039fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003a02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003a06:	b974      	cbnz	r4, 8003a26 <_dtoa_r+0x36>
 8003a08:	2010      	movs	r0, #16
 8003a0a:	f000 fde3 	bl	80045d4 <malloc>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6268      	str	r0, [r5, #36]	; 0x24
 8003a12:	b920      	cbnz	r0, 8003a1e <_dtoa_r+0x2e>
 8003a14:	21ea      	movs	r1, #234	; 0xea
 8003a16:	4bae      	ldr	r3, [pc, #696]	; (8003cd0 <_dtoa_r+0x2e0>)
 8003a18:	48ae      	ldr	r0, [pc, #696]	; (8003cd4 <_dtoa_r+0x2e4>)
 8003a1a:	f001 fba1 	bl	8005160 <__assert_func>
 8003a1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a22:	6004      	str	r4, [r0, #0]
 8003a24:	60c4      	str	r4, [r0, #12]
 8003a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	b151      	cbz	r1, 8003a42 <_dtoa_r+0x52>
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4093      	lsls	r3, r2
 8003a32:	604a      	str	r2, [r1, #4]
 8003a34:	608b      	str	r3, [r1, #8]
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fe30 	bl	800469c <_Bfree>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	1e3b      	subs	r3, r7, #0
 8003a44:	bfaf      	iteee	ge
 8003a46:	2300      	movge	r3, #0
 8003a48:	2201      	movlt	r2, #1
 8003a4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a4e:	9305      	strlt	r3, [sp, #20]
 8003a50:	bfa8      	it	ge
 8003a52:	f8c8 3000 	strge.w	r3, [r8]
 8003a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003a5a:	4b9f      	ldr	r3, [pc, #636]	; (8003cd8 <_dtoa_r+0x2e8>)
 8003a5c:	bfb8      	it	lt
 8003a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8003a62:	ea33 0309 	bics.w	r3, r3, r9
 8003a66:	d119      	bne.n	8003a9c <_dtoa_r+0xac>
 8003a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a74:	4333      	orrs	r3, r6
 8003a76:	f000 8580 	beq.w	800457a <_dtoa_r+0xb8a>
 8003a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a7c:	b953      	cbnz	r3, 8003a94 <_dtoa_r+0xa4>
 8003a7e:	4b97      	ldr	r3, [pc, #604]	; (8003cdc <_dtoa_r+0x2ec>)
 8003a80:	e022      	b.n	8003ac8 <_dtoa_r+0xd8>
 8003a82:	4b97      	ldr	r3, [pc, #604]	; (8003ce0 <_dtoa_r+0x2f0>)
 8003a84:	9308      	str	r3, [sp, #32]
 8003a86:	3308      	adds	r3, #8
 8003a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	9808      	ldr	r0, [sp, #32]
 8003a8e:	b019      	add	sp, #100	; 0x64
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a94:	4b91      	ldr	r3, [pc, #580]	; (8003cdc <_dtoa_r+0x2ec>)
 8003a96:	9308      	str	r3, [sp, #32]
 8003a98:	3303      	adds	r3, #3
 8003a9a:	e7f5      	b.n	8003a88 <_dtoa_r+0x98>
 8003a9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003aa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f7fc ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	b158      	cbz	r0, 8003acc <_dtoa_r+0xdc>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8559 	beq.w	8004574 <_dtoa_r+0xb84>
 8003ac2:	4888      	ldr	r0, [pc, #544]	; (8003ce4 <_dtoa_r+0x2f4>)
 8003ac4:	6018      	str	r0, [r3, #0]
 8003ac6:	1e43      	subs	r3, r0, #1
 8003ac8:	9308      	str	r3, [sp, #32]
 8003aca:	e7df      	b.n	8003a8c <_dtoa_r+0x9c>
 8003acc:	ab16      	add	r3, sp, #88	; 0x58
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	ab17      	add	r3, sp, #92	; 0x5c
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ada:	f001 f8c5 	bl	8004c68 <__d2b>
 8003ade:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d07e      	beq.n	8003be6 <_dtoa_r+0x1f6>
 8003ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003afa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003afe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003b02:	2200      	movs	r2, #0
 8003b04:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <_dtoa_r+0x2f8>)
 8003b06:	f7fc fb2f 	bl	8000168 <__aeabi_dsub>
 8003b0a:	a36b      	add	r3, pc, #428	; (adr r3, 8003cb8 <_dtoa_r+0x2c8>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fce2 	bl	80004d8 <__aeabi_dmul>
 8003b14:	a36a      	add	r3, pc, #424	; (adr r3, 8003cc0 <_dtoa_r+0x2d0>)
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f7fc fb27 	bl	800016c <__adddf3>
 8003b1e:	4606      	mov	r6, r0
 8003b20:	4620      	mov	r0, r4
 8003b22:	460f      	mov	r7, r1
 8003b24:	f7fc fc6e 	bl	8000404 <__aeabi_i2d>
 8003b28:	a367      	add	r3, pc, #412	; (adr r3, 8003cc8 <_dtoa_r+0x2d8>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fcd3 	bl	80004d8 <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4630      	mov	r0, r6
 8003b38:	4639      	mov	r1, r7
 8003b3a:	f7fc fb17 	bl	800016c <__adddf3>
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460f      	mov	r7, r1
 8003b42:	f7fc ff79 	bl	8000a38 <__aeabi_d2iz>
 8003b46:	2200      	movs	r2, #0
 8003b48:	4681      	mov	r9, r0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	4639      	mov	r1, r7
 8003b50:	f7fc ff34 	bl	80009bc <__aeabi_dcmplt>
 8003b54:	b148      	cbz	r0, 8003b6a <_dtoa_r+0x17a>
 8003b56:	4648      	mov	r0, r9
 8003b58:	f7fc fc54 	bl	8000404 <__aeabi_i2d>
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	463b      	mov	r3, r7
 8003b60:	f7fc ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8003b64:	b908      	cbnz	r0, 8003b6a <_dtoa_r+0x17a>
 8003b66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b6a:	f1b9 0f16 	cmp.w	r9, #22
 8003b6e:	d857      	bhi.n	8003c20 <_dtoa_r+0x230>
 8003b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b74:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <_dtoa_r+0x2fc>)
 8003b76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc ff1d 	bl	80009bc <__aeabi_dcmplt>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d04e      	beq.n	8003c24 <_dtoa_r+0x234>
 8003b86:	2300      	movs	r3, #0
 8003b88:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b90:	1b1c      	subs	r4, r3, r4
 8003b92:	1e63      	subs	r3, r4, #1
 8003b94:	9309      	str	r3, [sp, #36]	; 0x24
 8003b96:	bf49      	itett	mi
 8003b98:	f1c4 0301 	rsbmi	r3, r4, #1
 8003b9c:	2300      	movpl	r3, #0
 8003b9e:	9306      	strmi	r3, [sp, #24]
 8003ba0:	2300      	movmi	r3, #0
 8003ba2:	bf54      	ite	pl
 8003ba4:	9306      	strpl	r3, [sp, #24]
 8003ba6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003ba8:	f1b9 0f00 	cmp.w	r9, #0
 8003bac:	db3c      	blt.n	8003c28 <_dtoa_r+0x238>
 8003bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003bb4:	444b      	add	r3, r9
 8003bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb8:	2300      	movs	r3, #0
 8003bba:	930a      	str	r3, [sp, #40]	; 0x28
 8003bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bbe:	2b09      	cmp	r3, #9
 8003bc0:	d86c      	bhi.n	8003c9c <_dtoa_r+0x2ac>
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	bfc4      	itt	gt
 8003bc6:	3b04      	subgt	r3, #4
 8003bc8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bcc:	bfc8      	it	gt
 8003bce:	2400      	movgt	r4, #0
 8003bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8003bd4:	bfd8      	it	le
 8003bd6:	2401      	movle	r4, #1
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	f200 808b 	bhi.w	8003cf4 <_dtoa_r+0x304>
 8003bde:	e8df f003 	tbb	[pc, r3]
 8003be2:	4f2d      	.short	0x4f2d
 8003be4:	5b4d      	.short	0x5b4d
 8003be6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003bea:	441c      	add	r4, r3
 8003bec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	bfc3      	ittte	gt
 8003bf4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003bf8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003bfc:	fa09 f303 	lslgt.w	r3, r9, r3
 8003c00:	f1c3 0320 	rsble	r3, r3, #32
 8003c04:	bfc6      	itte	gt
 8003c06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003c0a:	4318      	orrgt	r0, r3
 8003c0c:	fa06 f003 	lslle.w	r0, r6, r3
 8003c10:	f7fc fbe8 	bl	80003e4 <__aeabi_ui2d>
 8003c14:	2301      	movs	r3, #1
 8003c16:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003c1a:	3c01      	subs	r4, #1
 8003c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c1e:	e770      	b.n	8003b02 <_dtoa_r+0x112>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e7b3      	b.n	8003b8c <_dtoa_r+0x19c>
 8003c24:	900f      	str	r0, [sp, #60]	; 0x3c
 8003c26:	e7b2      	b.n	8003b8e <_dtoa_r+0x19e>
 8003c28:	9b06      	ldr	r3, [sp, #24]
 8003c2a:	eba3 0309 	sub.w	r3, r3, r9
 8003c2e:	9306      	str	r3, [sp, #24]
 8003c30:	f1c9 0300 	rsb	r3, r9, #0
 8003c34:	930a      	str	r3, [sp, #40]	; 0x28
 8003c36:	2300      	movs	r3, #0
 8003c38:	930e      	str	r3, [sp, #56]	; 0x38
 8003c3a:	e7bf      	b.n	8003bbc <_dtoa_r+0x1cc>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	dc59      	bgt.n	8003cfa <_dtoa_r+0x30a>
 8003c46:	f04f 0b01 	mov.w	fp, #1
 8003c4a:	465b      	mov	r3, fp
 8003c4c:	f8cd b008 	str.w	fp, [sp, #8]
 8003c50:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003c54:	2200      	movs	r2, #0
 8003c56:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c58:	6042      	str	r2, [r0, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	f102 0614 	add.w	r6, r2, #20
 8003c60:	429e      	cmp	r6, r3
 8003c62:	6841      	ldr	r1, [r0, #4]
 8003c64:	d94f      	bls.n	8003d06 <_dtoa_r+0x316>
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 fcd8 	bl	800461c <_Balloc>
 8003c6c:	9008      	str	r0, [sp, #32]
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d14d      	bne.n	8003d0e <_dtoa_r+0x31e>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <_dtoa_r+0x300>)
 8003c7a:	e6cd      	b.n	8003a18 <_dtoa_r+0x28>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7de      	b.n	8003c3e <_dtoa_r+0x24e>
 8003c80:	2300      	movs	r3, #0
 8003c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c86:	eb09 0b03 	add.w	fp, r9, r3
 8003c8a:	f10b 0301 	add.w	r3, fp, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	9302      	str	r3, [sp, #8]
 8003c92:	bfb8      	it	lt
 8003c94:	2301      	movlt	r3, #1
 8003c96:	e7dd      	b.n	8003c54 <_dtoa_r+0x264>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e7f2      	b.n	8003c82 <_dtoa_r+0x292>
 8003c9c:	2401      	movs	r4, #1
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8003ca4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2312      	movs	r3, #18
 8003cac:	f8cd b008 	str.w	fp, [sp, #8]
 8003cb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003cb2:	e7cf      	b.n	8003c54 <_dtoa_r+0x264>
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	636f4361 	.word	0x636f4361
 8003cbc:	3fd287a7 	.word	0x3fd287a7
 8003cc0:	8b60c8b3 	.word	0x8b60c8b3
 8003cc4:	3fc68a28 	.word	0x3fc68a28
 8003cc8:	509f79fb 	.word	0x509f79fb
 8003ccc:	3fd34413 	.word	0x3fd34413
 8003cd0:	08005db9 	.word	0x08005db9
 8003cd4:	08005dd0 	.word	0x08005dd0
 8003cd8:	7ff00000 	.word	0x7ff00000
 8003cdc:	08005db5 	.word	0x08005db5
 8003ce0:	08005dac 	.word	0x08005dac
 8003ce4:	08005d89 	.word	0x08005d89
 8003ce8:	3ff80000 	.word	0x3ff80000
 8003cec:	08005ec8 	.word	0x08005ec8
 8003cf0:	08005e2f 	.word	0x08005e2f
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cf8:	e7d4      	b.n	8003ca4 <_dtoa_r+0x2b4>
 8003cfa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003cfe:	465b      	mov	r3, fp
 8003d00:	f8cd b008 	str.w	fp, [sp, #8]
 8003d04:	e7a6      	b.n	8003c54 <_dtoa_r+0x264>
 8003d06:	3101      	adds	r1, #1
 8003d08:	6041      	str	r1, [r0, #4]
 8003d0a:	0052      	lsls	r2, r2, #1
 8003d0c:	e7a6      	b.n	8003c5c <_dtoa_r+0x26c>
 8003d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d10:	9a08      	ldr	r2, [sp, #32]
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	9b02      	ldr	r3, [sp, #8]
 8003d16:	2b0e      	cmp	r3, #14
 8003d18:	f200 80a8 	bhi.w	8003e6c <_dtoa_r+0x47c>
 8003d1c:	2c00      	cmp	r4, #0
 8003d1e:	f000 80a5 	beq.w	8003e6c <_dtoa_r+0x47c>
 8003d22:	f1b9 0f00 	cmp.w	r9, #0
 8003d26:	dd34      	ble.n	8003d92 <_dtoa_r+0x3a2>
 8003d28:	4a9a      	ldr	r2, [pc, #616]	; (8003f94 <_dtoa_r+0x5a4>)
 8003d2a:	f009 030f 	and.w	r3, r9, #15
 8003d2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d32:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003d3e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003d42:	d016      	beq.n	8003d72 <_dtoa_r+0x382>
 8003d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d48:	4b93      	ldr	r3, [pc, #588]	; (8003f98 <_dtoa_r+0x5a8>)
 8003d4a:	2703      	movs	r7, #3
 8003d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d50:	f7fc fcec 	bl	800072c <__aeabi_ddiv>
 8003d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d58:	f004 040f 	and.w	r4, r4, #15
 8003d5c:	4e8e      	ldr	r6, [pc, #568]	; (8003f98 <_dtoa_r+0x5a8>)
 8003d5e:	b954      	cbnz	r4, 8003d76 <_dtoa_r+0x386>
 8003d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d68:	f7fc fce0 	bl	800072c <__aeabi_ddiv>
 8003d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d70:	e029      	b.n	8003dc6 <_dtoa_r+0x3d6>
 8003d72:	2702      	movs	r7, #2
 8003d74:	e7f2      	b.n	8003d5c <_dtoa_r+0x36c>
 8003d76:	07e1      	lsls	r1, r4, #31
 8003d78:	d508      	bpl.n	8003d8c <_dtoa_r+0x39c>
 8003d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d82:	f7fc fba9 	bl	80004d8 <__aeabi_dmul>
 8003d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d8a:	3701      	adds	r7, #1
 8003d8c:	1064      	asrs	r4, r4, #1
 8003d8e:	3608      	adds	r6, #8
 8003d90:	e7e5      	b.n	8003d5e <_dtoa_r+0x36e>
 8003d92:	f000 80a5 	beq.w	8003ee0 <_dtoa_r+0x4f0>
 8003d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d9a:	f1c9 0400 	rsb	r4, r9, #0
 8003d9e:	4b7d      	ldr	r3, [pc, #500]	; (8003f94 <_dtoa_r+0x5a4>)
 8003da0:	f004 020f 	and.w	r2, r4, #15
 8003da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fb94 	bl	80004d8 <__aeabi_dmul>
 8003db0:	2702      	movs	r7, #2
 8003db2:	2300      	movs	r3, #0
 8003db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003db8:	4e77      	ldr	r6, [pc, #476]	; (8003f98 <_dtoa_r+0x5a8>)
 8003dba:	1124      	asrs	r4, r4, #4
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	f040 8084 	bne.w	8003eca <_dtoa_r+0x4da>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1d2      	bne.n	8003d6c <_dtoa_r+0x37c>
 8003dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808b 	beq.w	8003ee4 <_dtoa_r+0x4f4>
 8003dce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <_dtoa_r+0x5ac>)
 8003dde:	f7fc fded 	bl	80009bc <__aeabi_dcmplt>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d07e      	beq.n	8003ee4 <_dtoa_r+0x4f4>
 8003de6:	9b02      	ldr	r3, [sp, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d07b      	beq.n	8003ee4 <_dtoa_r+0x4f4>
 8003dec:	f1bb 0f00 	cmp.w	fp, #0
 8003df0:	dd38      	ble.n	8003e64 <_dtoa_r+0x474>
 8003df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003df6:	2200      	movs	r2, #0
 8003df8:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <_dtoa_r+0x5b0>)
 8003dfa:	f7fc fb6d 	bl	80004d8 <__aeabi_dmul>
 8003dfe:	465c      	mov	r4, fp
 8003e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e04:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003e08:	3701      	adds	r7, #1
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7fc fafa 	bl	8000404 <__aeabi_i2d>
 8003e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e14:	f7fc fb60 	bl	80004d8 <__aeabi_dmul>
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <_dtoa_r+0x5b4>)
 8003e1c:	f7fc f9a6 	bl	800016c <__adddf3>
 8003e20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e28:	9611      	str	r6, [sp, #68]	; 0x44
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	d15d      	bne.n	8003eea <_dtoa_r+0x4fa>
 8003e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e32:	2200      	movs	r2, #0
 8003e34:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <_dtoa_r+0x5b8>)
 8003e36:	f7fc f997 	bl	8000168 <__aeabi_dsub>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e42:	4633      	mov	r3, r6
 8003e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e46:	f7fc fdd7 	bl	80009f8 <__aeabi_dcmpgt>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	f040 829e 	bne.w	800438c <_dtoa_r+0x99c>
 8003e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e5a:	f7fc fdaf 	bl	80009bc <__aeabi_dcmplt>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	f040 8292 	bne.w	8004388 <_dtoa_r+0x998>
 8003e64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f2c0 8153 	blt.w	800411a <_dtoa_r+0x72a>
 8003e74:	f1b9 0f0e 	cmp.w	r9, #14
 8003e78:	f300 814f 	bgt.w	800411a <_dtoa_r+0x72a>
 8003e7c:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <_dtoa_r+0x5a4>)
 8003e7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f280 80db 	bge.w	8004048 <_dtoa_r+0x658>
 8003e92:	9b02      	ldr	r3, [sp, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f300 80d7 	bgt.w	8004048 <_dtoa_r+0x658>
 8003e9a:	f040 8274 	bne.w	8004386 <_dtoa_r+0x996>
 8003e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <_dtoa_r+0x5b8>)
 8003ea6:	f7fc fb17 	bl	80004d8 <__aeabi_dmul>
 8003eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eae:	f7fc fd99 	bl	80009e4 <__aeabi_dcmpge>
 8003eb2:	9c02      	ldr	r4, [sp, #8]
 8003eb4:	4626      	mov	r6, r4
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	f040 824a 	bne.w	8004350 <_dtoa_r+0x960>
 8003ebc:	2331      	movs	r3, #49	; 0x31
 8003ebe:	9f08      	ldr	r7, [sp, #32]
 8003ec0:	f109 0901 	add.w	r9, r9, #1
 8003ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8003ec8:	e246      	b.n	8004358 <_dtoa_r+0x968>
 8003eca:	07e2      	lsls	r2, r4, #31
 8003ecc:	d505      	bpl.n	8003eda <_dtoa_r+0x4ea>
 8003ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ed2:	f7fc fb01 	bl	80004d8 <__aeabi_dmul>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	3701      	adds	r7, #1
 8003eda:	1064      	asrs	r4, r4, #1
 8003edc:	3608      	adds	r6, #8
 8003ede:	e76d      	b.n	8003dbc <_dtoa_r+0x3cc>
 8003ee0:	2702      	movs	r7, #2
 8003ee2:	e770      	b.n	8003dc6 <_dtoa_r+0x3d6>
 8003ee4:	46c8      	mov	r8, r9
 8003ee6:	9c02      	ldr	r4, [sp, #8]
 8003ee8:	e78f      	b.n	8003e0a <_dtoa_r+0x41a>
 8003eea:	9908      	ldr	r1, [sp, #32]
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <_dtoa_r+0x5a4>)
 8003eee:	4421      	add	r1, r4
 8003ef0:	9112      	str	r1, [sp, #72]	; 0x48
 8003ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d055      	beq.n	8003fb0 <_dtoa_r+0x5c0>
 8003f04:	2000      	movs	r0, #0
 8003f06:	4929      	ldr	r1, [pc, #164]	; (8003fac <_dtoa_r+0x5bc>)
 8003f08:	f7fc fc10 	bl	800072c <__aeabi_ddiv>
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4632      	mov	r2, r6
 8003f10:	f7fc f92a 	bl	8000168 <__aeabi_dsub>
 8003f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f18:	9f08      	ldr	r7, [sp, #32]
 8003f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f1e:	f7fc fd8b 	bl	8000a38 <__aeabi_d2iz>
 8003f22:	4604      	mov	r4, r0
 8003f24:	f7fc fa6e 	bl	8000404 <__aeabi_i2d>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f30:	f7fc f91a 	bl	8000168 <__aeabi_dsub>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	3430      	adds	r4, #48	; 0x30
 8003f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f42:	f807 4b01 	strb.w	r4, [r7], #1
 8003f46:	f7fc fd39 	bl	80009bc <__aeabi_dcmplt>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d174      	bne.n	8004038 <_dtoa_r+0x648>
 8003f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f52:	2000      	movs	r0, #0
 8003f54:	4911      	ldr	r1, [pc, #68]	; (8003f9c <_dtoa_r+0x5ac>)
 8003f56:	f7fc f907 	bl	8000168 <__aeabi_dsub>
 8003f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f5e:	f7fc fd2d 	bl	80009bc <__aeabi_dcmplt>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	f040 80b6 	bne.w	80040d4 <_dtoa_r+0x6e4>
 8003f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f6a:	429f      	cmp	r7, r3
 8003f6c:	f43f af7a 	beq.w	8003e64 <_dtoa_r+0x474>
 8003f70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f74:	2200      	movs	r2, #0
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <_dtoa_r+0x5b0>)
 8003f78:	f7fc faae 	bl	80004d8 <__aeabi_dmul>
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <_dtoa_r+0x5b0>)
 8003f88:	f7fc faa6 	bl	80004d8 <__aeabi_dmul>
 8003f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f90:	e7c3      	b.n	8003f1a <_dtoa_r+0x52a>
 8003f92:	bf00      	nop
 8003f94:	08005ec8 	.word	0x08005ec8
 8003f98:	08005ea0 	.word	0x08005ea0
 8003f9c:	3ff00000 	.word	0x3ff00000
 8003fa0:	40240000 	.word	0x40240000
 8003fa4:	401c0000 	.word	0x401c0000
 8003fa8:	40140000 	.word	0x40140000
 8003fac:	3fe00000 	.word	0x3fe00000
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	f7fc fa90 	bl	80004d8 <__aeabi_dmul>
 8003fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fbe:	9c08      	ldr	r4, [sp, #32]
 8003fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8003fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fc6:	f7fc fd37 	bl	8000a38 <__aeabi_d2iz>
 8003fca:	9015      	str	r0, [sp, #84]	; 0x54
 8003fcc:	f7fc fa1a 	bl	8000404 <__aeabi_i2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fd8:	f7fc f8c6 	bl	8000168 <__aeabi_dsub>
 8003fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fde:	4606      	mov	r6, r0
 8003fe0:	3330      	adds	r3, #48	; 0x30
 8003fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8003fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fe8:	460f      	mov	r7, r1
 8003fea:	429c      	cmp	r4, r3
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	d124      	bne.n	800403c <_dtoa_r+0x64c>
 8003ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ff6:	4bb3      	ldr	r3, [pc, #716]	; (80042c4 <_dtoa_r+0x8d4>)
 8003ff8:	f7fc f8b8 	bl	800016c <__adddf3>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4630      	mov	r0, r6
 8004002:	4639      	mov	r1, r7
 8004004:	f7fc fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8004008:	2800      	cmp	r0, #0
 800400a:	d162      	bne.n	80040d2 <_dtoa_r+0x6e2>
 800400c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004010:	2000      	movs	r0, #0
 8004012:	49ac      	ldr	r1, [pc, #688]	; (80042c4 <_dtoa_r+0x8d4>)
 8004014:	f7fc f8a8 	bl	8000168 <__aeabi_dsub>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fccc 	bl	80009bc <__aeabi_dcmplt>
 8004024:	2800      	cmp	r0, #0
 8004026:	f43f af1d 	beq.w	8003e64 <_dtoa_r+0x474>
 800402a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800402c:	1e7b      	subs	r3, r7, #1
 800402e:	9314      	str	r3, [sp, #80]	; 0x50
 8004030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d0f8      	beq.n	800402a <_dtoa_r+0x63a>
 8004038:	46c1      	mov	r9, r8
 800403a:	e03a      	b.n	80040b2 <_dtoa_r+0x6c2>
 800403c:	4ba2      	ldr	r3, [pc, #648]	; (80042c8 <_dtoa_r+0x8d8>)
 800403e:	f7fc fa4b 	bl	80004d8 <__aeabi_dmul>
 8004042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004046:	e7bc      	b.n	8003fc2 <_dtoa_r+0x5d2>
 8004048:	9f08      	ldr	r7, [sp, #32]
 800404a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800404e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004052:	f7fc fb6b 	bl	800072c <__aeabi_ddiv>
 8004056:	f7fc fcef 	bl	8000a38 <__aeabi_d2iz>
 800405a:	4604      	mov	r4, r0
 800405c:	f7fc f9d2 	bl	8000404 <__aeabi_i2d>
 8004060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004064:	f7fc fa38 	bl	80004d8 <__aeabi_dmul>
 8004068:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800406c:	460b      	mov	r3, r1
 800406e:	4602      	mov	r2, r0
 8004070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004074:	f7fc f878 	bl	8000168 <__aeabi_dsub>
 8004078:	f807 6b01 	strb.w	r6, [r7], #1
 800407c:	9e08      	ldr	r6, [sp, #32]
 800407e:	9b02      	ldr	r3, [sp, #8]
 8004080:	1bbe      	subs	r6, r7, r6
 8004082:	42b3      	cmp	r3, r6
 8004084:	d13a      	bne.n	80040fc <_dtoa_r+0x70c>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	f7fc f86f 	bl	800016c <__adddf3>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800409a:	f7fc fcad 	bl	80009f8 <__aeabi_dcmpgt>
 800409e:	bb58      	cbnz	r0, 80040f8 <_dtoa_r+0x708>
 80040a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a8:	f7fc fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80040ac:	b108      	cbz	r0, 80040b2 <_dtoa_r+0x6c2>
 80040ae:	07e1      	lsls	r1, r4, #31
 80040b0:	d422      	bmi.n	80040f8 <_dtoa_r+0x708>
 80040b2:	4628      	mov	r0, r5
 80040b4:	4651      	mov	r1, sl
 80040b6:	f000 faf1 	bl	800469c <_Bfree>
 80040ba:	2300      	movs	r3, #0
 80040bc:	703b      	strb	r3, [r7, #0]
 80040be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80040c0:	f109 0001 	add.w	r0, r9, #1
 80040c4:	6018      	str	r0, [r3, #0]
 80040c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f43f acdf 	beq.w	8003a8c <_dtoa_r+0x9c>
 80040ce:	601f      	str	r7, [r3, #0]
 80040d0:	e4dc      	b.n	8003a8c <_dtoa_r+0x9c>
 80040d2:	4627      	mov	r7, r4
 80040d4:	463b      	mov	r3, r7
 80040d6:	461f      	mov	r7, r3
 80040d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040dc:	2a39      	cmp	r2, #57	; 0x39
 80040de:	d107      	bne.n	80040f0 <_dtoa_r+0x700>
 80040e0:	9a08      	ldr	r2, [sp, #32]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d1f7      	bne.n	80040d6 <_dtoa_r+0x6e6>
 80040e6:	2230      	movs	r2, #48	; 0x30
 80040e8:	9908      	ldr	r1, [sp, #32]
 80040ea:	f108 0801 	add.w	r8, r8, #1
 80040ee:	700a      	strb	r2, [r1, #0]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	3201      	adds	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e79f      	b.n	8004038 <_dtoa_r+0x648>
 80040f8:	46c8      	mov	r8, r9
 80040fa:	e7eb      	b.n	80040d4 <_dtoa_r+0x6e4>
 80040fc:	2200      	movs	r2, #0
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <_dtoa_r+0x8d8>)
 8004100:	f7fc f9ea 	bl	80004d8 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800410c:	2200      	movs	r2, #0
 800410e:	2300      	movs	r3, #0
 8004110:	f7fc fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004114:	2800      	cmp	r0, #0
 8004116:	d098      	beq.n	800404a <_dtoa_r+0x65a>
 8004118:	e7cb      	b.n	80040b2 <_dtoa_r+0x6c2>
 800411a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800411c:	2a00      	cmp	r2, #0
 800411e:	f000 80cd 	beq.w	80042bc <_dtoa_r+0x8cc>
 8004122:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004124:	2a01      	cmp	r2, #1
 8004126:	f300 80af 	bgt.w	8004288 <_dtoa_r+0x898>
 800412a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800412c:	2a00      	cmp	r2, #0
 800412e:	f000 80a7 	beq.w	8004280 <_dtoa_r+0x890>
 8004132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004138:	9f06      	ldr	r7, [sp, #24]
 800413a:	9a06      	ldr	r2, [sp, #24]
 800413c:	2101      	movs	r1, #1
 800413e:	441a      	add	r2, r3
 8004140:	9206      	str	r2, [sp, #24]
 8004142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004144:	4628      	mov	r0, r5
 8004146:	441a      	add	r2, r3
 8004148:	9209      	str	r2, [sp, #36]	; 0x24
 800414a:	f000 fb61 	bl	8004810 <__i2b>
 800414e:	4606      	mov	r6, r0
 8004150:	2f00      	cmp	r7, #0
 8004152:	dd0c      	ble.n	800416e <_dtoa_r+0x77e>
 8004154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	dd09      	ble.n	800416e <_dtoa_r+0x77e>
 800415a:	42bb      	cmp	r3, r7
 800415c:	bfa8      	it	ge
 800415e:	463b      	movge	r3, r7
 8004160:	9a06      	ldr	r2, [sp, #24]
 8004162:	1aff      	subs	r7, r7, r3
 8004164:	1ad2      	subs	r2, r2, r3
 8004166:	9206      	str	r2, [sp, #24]
 8004168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	9309      	str	r3, [sp, #36]	; 0x24
 800416e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004170:	b1f3      	cbz	r3, 80041b0 <_dtoa_r+0x7c0>
 8004172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a9 	beq.w	80042cc <_dtoa_r+0x8dc>
 800417a:	2c00      	cmp	r4, #0
 800417c:	dd10      	ble.n	80041a0 <_dtoa_r+0x7b0>
 800417e:	4631      	mov	r1, r6
 8004180:	4622      	mov	r2, r4
 8004182:	4628      	mov	r0, r5
 8004184:	f000 fbfe 	bl	8004984 <__pow5mult>
 8004188:	4652      	mov	r2, sl
 800418a:	4601      	mov	r1, r0
 800418c:	4606      	mov	r6, r0
 800418e:	4628      	mov	r0, r5
 8004190:	f000 fb54 	bl	800483c <__multiply>
 8004194:	4680      	mov	r8, r0
 8004196:	4651      	mov	r1, sl
 8004198:	4628      	mov	r0, r5
 800419a:	f000 fa7f 	bl	800469c <_Bfree>
 800419e:	46c2      	mov	sl, r8
 80041a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041a2:	1b1a      	subs	r2, r3, r4
 80041a4:	d004      	beq.n	80041b0 <_dtoa_r+0x7c0>
 80041a6:	4651      	mov	r1, sl
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 fbeb 	bl	8004984 <__pow5mult>
 80041ae:	4682      	mov	sl, r0
 80041b0:	2101      	movs	r1, #1
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 fb2c 	bl	8004810 <__i2b>
 80041b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041ba:	4604      	mov	r4, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f340 8087 	ble.w	80042d0 <_dtoa_r+0x8e0>
 80041c2:	461a      	mov	r2, r3
 80041c4:	4601      	mov	r1, r0
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fbdc 	bl	8004984 <__pow5mult>
 80041cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041ce:	4604      	mov	r4, r0
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f340 8080 	ble.w	80042d6 <_dtoa_r+0x8e6>
 80041d6:	f04f 0800 	mov.w	r8, #0
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80041e0:	6918      	ldr	r0, [r3, #16]
 80041e2:	f000 fac7 	bl	8004774 <__hi0bits>
 80041e6:	f1c0 0020 	rsb	r0, r0, #32
 80041ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ec:	4418      	add	r0, r3
 80041ee:	f010 001f 	ands.w	r0, r0, #31
 80041f2:	f000 8092 	beq.w	800431a <_dtoa_r+0x92a>
 80041f6:	f1c0 0320 	rsb	r3, r0, #32
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	f340 808a 	ble.w	8004314 <_dtoa_r+0x924>
 8004200:	f1c0 001c 	rsb	r0, r0, #28
 8004204:	9b06      	ldr	r3, [sp, #24]
 8004206:	4407      	add	r7, r0
 8004208:	4403      	add	r3, r0
 800420a:	9306      	str	r3, [sp, #24]
 800420c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420e:	4403      	add	r3, r0
 8004210:	9309      	str	r3, [sp, #36]	; 0x24
 8004212:	9b06      	ldr	r3, [sp, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd05      	ble.n	8004224 <_dtoa_r+0x834>
 8004218:	4651      	mov	r1, sl
 800421a:	461a      	mov	r2, r3
 800421c:	4628      	mov	r0, r5
 800421e:	f000 fc0b 	bl	8004a38 <__lshift>
 8004222:	4682      	mov	sl, r0
 8004224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	dd05      	ble.n	8004236 <_dtoa_r+0x846>
 800422a:	4621      	mov	r1, r4
 800422c:	461a      	mov	r2, r3
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fc02 	bl	8004a38 <__lshift>
 8004234:	4604      	mov	r4, r0
 8004236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d070      	beq.n	800431e <_dtoa_r+0x92e>
 800423c:	4621      	mov	r1, r4
 800423e:	4650      	mov	r0, sl
 8004240:	f000 fc66 	bl	8004b10 <__mcmp>
 8004244:	2800      	cmp	r0, #0
 8004246:	da6a      	bge.n	800431e <_dtoa_r+0x92e>
 8004248:	2300      	movs	r3, #0
 800424a:	4651      	mov	r1, sl
 800424c:	220a      	movs	r2, #10
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fa46 	bl	80046e0 <__multadd>
 8004254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004256:	4682      	mov	sl, r0
 8004258:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8193 	beq.w	8004588 <_dtoa_r+0xb98>
 8004262:	4631      	mov	r1, r6
 8004264:	2300      	movs	r3, #0
 8004266:	220a      	movs	r2, #10
 8004268:	4628      	mov	r0, r5
 800426a:	f000 fa39 	bl	80046e0 <__multadd>
 800426e:	f1bb 0f00 	cmp.w	fp, #0
 8004272:	4606      	mov	r6, r0
 8004274:	f300 8093 	bgt.w	800439e <_dtoa_r+0x9ae>
 8004278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800427a:	2b02      	cmp	r3, #2
 800427c:	dc57      	bgt.n	800432e <_dtoa_r+0x93e>
 800427e:	e08e      	b.n	800439e <_dtoa_r+0x9ae>
 8004280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004282:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004286:	e756      	b.n	8004136 <_dtoa_r+0x746>
 8004288:	9b02      	ldr	r3, [sp, #8]
 800428a:	1e5c      	subs	r4, r3, #1
 800428c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428e:	42a3      	cmp	r3, r4
 8004290:	bfb7      	itett	lt
 8004292:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004294:	1b1c      	subge	r4, r3, r4
 8004296:	1ae2      	sublt	r2, r4, r3
 8004298:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800429a:	bfbe      	ittt	lt
 800429c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800429e:	189b      	addlt	r3, r3, r2
 80042a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80042a2:	9b02      	ldr	r3, [sp, #8]
 80042a4:	bfb8      	it	lt
 80042a6:	2400      	movlt	r4, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfbb      	ittet	lt
 80042ac:	9b06      	ldrlt	r3, [sp, #24]
 80042ae:	9a02      	ldrlt	r2, [sp, #8]
 80042b0:	9f06      	ldrge	r7, [sp, #24]
 80042b2:	1a9f      	sublt	r7, r3, r2
 80042b4:	bfac      	ite	ge
 80042b6:	9b02      	ldrge	r3, [sp, #8]
 80042b8:	2300      	movlt	r3, #0
 80042ba:	e73e      	b.n	800413a <_dtoa_r+0x74a>
 80042bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80042be:	9f06      	ldr	r7, [sp, #24]
 80042c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80042c2:	e745      	b.n	8004150 <_dtoa_r+0x760>
 80042c4:	3fe00000 	.word	0x3fe00000
 80042c8:	40240000 	.word	0x40240000
 80042cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ce:	e76a      	b.n	80041a6 <_dtoa_r+0x7b6>
 80042d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	dc19      	bgt.n	800430a <_dtoa_r+0x91a>
 80042d6:	9b04      	ldr	r3, [sp, #16]
 80042d8:	b9bb      	cbnz	r3, 800430a <_dtoa_r+0x91a>
 80042da:	9b05      	ldr	r3, [sp, #20]
 80042dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e0:	b99b      	cbnz	r3, 800430a <_dtoa_r+0x91a>
 80042e2:	9b05      	ldr	r3, [sp, #20]
 80042e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042e8:	0d1b      	lsrs	r3, r3, #20
 80042ea:	051b      	lsls	r3, r3, #20
 80042ec:	b183      	cbz	r3, 8004310 <_dtoa_r+0x920>
 80042ee:	f04f 0801 	mov.w	r8, #1
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	3301      	adds	r3, #1
 80042f6:	9306      	str	r3, [sp, #24]
 80042f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fa:	3301      	adds	r3, #1
 80042fc:	9309      	str	r3, [sp, #36]	; 0x24
 80042fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af6a 	bne.w	80041da <_dtoa_r+0x7ea>
 8004306:	2001      	movs	r0, #1
 8004308:	e76f      	b.n	80041ea <_dtoa_r+0x7fa>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	e7f6      	b.n	80042fe <_dtoa_r+0x90e>
 8004310:	4698      	mov	r8, r3
 8004312:	e7f4      	b.n	80042fe <_dtoa_r+0x90e>
 8004314:	f43f af7d 	beq.w	8004212 <_dtoa_r+0x822>
 8004318:	4618      	mov	r0, r3
 800431a:	301c      	adds	r0, #28
 800431c:	e772      	b.n	8004204 <_dtoa_r+0x814>
 800431e:	9b02      	ldr	r3, [sp, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	dc36      	bgt.n	8004392 <_dtoa_r+0x9a2>
 8004324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004326:	2b02      	cmp	r3, #2
 8004328:	dd33      	ble.n	8004392 <_dtoa_r+0x9a2>
 800432a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800432e:	f1bb 0f00 	cmp.w	fp, #0
 8004332:	d10d      	bne.n	8004350 <_dtoa_r+0x960>
 8004334:	4621      	mov	r1, r4
 8004336:	465b      	mov	r3, fp
 8004338:	2205      	movs	r2, #5
 800433a:	4628      	mov	r0, r5
 800433c:	f000 f9d0 	bl	80046e0 <__multadd>
 8004340:	4601      	mov	r1, r0
 8004342:	4604      	mov	r4, r0
 8004344:	4650      	mov	r0, sl
 8004346:	f000 fbe3 	bl	8004b10 <__mcmp>
 800434a:	2800      	cmp	r0, #0
 800434c:	f73f adb6 	bgt.w	8003ebc <_dtoa_r+0x4cc>
 8004350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004352:	9f08      	ldr	r7, [sp, #32]
 8004354:	ea6f 0903 	mvn.w	r9, r3
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	4621      	mov	r1, r4
 800435e:	4628      	mov	r0, r5
 8004360:	f000 f99c 	bl	800469c <_Bfree>
 8004364:	2e00      	cmp	r6, #0
 8004366:	f43f aea4 	beq.w	80040b2 <_dtoa_r+0x6c2>
 800436a:	f1b8 0f00 	cmp.w	r8, #0
 800436e:	d005      	beq.n	800437c <_dtoa_r+0x98c>
 8004370:	45b0      	cmp	r8, r6
 8004372:	d003      	beq.n	800437c <_dtoa_r+0x98c>
 8004374:	4641      	mov	r1, r8
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f990 	bl	800469c <_Bfree>
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f98c 	bl	800469c <_Bfree>
 8004384:	e695      	b.n	80040b2 <_dtoa_r+0x6c2>
 8004386:	2400      	movs	r4, #0
 8004388:	4626      	mov	r6, r4
 800438a:	e7e1      	b.n	8004350 <_dtoa_r+0x960>
 800438c:	46c1      	mov	r9, r8
 800438e:	4626      	mov	r6, r4
 8004390:	e594      	b.n	8003ebc <_dtoa_r+0x4cc>
 8004392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004394:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80fc 	beq.w	8004596 <_dtoa_r+0xba6>
 800439e:	2f00      	cmp	r7, #0
 80043a0:	dd05      	ble.n	80043ae <_dtoa_r+0x9be>
 80043a2:	4631      	mov	r1, r6
 80043a4:	463a      	mov	r2, r7
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 fb46 	bl	8004a38 <__lshift>
 80043ac:	4606      	mov	r6, r0
 80043ae:	f1b8 0f00 	cmp.w	r8, #0
 80043b2:	d05c      	beq.n	800446e <_dtoa_r+0xa7e>
 80043b4:	4628      	mov	r0, r5
 80043b6:	6871      	ldr	r1, [r6, #4]
 80043b8:	f000 f930 	bl	800461c <_Balloc>
 80043bc:	4607      	mov	r7, r0
 80043be:	b928      	cbnz	r0, 80043cc <_dtoa_r+0x9dc>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80043c6:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <_dtoa_r+0xbd0>)
 80043c8:	f7ff bb26 	b.w	8003a18 <_dtoa_r+0x28>
 80043cc:	6932      	ldr	r2, [r6, #16]
 80043ce:	f106 010c 	add.w	r1, r6, #12
 80043d2:	3202      	adds	r2, #2
 80043d4:	0092      	lsls	r2, r2, #2
 80043d6:	300c      	adds	r0, #12
 80043d8:	f000 f912 	bl	8004600 <memcpy>
 80043dc:	2201      	movs	r2, #1
 80043de:	4639      	mov	r1, r7
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fb29 	bl	8004a38 <__lshift>
 80043e6:	46b0      	mov	r8, r6
 80043e8:	4606      	mov	r6, r0
 80043ea:	9b08      	ldr	r3, [sp, #32]
 80043ec:	3301      	adds	r3, #1
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	9b08      	ldr	r3, [sp, #32]
 80043f2:	445b      	add	r3, fp
 80043f4:	930a      	str	r3, [sp, #40]	; 0x28
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	9309      	str	r3, [sp, #36]	; 0x24
 80043fe:	9b02      	ldr	r3, [sp, #8]
 8004400:	4621      	mov	r1, r4
 8004402:	4650      	mov	r0, sl
 8004404:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004408:	f7ff fa62 	bl	80038d0 <quorem>
 800440c:	4603      	mov	r3, r0
 800440e:	4641      	mov	r1, r8
 8004410:	3330      	adds	r3, #48	; 0x30
 8004412:	9004      	str	r0, [sp, #16]
 8004414:	4650      	mov	r0, sl
 8004416:	930b      	str	r3, [sp, #44]	; 0x2c
 8004418:	f000 fb7a 	bl	8004b10 <__mcmp>
 800441c:	4632      	mov	r2, r6
 800441e:	9006      	str	r0, [sp, #24]
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fb90 	bl	8004b48 <__mdiff>
 8004428:	68c2      	ldr	r2, [r0, #12]
 800442a:	4607      	mov	r7, r0
 800442c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800442e:	bb02      	cbnz	r2, 8004472 <_dtoa_r+0xa82>
 8004430:	4601      	mov	r1, r0
 8004432:	4650      	mov	r0, sl
 8004434:	f000 fb6c 	bl	8004b10 <__mcmp>
 8004438:	4602      	mov	r2, r0
 800443a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800443c:	4639      	mov	r1, r7
 800443e:	4628      	mov	r0, r5
 8004440:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004444:	f000 f92a 	bl	800469c <_Bfree>
 8004448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800444a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800444c:	9f02      	ldr	r7, [sp, #8]
 800444e:	ea43 0102 	orr.w	r1, r3, r2
 8004452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004454:	430b      	orrs	r3, r1
 8004456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004458:	d10d      	bne.n	8004476 <_dtoa_r+0xa86>
 800445a:	2b39      	cmp	r3, #57	; 0x39
 800445c:	d027      	beq.n	80044ae <_dtoa_r+0xabe>
 800445e:	9a06      	ldr	r2, [sp, #24]
 8004460:	2a00      	cmp	r2, #0
 8004462:	dd01      	ble.n	8004468 <_dtoa_r+0xa78>
 8004464:	9b04      	ldr	r3, [sp, #16]
 8004466:	3331      	adds	r3, #49	; 0x31
 8004468:	f88b 3000 	strb.w	r3, [fp]
 800446c:	e776      	b.n	800435c <_dtoa_r+0x96c>
 800446e:	4630      	mov	r0, r6
 8004470:	e7b9      	b.n	80043e6 <_dtoa_r+0x9f6>
 8004472:	2201      	movs	r2, #1
 8004474:	e7e2      	b.n	800443c <_dtoa_r+0xa4c>
 8004476:	9906      	ldr	r1, [sp, #24]
 8004478:	2900      	cmp	r1, #0
 800447a:	db04      	blt.n	8004486 <_dtoa_r+0xa96>
 800447c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800447e:	4301      	orrs	r1, r0
 8004480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004482:	4301      	orrs	r1, r0
 8004484:	d120      	bne.n	80044c8 <_dtoa_r+0xad8>
 8004486:	2a00      	cmp	r2, #0
 8004488:	ddee      	ble.n	8004468 <_dtoa_r+0xa78>
 800448a:	4651      	mov	r1, sl
 800448c:	2201      	movs	r2, #1
 800448e:	4628      	mov	r0, r5
 8004490:	9302      	str	r3, [sp, #8]
 8004492:	f000 fad1 	bl	8004a38 <__lshift>
 8004496:	4621      	mov	r1, r4
 8004498:	4682      	mov	sl, r0
 800449a:	f000 fb39 	bl	8004b10 <__mcmp>
 800449e:	2800      	cmp	r0, #0
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	dc02      	bgt.n	80044aa <_dtoa_r+0xaba>
 80044a4:	d1e0      	bne.n	8004468 <_dtoa_r+0xa78>
 80044a6:	07da      	lsls	r2, r3, #31
 80044a8:	d5de      	bpl.n	8004468 <_dtoa_r+0xa78>
 80044aa:	2b39      	cmp	r3, #57	; 0x39
 80044ac:	d1da      	bne.n	8004464 <_dtoa_r+0xa74>
 80044ae:	2339      	movs	r3, #57	; 0x39
 80044b0:	f88b 3000 	strb.w	r3, [fp]
 80044b4:	463b      	mov	r3, r7
 80044b6:	461f      	mov	r7, r3
 80044b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80044bc:	3b01      	subs	r3, #1
 80044be:	2a39      	cmp	r2, #57	; 0x39
 80044c0:	d050      	beq.n	8004564 <_dtoa_r+0xb74>
 80044c2:	3201      	adds	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e749      	b.n	800435c <_dtoa_r+0x96c>
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	dd03      	ble.n	80044d4 <_dtoa_r+0xae4>
 80044cc:	2b39      	cmp	r3, #57	; 0x39
 80044ce:	d0ee      	beq.n	80044ae <_dtoa_r+0xabe>
 80044d0:	3301      	adds	r3, #1
 80044d2:	e7c9      	b.n	8004468 <_dtoa_r+0xa78>
 80044d4:	9a02      	ldr	r2, [sp, #8]
 80044d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80044dc:	428a      	cmp	r2, r1
 80044de:	d02a      	beq.n	8004536 <_dtoa_r+0xb46>
 80044e0:	4651      	mov	r1, sl
 80044e2:	2300      	movs	r3, #0
 80044e4:	220a      	movs	r2, #10
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f8fa 	bl	80046e0 <__multadd>
 80044ec:	45b0      	cmp	r8, r6
 80044ee:	4682      	mov	sl, r0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	f04f 020a 	mov.w	r2, #10
 80044f8:	4641      	mov	r1, r8
 80044fa:	4628      	mov	r0, r5
 80044fc:	d107      	bne.n	800450e <_dtoa_r+0xb1e>
 80044fe:	f000 f8ef 	bl	80046e0 <__multadd>
 8004502:	4680      	mov	r8, r0
 8004504:	4606      	mov	r6, r0
 8004506:	9b02      	ldr	r3, [sp, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	e777      	b.n	80043fe <_dtoa_r+0xa0e>
 800450e:	f000 f8e7 	bl	80046e0 <__multadd>
 8004512:	4631      	mov	r1, r6
 8004514:	4680      	mov	r8, r0
 8004516:	2300      	movs	r3, #0
 8004518:	220a      	movs	r2, #10
 800451a:	4628      	mov	r0, r5
 800451c:	f000 f8e0 	bl	80046e0 <__multadd>
 8004520:	4606      	mov	r6, r0
 8004522:	e7f0      	b.n	8004506 <_dtoa_r+0xb16>
 8004524:	f1bb 0f00 	cmp.w	fp, #0
 8004528:	bfcc      	ite	gt
 800452a:	465f      	movgt	r7, fp
 800452c:	2701      	movle	r7, #1
 800452e:	f04f 0800 	mov.w	r8, #0
 8004532:	9a08      	ldr	r2, [sp, #32]
 8004534:	4417      	add	r7, r2
 8004536:	4651      	mov	r1, sl
 8004538:	2201      	movs	r2, #1
 800453a:	4628      	mov	r0, r5
 800453c:	9302      	str	r3, [sp, #8]
 800453e:	f000 fa7b 	bl	8004a38 <__lshift>
 8004542:	4621      	mov	r1, r4
 8004544:	4682      	mov	sl, r0
 8004546:	f000 fae3 	bl	8004b10 <__mcmp>
 800454a:	2800      	cmp	r0, #0
 800454c:	dcb2      	bgt.n	80044b4 <_dtoa_r+0xac4>
 800454e:	d102      	bne.n	8004556 <_dtoa_r+0xb66>
 8004550:	9b02      	ldr	r3, [sp, #8]
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d4ae      	bmi.n	80044b4 <_dtoa_r+0xac4>
 8004556:	463b      	mov	r3, r7
 8004558:	461f      	mov	r7, r3
 800455a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800455e:	2a30      	cmp	r2, #48	; 0x30
 8004560:	d0fa      	beq.n	8004558 <_dtoa_r+0xb68>
 8004562:	e6fb      	b.n	800435c <_dtoa_r+0x96c>
 8004564:	9a08      	ldr	r2, [sp, #32]
 8004566:	429a      	cmp	r2, r3
 8004568:	d1a5      	bne.n	80044b6 <_dtoa_r+0xac6>
 800456a:	2331      	movs	r3, #49	; 0x31
 800456c:	f109 0901 	add.w	r9, r9, #1
 8004570:	7013      	strb	r3, [r2, #0]
 8004572:	e6f3      	b.n	800435c <_dtoa_r+0x96c>
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <_dtoa_r+0xbd4>)
 8004576:	f7ff baa7 	b.w	8003ac8 <_dtoa_r+0xd8>
 800457a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f aa80 	bne.w	8003a82 <_dtoa_r+0x92>
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <_dtoa_r+0xbd8>)
 8004584:	f7ff baa0 	b.w	8003ac8 <_dtoa_r+0xd8>
 8004588:	f1bb 0f00 	cmp.w	fp, #0
 800458c:	dc03      	bgt.n	8004596 <_dtoa_r+0xba6>
 800458e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004590:	2b02      	cmp	r3, #2
 8004592:	f73f aecc 	bgt.w	800432e <_dtoa_r+0x93e>
 8004596:	9f08      	ldr	r7, [sp, #32]
 8004598:	4621      	mov	r1, r4
 800459a:	4650      	mov	r0, sl
 800459c:	f7ff f998 	bl	80038d0 <quorem>
 80045a0:	9a08      	ldr	r2, [sp, #32]
 80045a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80045a6:	f807 3b01 	strb.w	r3, [r7], #1
 80045aa:	1aba      	subs	r2, r7, r2
 80045ac:	4593      	cmp	fp, r2
 80045ae:	ddb9      	ble.n	8004524 <_dtoa_r+0xb34>
 80045b0:	4651      	mov	r1, sl
 80045b2:	2300      	movs	r3, #0
 80045b4:	220a      	movs	r2, #10
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f892 	bl	80046e0 <__multadd>
 80045bc:	4682      	mov	sl, r0
 80045be:	e7eb      	b.n	8004598 <_dtoa_r+0xba8>
 80045c0:	08005e2f 	.word	0x08005e2f
 80045c4:	08005d88 	.word	0x08005d88
 80045c8:	08005dac 	.word	0x08005dac

080045cc <_localeconv_r>:
 80045cc:	4800      	ldr	r0, [pc, #0]	; (80045d0 <_localeconv_r+0x4>)
 80045ce:	4770      	bx	lr
 80045d0:	20000160 	.word	0x20000160

080045d4 <malloc>:
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <malloc+0xc>)
 80045d6:	4601      	mov	r1, r0
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f000 bbfb 	b.w	8004dd4 <_malloc_r>
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <memchr>:
 80045e4:	4603      	mov	r3, r0
 80045e6:	b510      	push	{r4, lr}
 80045e8:	b2c9      	uxtb	r1, r1
 80045ea:	4402      	add	r2, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	d101      	bne.n	80045f6 <memchr+0x12>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e003      	b.n	80045fe <memchr+0x1a>
 80045f6:	7804      	ldrb	r4, [r0, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	428c      	cmp	r4, r1
 80045fc:	d1f6      	bne.n	80045ec <memchr+0x8>
 80045fe:	bd10      	pop	{r4, pc}

08004600 <memcpy>:
 8004600:	440a      	add	r2, r1
 8004602:	4291      	cmp	r1, r2
 8004604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004608:	d100      	bne.n	800460c <memcpy+0xc>
 800460a:	4770      	bx	lr
 800460c:	b510      	push	{r4, lr}
 800460e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004612:	4291      	cmp	r1, r2
 8004614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004618:	d1f9      	bne.n	800460e <memcpy+0xe>
 800461a:	bd10      	pop	{r4, pc}

0800461c <_Balloc>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004620:	4604      	mov	r4, r0
 8004622:	460d      	mov	r5, r1
 8004624:	b976      	cbnz	r6, 8004644 <_Balloc+0x28>
 8004626:	2010      	movs	r0, #16
 8004628:	f7ff ffd4 	bl	80045d4 <malloc>
 800462c:	4602      	mov	r2, r0
 800462e:	6260      	str	r0, [r4, #36]	; 0x24
 8004630:	b920      	cbnz	r0, 800463c <_Balloc+0x20>
 8004632:	2166      	movs	r1, #102	; 0x66
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <_Balloc+0x78>)
 8004636:	4818      	ldr	r0, [pc, #96]	; (8004698 <_Balloc+0x7c>)
 8004638:	f000 fd92 	bl	8005160 <__assert_func>
 800463c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004640:	6006      	str	r6, [r0, #0]
 8004642:	60c6      	str	r6, [r0, #12]
 8004644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004646:	68f3      	ldr	r3, [r6, #12]
 8004648:	b183      	cbz	r3, 800466c <_Balloc+0x50>
 800464a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004652:	b9b8      	cbnz	r0, 8004684 <_Balloc+0x68>
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f605 	lsl.w	r6, r1, r5
 800465a:	1d72      	adds	r2, r6, #5
 800465c:	4620      	mov	r0, r4
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	f000 fb5e 	bl	8004d20 <_calloc_r>
 8004664:	b160      	cbz	r0, 8004680 <_Balloc+0x64>
 8004666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800466a:	e00e      	b.n	800468a <_Balloc+0x6e>
 800466c:	2221      	movs	r2, #33	; 0x21
 800466e:	2104      	movs	r1, #4
 8004670:	4620      	mov	r0, r4
 8004672:	f000 fb55 	bl	8004d20 <_calloc_r>
 8004676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004678:	60f0      	str	r0, [r6, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e4      	bne.n	800464a <_Balloc+0x2e>
 8004680:	2000      	movs	r0, #0
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	6802      	ldr	r2, [r0, #0]
 8004686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800468a:	2300      	movs	r3, #0
 800468c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004690:	e7f7      	b.n	8004682 <_Balloc+0x66>
 8004692:	bf00      	nop
 8004694:	08005db9 	.word	0x08005db9
 8004698:	08005e40 	.word	0x08005e40

0800469c <_Bfree>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046a0:	4605      	mov	r5, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	b976      	cbnz	r6, 80046c4 <_Bfree+0x28>
 80046a6:	2010      	movs	r0, #16
 80046a8:	f7ff ff94 	bl	80045d4 <malloc>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6268      	str	r0, [r5, #36]	; 0x24
 80046b0:	b920      	cbnz	r0, 80046bc <_Bfree+0x20>
 80046b2:	218a      	movs	r1, #138	; 0x8a
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <_Bfree+0x3c>)
 80046b6:	4809      	ldr	r0, [pc, #36]	; (80046dc <_Bfree+0x40>)
 80046b8:	f000 fd52 	bl	8005160 <__assert_func>
 80046bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046c0:	6006      	str	r6, [r0, #0]
 80046c2:	60c6      	str	r6, [r0, #12]
 80046c4:	b13c      	cbz	r4, 80046d6 <_Bfree+0x3a>
 80046c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046c8:	6862      	ldr	r2, [r4, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046d0:	6021      	str	r1, [r4, #0]
 80046d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	08005db9 	.word	0x08005db9
 80046dc:	08005e40 	.word	0x08005e40

080046e0 <__multadd>:
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	4698      	mov	r8, r3
 80046e6:	460c      	mov	r4, r1
 80046e8:	2300      	movs	r3, #0
 80046ea:	690e      	ldr	r6, [r1, #16]
 80046ec:	4607      	mov	r7, r0
 80046ee:	f101 0014 	add.w	r0, r1, #20
 80046f2:	6805      	ldr	r5, [r0, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2a9      	uxth	r1, r5
 80046f8:	fb02 8101 	mla	r1, r2, r1, r8
 80046fc:	0c2d      	lsrs	r5, r5, #16
 80046fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004702:	fb02 c505 	mla	r5, r2, r5, ip
 8004706:	b289      	uxth	r1, r1
 8004708:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800470c:	429e      	cmp	r6, r3
 800470e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004712:	f840 1b04 	str.w	r1, [r0], #4
 8004716:	dcec      	bgt.n	80046f2 <__multadd+0x12>
 8004718:	f1b8 0f00 	cmp.w	r8, #0
 800471c:	d022      	beq.n	8004764 <__multadd+0x84>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	42b3      	cmp	r3, r6
 8004722:	dc19      	bgt.n	8004758 <__multadd+0x78>
 8004724:	6861      	ldr	r1, [r4, #4]
 8004726:	4638      	mov	r0, r7
 8004728:	3101      	adds	r1, #1
 800472a:	f7ff ff77 	bl	800461c <_Balloc>
 800472e:	4605      	mov	r5, r0
 8004730:	b928      	cbnz	r0, 800473e <__multadd+0x5e>
 8004732:	4602      	mov	r2, r0
 8004734:	21b5      	movs	r1, #181	; 0xb5
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <__multadd+0x8c>)
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <__multadd+0x90>)
 800473a:	f000 fd11 	bl	8005160 <__assert_func>
 800473e:	6922      	ldr	r2, [r4, #16]
 8004740:	f104 010c 	add.w	r1, r4, #12
 8004744:	3202      	adds	r2, #2
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	300c      	adds	r0, #12
 800474a:	f7ff ff59 	bl	8004600 <memcpy>
 800474e:	4621      	mov	r1, r4
 8004750:	4638      	mov	r0, r7
 8004752:	f7ff ffa3 	bl	800469c <_Bfree>
 8004756:	462c      	mov	r4, r5
 8004758:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800475c:	3601      	adds	r6, #1
 800475e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004762:	6126      	str	r6, [r4, #16]
 8004764:	4620      	mov	r0, r4
 8004766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476a:	bf00      	nop
 800476c:	08005e2f 	.word	0x08005e2f
 8004770:	08005e40 	.word	0x08005e40

08004774 <__hi0bits>:
 8004774:	0c02      	lsrs	r2, r0, #16
 8004776:	0412      	lsls	r2, r2, #16
 8004778:	4603      	mov	r3, r0
 800477a:	b9ca      	cbnz	r2, 80047b0 <__hi0bits+0x3c>
 800477c:	0403      	lsls	r3, r0, #16
 800477e:	2010      	movs	r0, #16
 8004780:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004784:	bf04      	itt	eq
 8004786:	021b      	lsleq	r3, r3, #8
 8004788:	3008      	addeq	r0, #8
 800478a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800478e:	bf04      	itt	eq
 8004790:	011b      	lsleq	r3, r3, #4
 8004792:	3004      	addeq	r0, #4
 8004794:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004798:	bf04      	itt	eq
 800479a:	009b      	lsleq	r3, r3, #2
 800479c:	3002      	addeq	r0, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db05      	blt.n	80047ae <__hi0bits+0x3a>
 80047a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80047a6:	f100 0001 	add.w	r0, r0, #1
 80047aa:	bf08      	it	eq
 80047ac:	2020      	moveq	r0, #32
 80047ae:	4770      	bx	lr
 80047b0:	2000      	movs	r0, #0
 80047b2:	e7e5      	b.n	8004780 <__hi0bits+0xc>

080047b4 <__lo0bits>:
 80047b4:	6803      	ldr	r3, [r0, #0]
 80047b6:	4602      	mov	r2, r0
 80047b8:	f013 0007 	ands.w	r0, r3, #7
 80047bc:	d00b      	beq.n	80047d6 <__lo0bits+0x22>
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	d422      	bmi.n	8004808 <__lo0bits+0x54>
 80047c2:	0798      	lsls	r0, r3, #30
 80047c4:	bf49      	itett	mi
 80047c6:	085b      	lsrmi	r3, r3, #1
 80047c8:	089b      	lsrpl	r3, r3, #2
 80047ca:	2001      	movmi	r0, #1
 80047cc:	6013      	strmi	r3, [r2, #0]
 80047ce:	bf5c      	itt	pl
 80047d0:	2002      	movpl	r0, #2
 80047d2:	6013      	strpl	r3, [r2, #0]
 80047d4:	4770      	bx	lr
 80047d6:	b299      	uxth	r1, r3
 80047d8:	b909      	cbnz	r1, 80047de <__lo0bits+0x2a>
 80047da:	2010      	movs	r0, #16
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80047e2:	bf04      	itt	eq
 80047e4:	0a1b      	lsreq	r3, r3, #8
 80047e6:	3008      	addeq	r0, #8
 80047e8:	0719      	lsls	r1, r3, #28
 80047ea:	bf04      	itt	eq
 80047ec:	091b      	lsreq	r3, r3, #4
 80047ee:	3004      	addeq	r0, #4
 80047f0:	0799      	lsls	r1, r3, #30
 80047f2:	bf04      	itt	eq
 80047f4:	089b      	lsreq	r3, r3, #2
 80047f6:	3002      	addeq	r0, #2
 80047f8:	07d9      	lsls	r1, r3, #31
 80047fa:	d403      	bmi.n	8004804 <__lo0bits+0x50>
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	f100 0001 	add.w	r0, r0, #1
 8004802:	d003      	beq.n	800480c <__lo0bits+0x58>
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4770      	bx	lr
 8004808:	2000      	movs	r0, #0
 800480a:	4770      	bx	lr
 800480c:	2020      	movs	r0, #32
 800480e:	4770      	bx	lr

08004810 <__i2b>:
 8004810:	b510      	push	{r4, lr}
 8004812:	460c      	mov	r4, r1
 8004814:	2101      	movs	r1, #1
 8004816:	f7ff ff01 	bl	800461c <_Balloc>
 800481a:	4602      	mov	r2, r0
 800481c:	b928      	cbnz	r0, 800482a <__i2b+0x1a>
 800481e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <__i2b+0x24>)
 8004824:	4804      	ldr	r0, [pc, #16]	; (8004838 <__i2b+0x28>)
 8004826:	f000 fc9b 	bl	8005160 <__assert_func>
 800482a:	2301      	movs	r3, #1
 800482c:	6144      	str	r4, [r0, #20]
 800482e:	6103      	str	r3, [r0, #16]
 8004830:	bd10      	pop	{r4, pc}
 8004832:	bf00      	nop
 8004834:	08005e2f 	.word	0x08005e2f
 8004838:	08005e40 	.word	0x08005e40

0800483c <__multiply>:
 800483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	4614      	mov	r4, r2
 8004842:	690a      	ldr	r2, [r1, #16]
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	460d      	mov	r5, r1
 8004848:	429a      	cmp	r2, r3
 800484a:	bfbe      	ittt	lt
 800484c:	460b      	movlt	r3, r1
 800484e:	4625      	movlt	r5, r4
 8004850:	461c      	movlt	r4, r3
 8004852:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004856:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800485a:	68ab      	ldr	r3, [r5, #8]
 800485c:	6869      	ldr	r1, [r5, #4]
 800485e:	eb0a 0709 	add.w	r7, sl, r9
 8004862:	42bb      	cmp	r3, r7
 8004864:	b085      	sub	sp, #20
 8004866:	bfb8      	it	lt
 8004868:	3101      	addlt	r1, #1
 800486a:	f7ff fed7 	bl	800461c <_Balloc>
 800486e:	b930      	cbnz	r0, 800487e <__multiply+0x42>
 8004870:	4602      	mov	r2, r0
 8004872:	f240 115d 	movw	r1, #349	; 0x15d
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <__multiply+0x140>)
 8004878:	4841      	ldr	r0, [pc, #260]	; (8004980 <__multiply+0x144>)
 800487a:	f000 fc71 	bl	8005160 <__assert_func>
 800487e:	f100 0614 	add.w	r6, r0, #20
 8004882:	4633      	mov	r3, r6
 8004884:	2200      	movs	r2, #0
 8004886:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800488a:	4543      	cmp	r3, r8
 800488c:	d31e      	bcc.n	80048cc <__multiply+0x90>
 800488e:	f105 0c14 	add.w	ip, r5, #20
 8004892:	f104 0314 	add.w	r3, r4, #20
 8004896:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800489a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800489e:	9202      	str	r2, [sp, #8]
 80048a0:	ebac 0205 	sub.w	r2, ip, r5
 80048a4:	3a15      	subs	r2, #21
 80048a6:	f022 0203 	bic.w	r2, r2, #3
 80048aa:	3204      	adds	r2, #4
 80048ac:	f105 0115 	add.w	r1, r5, #21
 80048b0:	458c      	cmp	ip, r1
 80048b2:	bf38      	it	cc
 80048b4:	2204      	movcc	r2, #4
 80048b6:	9201      	str	r2, [sp, #4]
 80048b8:	9a02      	ldr	r2, [sp, #8]
 80048ba:	9303      	str	r3, [sp, #12]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d808      	bhi.n	80048d2 <__multiply+0x96>
 80048c0:	2f00      	cmp	r7, #0
 80048c2:	dc55      	bgt.n	8004970 <__multiply+0x134>
 80048c4:	6107      	str	r7, [r0, #16]
 80048c6:	b005      	add	sp, #20
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048cc:	f843 2b04 	str.w	r2, [r3], #4
 80048d0:	e7db      	b.n	800488a <__multiply+0x4e>
 80048d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80048d6:	f1ba 0f00 	cmp.w	sl, #0
 80048da:	d020      	beq.n	800491e <__multiply+0xe2>
 80048dc:	46b1      	mov	r9, r6
 80048de:	2200      	movs	r2, #0
 80048e0:	f105 0e14 	add.w	lr, r5, #20
 80048e4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80048e8:	f8d9 b000 	ldr.w	fp, [r9]
 80048ec:	b2a1      	uxth	r1, r4
 80048ee:	fa1f fb8b 	uxth.w	fp, fp
 80048f2:	fb0a b101 	mla	r1, sl, r1, fp
 80048f6:	4411      	add	r1, r2
 80048f8:	f8d9 2000 	ldr.w	r2, [r9]
 80048fc:	0c24      	lsrs	r4, r4, #16
 80048fe:	0c12      	lsrs	r2, r2, #16
 8004900:	fb0a 2404 	mla	r4, sl, r4, r2
 8004904:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004908:	b289      	uxth	r1, r1
 800490a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800490e:	45f4      	cmp	ip, lr
 8004910:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004914:	f849 1b04 	str.w	r1, [r9], #4
 8004918:	d8e4      	bhi.n	80048e4 <__multiply+0xa8>
 800491a:	9901      	ldr	r1, [sp, #4]
 800491c:	5072      	str	r2, [r6, r1]
 800491e:	9a03      	ldr	r2, [sp, #12]
 8004920:	3304      	adds	r3, #4
 8004922:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004926:	f1b9 0f00 	cmp.w	r9, #0
 800492a:	d01f      	beq.n	800496c <__multiply+0x130>
 800492c:	46b6      	mov	lr, r6
 800492e:	f04f 0a00 	mov.w	sl, #0
 8004932:	6834      	ldr	r4, [r6, #0]
 8004934:	f105 0114 	add.w	r1, r5, #20
 8004938:	880a      	ldrh	r2, [r1, #0]
 800493a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800493e:	b2a4      	uxth	r4, r4
 8004940:	fb09 b202 	mla	r2, r9, r2, fp
 8004944:	4492      	add	sl, r2
 8004946:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800494a:	f84e 4b04 	str.w	r4, [lr], #4
 800494e:	f851 4b04 	ldr.w	r4, [r1], #4
 8004952:	f8be 2000 	ldrh.w	r2, [lr]
 8004956:	0c24      	lsrs	r4, r4, #16
 8004958:	fb09 2404 	mla	r4, r9, r4, r2
 800495c:	458c      	cmp	ip, r1
 800495e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004962:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004966:	d8e7      	bhi.n	8004938 <__multiply+0xfc>
 8004968:	9a01      	ldr	r2, [sp, #4]
 800496a:	50b4      	str	r4, [r6, r2]
 800496c:	3604      	adds	r6, #4
 800496e:	e7a3      	b.n	80048b8 <__multiply+0x7c>
 8004970:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1a5      	bne.n	80048c4 <__multiply+0x88>
 8004978:	3f01      	subs	r7, #1
 800497a:	e7a1      	b.n	80048c0 <__multiply+0x84>
 800497c:	08005e2f 	.word	0x08005e2f
 8004980:	08005e40 	.word	0x08005e40

08004984 <__pow5mult>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	4615      	mov	r5, r2
 800498a:	f012 0203 	ands.w	r2, r2, #3
 800498e:	4606      	mov	r6, r0
 8004990:	460f      	mov	r7, r1
 8004992:	d007      	beq.n	80049a4 <__pow5mult+0x20>
 8004994:	4c25      	ldr	r4, [pc, #148]	; (8004a2c <__pow5mult+0xa8>)
 8004996:	3a01      	subs	r2, #1
 8004998:	2300      	movs	r3, #0
 800499a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800499e:	f7ff fe9f 	bl	80046e0 <__multadd>
 80049a2:	4607      	mov	r7, r0
 80049a4:	10ad      	asrs	r5, r5, #2
 80049a6:	d03d      	beq.n	8004a24 <__pow5mult+0xa0>
 80049a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80049aa:	b97c      	cbnz	r4, 80049cc <__pow5mult+0x48>
 80049ac:	2010      	movs	r0, #16
 80049ae:	f7ff fe11 	bl	80045d4 <malloc>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6270      	str	r0, [r6, #36]	; 0x24
 80049b6:	b928      	cbnz	r0, 80049c4 <__pow5mult+0x40>
 80049b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <__pow5mult+0xac>)
 80049be:	481d      	ldr	r0, [pc, #116]	; (8004a34 <__pow5mult+0xb0>)
 80049c0:	f000 fbce 	bl	8005160 <__assert_func>
 80049c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049c8:	6004      	str	r4, [r0, #0]
 80049ca:	60c4      	str	r4, [r0, #12]
 80049cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80049d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80049d4:	b94c      	cbnz	r4, 80049ea <__pow5mult+0x66>
 80049d6:	f240 2171 	movw	r1, #625	; 0x271
 80049da:	4630      	mov	r0, r6
 80049dc:	f7ff ff18 	bl	8004810 <__i2b>
 80049e0:	2300      	movs	r3, #0
 80049e2:	4604      	mov	r4, r0
 80049e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80049e8:	6003      	str	r3, [r0, #0]
 80049ea:	f04f 0900 	mov.w	r9, #0
 80049ee:	07eb      	lsls	r3, r5, #31
 80049f0:	d50a      	bpl.n	8004a08 <__pow5mult+0x84>
 80049f2:	4639      	mov	r1, r7
 80049f4:	4622      	mov	r2, r4
 80049f6:	4630      	mov	r0, r6
 80049f8:	f7ff ff20 	bl	800483c <__multiply>
 80049fc:	4680      	mov	r8, r0
 80049fe:	4639      	mov	r1, r7
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff fe4b 	bl	800469c <_Bfree>
 8004a06:	4647      	mov	r7, r8
 8004a08:	106d      	asrs	r5, r5, #1
 8004a0a:	d00b      	beq.n	8004a24 <__pow5mult+0xa0>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	b938      	cbnz	r0, 8004a20 <__pow5mult+0x9c>
 8004a10:	4622      	mov	r2, r4
 8004a12:	4621      	mov	r1, r4
 8004a14:	4630      	mov	r0, r6
 8004a16:	f7ff ff11 	bl	800483c <__multiply>
 8004a1a:	6020      	str	r0, [r4, #0]
 8004a1c:	f8c0 9000 	str.w	r9, [r0]
 8004a20:	4604      	mov	r4, r0
 8004a22:	e7e4      	b.n	80049ee <__pow5mult+0x6a>
 8004a24:	4638      	mov	r0, r7
 8004a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	bf00      	nop
 8004a2c:	08005f90 	.word	0x08005f90
 8004a30:	08005db9 	.word	0x08005db9
 8004a34:	08005e40 	.word	0x08005e40

08004a38 <__lshift>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4607      	mov	r7, r0
 8004a40:	4691      	mov	r9, r2
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	6849      	ldr	r1, [r1, #4]
 8004a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a4a:	68a3      	ldr	r3, [r4, #8]
 8004a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a50:	f108 0601 	add.w	r6, r8, #1
 8004a54:	42b3      	cmp	r3, r6
 8004a56:	db0b      	blt.n	8004a70 <__lshift+0x38>
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7ff fddf 	bl	800461c <_Balloc>
 8004a5e:	4605      	mov	r5, r0
 8004a60:	b948      	cbnz	r0, 8004a76 <__lshift+0x3e>
 8004a62:	4602      	mov	r2, r0
 8004a64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <__lshift+0xd0>)
 8004a6a:	4828      	ldr	r0, [pc, #160]	; (8004b0c <__lshift+0xd4>)
 8004a6c:	f000 fb78 	bl	8005160 <__assert_func>
 8004a70:	3101      	adds	r1, #1
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	e7ee      	b.n	8004a54 <__lshift+0x1c>
 8004a76:	2300      	movs	r3, #0
 8004a78:	f100 0114 	add.w	r1, r0, #20
 8004a7c:	f100 0210 	add.w	r2, r0, #16
 8004a80:	4618      	mov	r0, r3
 8004a82:	4553      	cmp	r3, sl
 8004a84:	db33      	blt.n	8004aee <__lshift+0xb6>
 8004a86:	6920      	ldr	r0, [r4, #16]
 8004a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a8c:	f104 0314 	add.w	r3, r4, #20
 8004a90:	f019 091f 	ands.w	r9, r9, #31
 8004a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a9c:	d02b      	beq.n	8004af6 <__lshift+0xbe>
 8004a9e:	468a      	mov	sl, r1
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	fa00 f009 	lsl.w	r0, r0, r9
 8004aac:	4302      	orrs	r2, r0
 8004aae:	f84a 2b04 	str.w	r2, [sl], #4
 8004ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab6:	459c      	cmp	ip, r3
 8004ab8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004abc:	d8f3      	bhi.n	8004aa6 <__lshift+0x6e>
 8004abe:	ebac 0304 	sub.w	r3, ip, r4
 8004ac2:	3b15      	subs	r3, #21
 8004ac4:	f023 0303 	bic.w	r3, r3, #3
 8004ac8:	3304      	adds	r3, #4
 8004aca:	f104 0015 	add.w	r0, r4, #21
 8004ace:	4584      	cmp	ip, r0
 8004ad0:	bf38      	it	cc
 8004ad2:	2304      	movcc	r3, #4
 8004ad4:	50ca      	str	r2, [r1, r3]
 8004ad6:	b10a      	cbz	r2, 8004adc <__lshift+0xa4>
 8004ad8:	f108 0602 	add.w	r6, r8, #2
 8004adc:	3e01      	subs	r6, #1
 8004ade:	4638      	mov	r0, r7
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	612e      	str	r6, [r5, #16]
 8004ae4:	f7ff fdda 	bl	800469c <_Bfree>
 8004ae8:	4628      	mov	r0, r5
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8004af2:	3301      	adds	r3, #1
 8004af4:	e7c5      	b.n	8004a82 <__lshift+0x4a>
 8004af6:	3904      	subs	r1, #4
 8004af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004afc:	459c      	cmp	ip, r3
 8004afe:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b02:	d8f9      	bhi.n	8004af8 <__lshift+0xc0>
 8004b04:	e7ea      	b.n	8004adc <__lshift+0xa4>
 8004b06:	bf00      	nop
 8004b08:	08005e2f 	.word	0x08005e2f
 8004b0c:	08005e40 	.word	0x08005e40

08004b10 <__mcmp>:
 8004b10:	4603      	mov	r3, r0
 8004b12:	690a      	ldr	r2, [r1, #16]
 8004b14:	6900      	ldr	r0, [r0, #16]
 8004b16:	b530      	push	{r4, r5, lr}
 8004b18:	1a80      	subs	r0, r0, r2
 8004b1a:	d10d      	bne.n	8004b38 <__mcmp+0x28>
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	3114      	adds	r1, #20
 8004b20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b30:	4295      	cmp	r5, r2
 8004b32:	d002      	beq.n	8004b3a <__mcmp+0x2a>
 8004b34:	d304      	bcc.n	8004b40 <__mcmp+0x30>
 8004b36:	2001      	movs	r0, #1
 8004b38:	bd30      	pop	{r4, r5, pc}
 8004b3a:	42a3      	cmp	r3, r4
 8004b3c:	d3f4      	bcc.n	8004b28 <__mcmp+0x18>
 8004b3e:	e7fb      	b.n	8004b38 <__mcmp+0x28>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	e7f8      	b.n	8004b38 <__mcmp+0x28>
	...

08004b48 <__mdiff>:
 8004b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	4606      	mov	r6, r0
 8004b50:	4611      	mov	r1, r2
 8004b52:	4620      	mov	r0, r4
 8004b54:	4692      	mov	sl, r2
 8004b56:	f7ff ffdb 	bl	8004b10 <__mcmp>
 8004b5a:	1e05      	subs	r5, r0, #0
 8004b5c:	d111      	bne.n	8004b82 <__mdiff+0x3a>
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7ff fd5b 	bl	800461c <_Balloc>
 8004b66:	4602      	mov	r2, r0
 8004b68:	b928      	cbnz	r0, 8004b76 <__mdiff+0x2e>
 8004b6a:	f240 2132 	movw	r1, #562	; 0x232
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	; (8004c60 <__mdiff+0x118>)
 8004b70:	483c      	ldr	r0, [pc, #240]	; (8004c64 <__mdiff+0x11c>)
 8004b72:	f000 faf5 	bl	8005160 <__assert_func>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b82:	bfa4      	itt	ge
 8004b84:	4653      	movge	r3, sl
 8004b86:	46a2      	movge	sl, r4
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004b8e:	bfa6      	itte	ge
 8004b90:	461c      	movge	r4, r3
 8004b92:	2500      	movge	r5, #0
 8004b94:	2501      	movlt	r5, #1
 8004b96:	f7ff fd41 	bl	800461c <_Balloc>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	b918      	cbnz	r0, 8004ba6 <__mdiff+0x5e>
 8004b9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <__mdiff+0x118>)
 8004ba4:	e7e4      	b.n	8004b70 <__mdiff+0x28>
 8004ba6:	f100 0814 	add.w	r8, r0, #20
 8004baa:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004bae:	60c5      	str	r5, [r0, #12]
 8004bb0:	f04f 0c00 	mov.w	ip, #0
 8004bb4:	f10a 0514 	add.w	r5, sl, #20
 8004bb8:	f10a 0010 	add.w	r0, sl, #16
 8004bbc:	46c2      	mov	sl, r8
 8004bbe:	6926      	ldr	r6, [r4, #16]
 8004bc0:	f104 0914 	add.w	r9, r4, #20
 8004bc4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004bc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004bcc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8004bd4:	fa1f f18b 	uxth.w	r1, fp
 8004bd8:	4461      	add	r1, ip
 8004bda:	fa1f fc83 	uxth.w	ip, r3
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	eba1 010c 	sub.w	r1, r1, ip
 8004be4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004be8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004bec:	b289      	uxth	r1, r1
 8004bee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004bf2:	454e      	cmp	r6, r9
 8004bf4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004bf8:	f84a 3b04 	str.w	r3, [sl], #4
 8004bfc:	d8e6      	bhi.n	8004bcc <__mdiff+0x84>
 8004bfe:	1b33      	subs	r3, r6, r4
 8004c00:	3b15      	subs	r3, #21
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	3415      	adds	r4, #21
 8004c08:	3304      	adds	r3, #4
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	bf38      	it	cc
 8004c0e:	2304      	movcc	r3, #4
 8004c10:	441d      	add	r5, r3
 8004c12:	4443      	add	r3, r8
 8004c14:	461e      	mov	r6, r3
 8004c16:	462c      	mov	r4, r5
 8004c18:	4574      	cmp	r4, lr
 8004c1a:	d30e      	bcc.n	8004c3a <__mdiff+0xf2>
 8004c1c:	f10e 0103 	add.w	r1, lr, #3
 8004c20:	1b49      	subs	r1, r1, r5
 8004c22:	f021 0103 	bic.w	r1, r1, #3
 8004c26:	3d03      	subs	r5, #3
 8004c28:	45ae      	cmp	lr, r5
 8004c2a:	bf38      	it	cc
 8004c2c:	2100      	movcc	r1, #0
 8004c2e:	4419      	add	r1, r3
 8004c30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004c34:	b18b      	cbz	r3, 8004c5a <__mdiff+0x112>
 8004c36:	6117      	str	r7, [r2, #16]
 8004c38:	e7a0      	b.n	8004b7c <__mdiff+0x34>
 8004c3a:	f854 8b04 	ldr.w	r8, [r4], #4
 8004c3e:	fa1f f188 	uxth.w	r1, r8
 8004c42:	4461      	add	r1, ip
 8004c44:	1408      	asrs	r0, r1, #16
 8004c46:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004c4a:	b289      	uxth	r1, r1
 8004c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c54:	f846 1b04 	str.w	r1, [r6], #4
 8004c58:	e7de      	b.n	8004c18 <__mdiff+0xd0>
 8004c5a:	3f01      	subs	r7, #1
 8004c5c:	e7e8      	b.n	8004c30 <__mdiff+0xe8>
 8004c5e:	bf00      	nop
 8004c60:	08005e2f 	.word	0x08005e2f
 8004c64:	08005e40 	.word	0x08005e40

08004c68 <__d2b>:
 8004c68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004c72:	4690      	mov	r8, r2
 8004c74:	461d      	mov	r5, r3
 8004c76:	f7ff fcd1 	bl	800461c <_Balloc>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	b930      	cbnz	r0, 8004c8c <__d2b+0x24>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	f240 310a 	movw	r1, #778	; 0x30a
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <__d2b+0xb0>)
 8004c86:	4825      	ldr	r0, [pc, #148]	; (8004d1c <__d2b+0xb4>)
 8004c88:	f000 fa6a 	bl	8005160 <__assert_func>
 8004c8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004c90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004c94:	bb2d      	cbnz	r5, 8004ce2 <__d2b+0x7a>
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f1b8 0300 	subs.w	r3, r8, #0
 8004c9c:	d026      	beq.n	8004cec <__d2b+0x84>
 8004c9e:	4668      	mov	r0, sp
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	f7ff fd87 	bl	80047b4 <__lo0bits>
 8004ca6:	9900      	ldr	r1, [sp, #0]
 8004ca8:	b1f0      	cbz	r0, 8004ce8 <__d2b+0x80>
 8004caa:	9a01      	ldr	r2, [sp, #4]
 8004cac:	f1c0 0320 	rsb	r3, r0, #32
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	40c2      	lsrs	r2, r0
 8004cb8:	6163      	str	r3, [r4, #20]
 8004cba:	9201      	str	r2, [sp, #4]
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2102      	movne	r1, #2
 8004cc4:	2101      	moveq	r1, #1
 8004cc6:	61a3      	str	r3, [r4, #24]
 8004cc8:	6121      	str	r1, [r4, #16]
 8004cca:	b1c5      	cbz	r5, 8004cfe <__d2b+0x96>
 8004ccc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004cd0:	4405      	add	r5, r0
 8004cd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004cd6:	603d      	str	r5, [r7, #0]
 8004cd8:	6030      	str	r0, [r6, #0]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	b002      	add	sp, #8
 8004cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce6:	e7d6      	b.n	8004c96 <__d2b+0x2e>
 8004ce8:	6161      	str	r1, [r4, #20]
 8004cea:	e7e7      	b.n	8004cbc <__d2b+0x54>
 8004cec:	a801      	add	r0, sp, #4
 8004cee:	f7ff fd61 	bl	80047b4 <__lo0bits>
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	6121      	str	r1, [r4, #16]
 8004cf8:	6163      	str	r3, [r4, #20]
 8004cfa:	3020      	adds	r0, #32
 8004cfc:	e7e5      	b.n	8004cca <__d2b+0x62>
 8004cfe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004d02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d06:	6038      	str	r0, [r7, #0]
 8004d08:	6918      	ldr	r0, [r3, #16]
 8004d0a:	f7ff fd33 	bl	8004774 <__hi0bits>
 8004d0e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004d12:	6031      	str	r1, [r6, #0]
 8004d14:	e7e1      	b.n	8004cda <__d2b+0x72>
 8004d16:	bf00      	nop
 8004d18:	08005e2f 	.word	0x08005e2f
 8004d1c:	08005e40 	.word	0x08005e40

08004d20 <_calloc_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	fb02 f501 	mul.w	r5, r2, r1
 8004d26:	4629      	mov	r1, r5
 8004d28:	f000 f854 	bl	8004dd4 <_malloc_r>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	b118      	cbz	r0, 8004d38 <_calloc_r+0x18>
 8004d30:	462a      	mov	r2, r5
 8004d32:	2100      	movs	r1, #0
 8004d34:	f7fe f944 	bl	8002fc0 <memset>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}

08004d3c <_free_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4605      	mov	r5, r0
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d043      	beq.n	8004dcc <_free_r+0x90>
 8004d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d48:	1f0c      	subs	r4, r1, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bfb8      	it	lt
 8004d4e:	18e4      	addlt	r4, r4, r3
 8004d50:	f000 fa62 	bl	8005218 <__malloc_lock>
 8004d54:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <_free_r+0x94>)
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	4610      	mov	r0, r2
 8004d5a:	b933      	cbnz	r3, 8004d6a <_free_r+0x2e>
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6014      	str	r4, [r2, #0]
 8004d60:	4628      	mov	r0, r5
 8004d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d66:	f000 ba5d 	b.w	8005224 <__malloc_unlock>
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	d90a      	bls.n	8004d84 <_free_r+0x48>
 8004d6e:	6821      	ldr	r1, [r4, #0]
 8004d70:	1862      	adds	r2, r4, r1
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bf01      	itttt	eq
 8004d76:	681a      	ldreq	r2, [r3, #0]
 8004d78:	685b      	ldreq	r3, [r3, #4]
 8004d7a:	1852      	addeq	r2, r2, r1
 8004d7c:	6022      	streq	r2, [r4, #0]
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	6004      	str	r4, [r0, #0]
 8004d82:	e7ed      	b.n	8004d60 <_free_r+0x24>
 8004d84:	461a      	mov	r2, r3
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	b10b      	cbz	r3, 8004d8e <_free_r+0x52>
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	d9fa      	bls.n	8004d84 <_free_r+0x48>
 8004d8e:	6811      	ldr	r1, [r2, #0]
 8004d90:	1850      	adds	r0, r2, r1
 8004d92:	42a0      	cmp	r0, r4
 8004d94:	d10b      	bne.n	8004dae <_free_r+0x72>
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	4401      	add	r1, r0
 8004d9a:	1850      	adds	r0, r2, r1
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	d1de      	bne.n	8004d60 <_free_r+0x24>
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4401      	add	r1, r0
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	6053      	str	r3, [r2, #4]
 8004dac:	e7d8      	b.n	8004d60 <_free_r+0x24>
 8004dae:	d902      	bls.n	8004db6 <_free_r+0x7a>
 8004db0:	230c      	movs	r3, #12
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	e7d4      	b.n	8004d60 <_free_r+0x24>
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1821      	adds	r1, r4, r0
 8004dba:	428b      	cmp	r3, r1
 8004dbc:	bf01      	itttt	eq
 8004dbe:	6819      	ldreq	r1, [r3, #0]
 8004dc0:	685b      	ldreq	r3, [r3, #4]
 8004dc2:	1809      	addeq	r1, r1, r0
 8004dc4:	6021      	streq	r1, [r4, #0]
 8004dc6:	6063      	str	r3, [r4, #4]
 8004dc8:	6054      	str	r4, [r2, #4]
 8004dca:	e7c9      	b.n	8004d60 <_free_r+0x24>
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	200001fc 	.word	0x200001fc

08004dd4 <_malloc_r>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	1ccd      	adds	r5, r1, #3
 8004dd8:	f025 0503 	bic.w	r5, r5, #3
 8004ddc:	3508      	adds	r5, #8
 8004dde:	2d0c      	cmp	r5, #12
 8004de0:	bf38      	it	cc
 8004de2:	250c      	movcc	r5, #12
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	4606      	mov	r6, r0
 8004de8:	db01      	blt.n	8004dee <_malloc_r+0x1a>
 8004dea:	42a9      	cmp	r1, r5
 8004dec:	d903      	bls.n	8004df6 <_malloc_r+0x22>
 8004dee:	230c      	movs	r3, #12
 8004df0:	6033      	str	r3, [r6, #0]
 8004df2:	2000      	movs	r0, #0
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df6:	f000 fa0f 	bl	8005218 <__malloc_lock>
 8004dfa:	4921      	ldr	r1, [pc, #132]	; (8004e80 <_malloc_r+0xac>)
 8004dfc:	680a      	ldr	r2, [r1, #0]
 8004dfe:	4614      	mov	r4, r2
 8004e00:	b99c      	cbnz	r4, 8004e2a <_malloc_r+0x56>
 8004e02:	4f20      	ldr	r7, [pc, #128]	; (8004e84 <_malloc_r+0xb0>)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	b923      	cbnz	r3, 8004e12 <_malloc_r+0x3e>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 f998 	bl	8005140 <_sbrk_r>
 8004e10:	6038      	str	r0, [r7, #0]
 8004e12:	4629      	mov	r1, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 f993 	bl	8005140 <_sbrk_r>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	d123      	bne.n	8004e66 <_malloc_r+0x92>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	4630      	mov	r0, r6
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f000 f9fe 	bl	8005224 <__malloc_unlock>
 8004e28:	e7e3      	b.n	8004df2 <_malloc_r+0x1e>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	1b5b      	subs	r3, r3, r5
 8004e2e:	d417      	bmi.n	8004e60 <_malloc_r+0x8c>
 8004e30:	2b0b      	cmp	r3, #11
 8004e32:	d903      	bls.n	8004e3c <_malloc_r+0x68>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	441c      	add	r4, r3
 8004e38:	6025      	str	r5, [r4, #0]
 8004e3a:	e004      	b.n	8004e46 <_malloc_r+0x72>
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	42a2      	cmp	r2, r4
 8004e40:	bf0c      	ite	eq
 8004e42:	600b      	streq	r3, [r1, #0]
 8004e44:	6053      	strne	r3, [r2, #4]
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 f9ec 	bl	8005224 <__malloc_unlock>
 8004e4c:	f104 000b 	add.w	r0, r4, #11
 8004e50:	1d23      	adds	r3, r4, #4
 8004e52:	f020 0007 	bic.w	r0, r0, #7
 8004e56:	1ac2      	subs	r2, r0, r3
 8004e58:	d0cc      	beq.n	8004df4 <_malloc_r+0x20>
 8004e5a:	1a1b      	subs	r3, r3, r0
 8004e5c:	50a3      	str	r3, [r4, r2]
 8004e5e:	e7c9      	b.n	8004df4 <_malloc_r+0x20>
 8004e60:	4622      	mov	r2, r4
 8004e62:	6864      	ldr	r4, [r4, #4]
 8004e64:	e7cc      	b.n	8004e00 <_malloc_r+0x2c>
 8004e66:	1cc4      	adds	r4, r0, #3
 8004e68:	f024 0403 	bic.w	r4, r4, #3
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d0e3      	beq.n	8004e38 <_malloc_r+0x64>
 8004e70:	1a21      	subs	r1, r4, r0
 8004e72:	4630      	mov	r0, r6
 8004e74:	f000 f964 	bl	8005140 <_sbrk_r>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d1dd      	bne.n	8004e38 <_malloc_r+0x64>
 8004e7c:	e7cf      	b.n	8004e1e <_malloc_r+0x4a>
 8004e7e:	bf00      	nop
 8004e80:	200001fc 	.word	0x200001fc
 8004e84:	20000200 	.word	0x20000200

08004e88 <__ssputs_r>:
 8004e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e8c:	688e      	ldr	r6, [r1, #8]
 8004e8e:	4682      	mov	sl, r0
 8004e90:	429e      	cmp	r6, r3
 8004e92:	460c      	mov	r4, r1
 8004e94:	4690      	mov	r8, r2
 8004e96:	461f      	mov	r7, r3
 8004e98:	d838      	bhi.n	8004f0c <__ssputs_r+0x84>
 8004e9a:	898a      	ldrh	r2, [r1, #12]
 8004e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ea0:	d032      	beq.n	8004f08 <__ssputs_r+0x80>
 8004ea2:	6825      	ldr	r5, [r4, #0]
 8004ea4:	6909      	ldr	r1, [r1, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	eba5 0901 	sub.w	r9, r5, r1
 8004eac:	6965      	ldr	r5, [r4, #20]
 8004eae:	444b      	add	r3, r9
 8004eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eb8:	106d      	asrs	r5, r5, #1
 8004eba:	429d      	cmp	r5, r3
 8004ebc:	bf38      	it	cc
 8004ebe:	461d      	movcc	r5, r3
 8004ec0:	0553      	lsls	r3, r2, #21
 8004ec2:	d531      	bpl.n	8004f28 <__ssputs_r+0xa0>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7ff ff85 	bl	8004dd4 <_malloc_r>
 8004eca:	4606      	mov	r6, r0
 8004ecc:	b950      	cbnz	r0, 8004ee4 <__ssputs_r+0x5c>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed4:	f8ca 3000 	str.w	r3, [sl]
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee4:	464a      	mov	r2, r9
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	f7ff fb8a 	bl	8004600 <memcpy>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	6126      	str	r6, [r4, #16]
 8004efa:	444e      	add	r6, r9
 8004efc:	6026      	str	r6, [r4, #0]
 8004efe:	463e      	mov	r6, r7
 8004f00:	6165      	str	r5, [r4, #20]
 8004f02:	eba5 0509 	sub.w	r5, r5, r9
 8004f06:	60a5      	str	r5, [r4, #8]
 8004f08:	42be      	cmp	r6, r7
 8004f0a:	d900      	bls.n	8004f0e <__ssputs_r+0x86>
 8004f0c:	463e      	mov	r6, r7
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4641      	mov	r1, r8
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	f000 f966 	bl	80051e4 <memmove>
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	1b9b      	subs	r3, r3, r6
 8004f1e:	4432      	add	r2, r6
 8004f20:	2000      	movs	r0, #0
 8004f22:	60a3      	str	r3, [r4, #8]
 8004f24:	6022      	str	r2, [r4, #0]
 8004f26:	e7db      	b.n	8004ee0 <__ssputs_r+0x58>
 8004f28:	462a      	mov	r2, r5
 8004f2a:	f000 f981 	bl	8005230 <_realloc_r>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d1e1      	bne.n	8004ef8 <__ssputs_r+0x70>
 8004f34:	4650      	mov	r0, sl
 8004f36:	6921      	ldr	r1, [r4, #16]
 8004f38:	f7ff ff00 	bl	8004d3c <_free_r>
 8004f3c:	e7c7      	b.n	8004ece <__ssputs_r+0x46>
	...

08004f40 <_svfiprintf_r>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	4698      	mov	r8, r3
 8004f46:	898b      	ldrh	r3, [r1, #12]
 8004f48:	4607      	mov	r7, r0
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	4614      	mov	r4, r2
 8004f50:	b09d      	sub	sp, #116	; 0x74
 8004f52:	d50e      	bpl.n	8004f72 <_svfiprintf_r+0x32>
 8004f54:	690b      	ldr	r3, [r1, #16]
 8004f56:	b963      	cbnz	r3, 8004f72 <_svfiprintf_r+0x32>
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	f7ff ff3b 	bl	8004dd4 <_malloc_r>
 8004f5e:	6028      	str	r0, [r5, #0]
 8004f60:	6128      	str	r0, [r5, #16]
 8004f62:	b920      	cbnz	r0, 8004f6e <_svfiprintf_r+0x2e>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f6c:	e0d1      	b.n	8005112 <_svfiprintf_r+0x1d2>
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	616b      	str	r3, [r5, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9309      	str	r3, [sp, #36]	; 0x24
 8004f76:	2320      	movs	r3, #32
 8004f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f7c:	2330      	movs	r3, #48	; 0x30
 8004f7e:	f04f 0901 	mov.w	r9, #1
 8004f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800512c <_svfiprintf_r+0x1ec>
 8004f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f8e:	4623      	mov	r3, r4
 8004f90:	469a      	mov	sl, r3
 8004f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f96:	b10a      	cbz	r2, 8004f9c <_svfiprintf_r+0x5c>
 8004f98:	2a25      	cmp	r2, #37	; 0x25
 8004f9a:	d1f9      	bne.n	8004f90 <_svfiprintf_r+0x50>
 8004f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004fa0:	d00b      	beq.n	8004fba <_svfiprintf_r+0x7a>
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ff6d 	bl	8004e88 <__ssputs_r>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f000 80aa 	beq.w	8005108 <_svfiprintf_r+0x1c8>
 8004fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb6:	445a      	add	r2, fp
 8004fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fba:	f89a 3000 	ldrb.w	r3, [sl]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80a2 	beq.w	8005108 <_svfiprintf_r+0x1c8>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fce:	f10a 0a01 	add.w	sl, sl, #1
 8004fd2:	9304      	str	r3, [sp, #16]
 8004fd4:	9307      	str	r3, [sp, #28]
 8004fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fda:	931a      	str	r3, [sp, #104]	; 0x68
 8004fdc:	4654      	mov	r4, sl
 8004fde:	2205      	movs	r2, #5
 8004fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe4:	4851      	ldr	r0, [pc, #324]	; (800512c <_svfiprintf_r+0x1ec>)
 8004fe6:	f7ff fafd 	bl	80045e4 <memchr>
 8004fea:	9a04      	ldr	r2, [sp, #16]
 8004fec:	b9d8      	cbnz	r0, 8005026 <_svfiprintf_r+0xe6>
 8004fee:	06d0      	lsls	r0, r2, #27
 8004ff0:	bf44      	itt	mi
 8004ff2:	2320      	movmi	r3, #32
 8004ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ff8:	0711      	lsls	r1, r2, #28
 8004ffa:	bf44      	itt	mi
 8004ffc:	232b      	movmi	r3, #43	; 0x2b
 8004ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005002:	f89a 3000 	ldrb.w	r3, [sl]
 8005006:	2b2a      	cmp	r3, #42	; 0x2a
 8005008:	d015      	beq.n	8005036 <_svfiprintf_r+0xf6>
 800500a:	4654      	mov	r4, sl
 800500c:	2000      	movs	r0, #0
 800500e:	f04f 0c0a 	mov.w	ip, #10
 8005012:	9a07      	ldr	r2, [sp, #28]
 8005014:	4621      	mov	r1, r4
 8005016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800501a:	3b30      	subs	r3, #48	; 0x30
 800501c:	2b09      	cmp	r3, #9
 800501e:	d94e      	bls.n	80050be <_svfiprintf_r+0x17e>
 8005020:	b1b0      	cbz	r0, 8005050 <_svfiprintf_r+0x110>
 8005022:	9207      	str	r2, [sp, #28]
 8005024:	e014      	b.n	8005050 <_svfiprintf_r+0x110>
 8005026:	eba0 0308 	sub.w	r3, r0, r8
 800502a:	fa09 f303 	lsl.w	r3, r9, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	46a2      	mov	sl, r4
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	e7d2      	b.n	8004fdc <_svfiprintf_r+0x9c>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d19      	adds	r1, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9103      	str	r1, [sp, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfbb      	ittet	lt
 8005042:	425b      	neglt	r3, r3
 8005044:	f042 0202 	orrlt.w	r2, r2, #2
 8005048:	9307      	strge	r3, [sp, #28]
 800504a:	9307      	strlt	r3, [sp, #28]
 800504c:	bfb8      	it	lt
 800504e:	9204      	strlt	r2, [sp, #16]
 8005050:	7823      	ldrb	r3, [r4, #0]
 8005052:	2b2e      	cmp	r3, #46	; 0x2e
 8005054:	d10c      	bne.n	8005070 <_svfiprintf_r+0x130>
 8005056:	7863      	ldrb	r3, [r4, #1]
 8005058:	2b2a      	cmp	r3, #42	; 0x2a
 800505a:	d135      	bne.n	80050c8 <_svfiprintf_r+0x188>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	3402      	adds	r4, #2
 8005060:	1d1a      	adds	r2, r3, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	9203      	str	r2, [sp, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfb8      	it	lt
 800506a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800506e:	9305      	str	r3, [sp, #20]
 8005070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800513c <_svfiprintf_r+0x1fc>
 8005074:	2203      	movs	r2, #3
 8005076:	4650      	mov	r0, sl
 8005078:	7821      	ldrb	r1, [r4, #0]
 800507a:	f7ff fab3 	bl	80045e4 <memchr>
 800507e:	b140      	cbz	r0, 8005092 <_svfiprintf_r+0x152>
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	eba0 000a 	sub.w	r0, r0, sl
 8005086:	fa03 f000 	lsl.w	r0, r3, r0
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	3401      	adds	r4, #1
 800508e:	4303      	orrs	r3, r0
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005096:	2206      	movs	r2, #6
 8005098:	4825      	ldr	r0, [pc, #148]	; (8005130 <_svfiprintf_r+0x1f0>)
 800509a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800509e:	f7ff faa1 	bl	80045e4 <memchr>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d038      	beq.n	8005118 <_svfiprintf_r+0x1d8>
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <_svfiprintf_r+0x1f4>)
 80050a8:	bb1b      	cbnz	r3, 80050f2 <_svfiprintf_r+0x1b2>
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	3307      	adds	r3, #7
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	3308      	adds	r3, #8
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b8:	4433      	add	r3, r6
 80050ba:	9309      	str	r3, [sp, #36]	; 0x24
 80050bc:	e767      	b.n	8004f8e <_svfiprintf_r+0x4e>
 80050be:	460c      	mov	r4, r1
 80050c0:	2001      	movs	r0, #1
 80050c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050c6:	e7a5      	b.n	8005014 <_svfiprintf_r+0xd4>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f04f 0c0a 	mov.w	ip, #10
 80050ce:	4619      	mov	r1, r3
 80050d0:	3401      	adds	r4, #1
 80050d2:	9305      	str	r3, [sp, #20]
 80050d4:	4620      	mov	r0, r4
 80050d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050da:	3a30      	subs	r2, #48	; 0x30
 80050dc:	2a09      	cmp	r2, #9
 80050de:	d903      	bls.n	80050e8 <_svfiprintf_r+0x1a8>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0c5      	beq.n	8005070 <_svfiprintf_r+0x130>
 80050e4:	9105      	str	r1, [sp, #20]
 80050e6:	e7c3      	b.n	8005070 <_svfiprintf_r+0x130>
 80050e8:	4604      	mov	r4, r0
 80050ea:	2301      	movs	r3, #1
 80050ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f0:	e7f0      	b.n	80050d4 <_svfiprintf_r+0x194>
 80050f2:	ab03      	add	r3, sp, #12
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	462a      	mov	r2, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <_svfiprintf_r+0x1f8>)
 80050fc:	a904      	add	r1, sp, #16
 80050fe:	f7fe f805 	bl	800310c <_printf_float>
 8005102:	1c42      	adds	r2, r0, #1
 8005104:	4606      	mov	r6, r0
 8005106:	d1d6      	bne.n	80050b6 <_svfiprintf_r+0x176>
 8005108:	89ab      	ldrh	r3, [r5, #12]
 800510a:	065b      	lsls	r3, r3, #25
 800510c:	f53f af2c 	bmi.w	8004f68 <_svfiprintf_r+0x28>
 8005110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005112:	b01d      	add	sp, #116	; 0x74
 8005114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005118:	ab03      	add	r3, sp, #12
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	462a      	mov	r2, r5
 800511e:	4638      	mov	r0, r7
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <_svfiprintf_r+0x1f8>)
 8005122:	a904      	add	r1, sp, #16
 8005124:	f7fe fa8e 	bl	8003644 <_printf_i>
 8005128:	e7eb      	b.n	8005102 <_svfiprintf_r+0x1c2>
 800512a:	bf00      	nop
 800512c:	08005f9c 	.word	0x08005f9c
 8005130:	08005fa6 	.word	0x08005fa6
 8005134:	0800310d 	.word	0x0800310d
 8005138:	08004e89 	.word	0x08004e89
 800513c:	08005fa2 	.word	0x08005fa2

08005140 <_sbrk_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	2300      	movs	r3, #0
 8005144:	4d05      	ldr	r5, [pc, #20]	; (800515c <_sbrk_r+0x1c>)
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb ff9a 	bl	8001084 <_sbrk>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_sbrk_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_sbrk_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	2000027c 	.word	0x2000027c

08005160 <__assert_func>:
 8005160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005162:	4614      	mov	r4, r2
 8005164:	461a      	mov	r2, r3
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <__assert_func+0x2c>)
 8005168:	4605      	mov	r5, r0
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68d8      	ldr	r0, [r3, #12]
 800516e:	b14c      	cbz	r4, 8005184 <__assert_func+0x24>
 8005170:	4b07      	ldr	r3, [pc, #28]	; (8005190 <__assert_func+0x30>)
 8005172:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005176:	9100      	str	r1, [sp, #0]
 8005178:	462b      	mov	r3, r5
 800517a:	4906      	ldr	r1, [pc, #24]	; (8005194 <__assert_func+0x34>)
 800517c:	f000 f80e 	bl	800519c <fiprintf>
 8005180:	f000 faa2 	bl	80056c8 <abort>
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__assert_func+0x38>)
 8005186:	461c      	mov	r4, r3
 8005188:	e7f3      	b.n	8005172 <__assert_func+0x12>
 800518a:	bf00      	nop
 800518c:	2000000c 	.word	0x2000000c
 8005190:	08005fad 	.word	0x08005fad
 8005194:	08005fba 	.word	0x08005fba
 8005198:	08005fe8 	.word	0x08005fe8

0800519c <fiprintf>:
 800519c:	b40e      	push	{r1, r2, r3}
 800519e:	b503      	push	{r0, r1, lr}
 80051a0:	4601      	mov	r1, r0
 80051a2:	ab03      	add	r3, sp, #12
 80051a4:	4805      	ldr	r0, [pc, #20]	; (80051bc <fiprintf+0x20>)
 80051a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	f000 f88d 	bl	80052cc <_vfiprintf_r>
 80051b2:	b002      	add	sp, #8
 80051b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b8:	b003      	add	sp, #12
 80051ba:	4770      	bx	lr
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <__ascii_mbtowc>:
 80051c0:	b082      	sub	sp, #8
 80051c2:	b901      	cbnz	r1, 80051c6 <__ascii_mbtowc+0x6>
 80051c4:	a901      	add	r1, sp, #4
 80051c6:	b142      	cbz	r2, 80051da <__ascii_mbtowc+0x1a>
 80051c8:	b14b      	cbz	r3, 80051de <__ascii_mbtowc+0x1e>
 80051ca:	7813      	ldrb	r3, [r2, #0]
 80051cc:	600b      	str	r3, [r1, #0]
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	1e10      	subs	r0, r2, #0
 80051d2:	bf18      	it	ne
 80051d4:	2001      	movne	r0, #1
 80051d6:	b002      	add	sp, #8
 80051d8:	4770      	bx	lr
 80051da:	4610      	mov	r0, r2
 80051dc:	e7fb      	b.n	80051d6 <__ascii_mbtowc+0x16>
 80051de:	f06f 0001 	mvn.w	r0, #1
 80051e2:	e7f8      	b.n	80051d6 <__ascii_mbtowc+0x16>

080051e4 <memmove>:
 80051e4:	4288      	cmp	r0, r1
 80051e6:	b510      	push	{r4, lr}
 80051e8:	eb01 0402 	add.w	r4, r1, r2
 80051ec:	d902      	bls.n	80051f4 <memmove+0x10>
 80051ee:	4284      	cmp	r4, r0
 80051f0:	4623      	mov	r3, r4
 80051f2:	d807      	bhi.n	8005204 <memmove+0x20>
 80051f4:	1e43      	subs	r3, r0, #1
 80051f6:	42a1      	cmp	r1, r4
 80051f8:	d008      	beq.n	800520c <memmove+0x28>
 80051fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005202:	e7f8      	b.n	80051f6 <memmove+0x12>
 8005204:	4601      	mov	r1, r0
 8005206:	4402      	add	r2, r0
 8005208:	428a      	cmp	r2, r1
 800520a:	d100      	bne.n	800520e <memmove+0x2a>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005216:	e7f7      	b.n	8005208 <memmove+0x24>

08005218 <__malloc_lock>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__malloc_lock+0x8>)
 800521a:	f000 bc15 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	20000284 	.word	0x20000284

08005224 <__malloc_unlock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_unlock+0x8>)
 8005226:	f000 bc10 	b.w	8005a4a <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	20000284 	.word	0x20000284

08005230 <_realloc_r>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	4614      	mov	r4, r2
 8005236:	460e      	mov	r6, r1
 8005238:	b921      	cbnz	r1, 8005244 <_realloc_r+0x14>
 800523a:	4611      	mov	r1, r2
 800523c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005240:	f7ff bdc8 	b.w	8004dd4 <_malloc_r>
 8005244:	b922      	cbnz	r2, 8005250 <_realloc_r+0x20>
 8005246:	f7ff fd79 	bl	8004d3c <_free_r>
 800524a:	4625      	mov	r5, r4
 800524c:	4628      	mov	r0, r5
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	f000 fc60 	bl	8005b14 <_malloc_usable_size_r>
 8005254:	42a0      	cmp	r0, r4
 8005256:	d20f      	bcs.n	8005278 <_realloc_r+0x48>
 8005258:	4621      	mov	r1, r4
 800525a:	4638      	mov	r0, r7
 800525c:	f7ff fdba 	bl	8004dd4 <_malloc_r>
 8005260:	4605      	mov	r5, r0
 8005262:	2800      	cmp	r0, #0
 8005264:	d0f2      	beq.n	800524c <_realloc_r+0x1c>
 8005266:	4631      	mov	r1, r6
 8005268:	4622      	mov	r2, r4
 800526a:	f7ff f9c9 	bl	8004600 <memcpy>
 800526e:	4631      	mov	r1, r6
 8005270:	4638      	mov	r0, r7
 8005272:	f7ff fd63 	bl	8004d3c <_free_r>
 8005276:	e7e9      	b.n	800524c <_realloc_r+0x1c>
 8005278:	4635      	mov	r5, r6
 800527a:	e7e7      	b.n	800524c <_realloc_r+0x1c>

0800527c <__sfputc_r>:
 800527c:	6893      	ldr	r3, [r2, #8]
 800527e:	b410      	push	{r4}
 8005280:	3b01      	subs	r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	6093      	str	r3, [r2, #8]
 8005286:	da07      	bge.n	8005298 <__sfputc_r+0x1c>
 8005288:	6994      	ldr	r4, [r2, #24]
 800528a:	42a3      	cmp	r3, r4
 800528c:	db01      	blt.n	8005292 <__sfputc_r+0x16>
 800528e:	290a      	cmp	r1, #10
 8005290:	d102      	bne.n	8005298 <__sfputc_r+0x1c>
 8005292:	bc10      	pop	{r4}
 8005294:	f000 b94a 	b.w	800552c <__swbuf_r>
 8005298:	6813      	ldr	r3, [r2, #0]
 800529a:	1c58      	adds	r0, r3, #1
 800529c:	6010      	str	r0, [r2, #0]
 800529e:	7019      	strb	r1, [r3, #0]
 80052a0:	4608      	mov	r0, r1
 80052a2:	bc10      	pop	{r4}
 80052a4:	4770      	bx	lr

080052a6 <__sfputs_r>:
 80052a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	4614      	mov	r4, r2
 80052ae:	18d5      	adds	r5, r2, r3
 80052b0:	42ac      	cmp	r4, r5
 80052b2:	d101      	bne.n	80052b8 <__sfputs_r+0x12>
 80052b4:	2000      	movs	r0, #0
 80052b6:	e007      	b.n	80052c8 <__sfputs_r+0x22>
 80052b8:	463a      	mov	r2, r7
 80052ba:	4630      	mov	r0, r6
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	f7ff ffdc 	bl	800527c <__sfputc_r>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d1f3      	bne.n	80052b0 <__sfputs_r+0xa>
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052cc <_vfiprintf_r>:
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	460d      	mov	r5, r1
 80052d2:	4614      	mov	r4, r2
 80052d4:	4698      	mov	r8, r3
 80052d6:	4606      	mov	r6, r0
 80052d8:	b09d      	sub	sp, #116	; 0x74
 80052da:	b118      	cbz	r0, 80052e4 <_vfiprintf_r+0x18>
 80052dc:	6983      	ldr	r3, [r0, #24]
 80052de:	b90b      	cbnz	r3, 80052e4 <_vfiprintf_r+0x18>
 80052e0:	f000 fb14 	bl	800590c <__sinit>
 80052e4:	4b89      	ldr	r3, [pc, #548]	; (800550c <_vfiprintf_r+0x240>)
 80052e6:	429d      	cmp	r5, r3
 80052e8:	d11b      	bne.n	8005322 <_vfiprintf_r+0x56>
 80052ea:	6875      	ldr	r5, [r6, #4]
 80052ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ee:	07d9      	lsls	r1, r3, #31
 80052f0:	d405      	bmi.n	80052fe <_vfiprintf_r+0x32>
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	059a      	lsls	r2, r3, #22
 80052f6:	d402      	bmi.n	80052fe <_vfiprintf_r+0x32>
 80052f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052fa:	f000 fba5 	bl	8005a48 <__retarget_lock_acquire_recursive>
 80052fe:	89ab      	ldrh	r3, [r5, #12]
 8005300:	071b      	lsls	r3, r3, #28
 8005302:	d501      	bpl.n	8005308 <_vfiprintf_r+0x3c>
 8005304:	692b      	ldr	r3, [r5, #16]
 8005306:	b9eb      	cbnz	r3, 8005344 <_vfiprintf_r+0x78>
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f000 f96e 	bl	80055ec <__swsetup_r>
 8005310:	b1c0      	cbz	r0, 8005344 <_vfiprintf_r+0x78>
 8005312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005314:	07dc      	lsls	r4, r3, #31
 8005316:	d50e      	bpl.n	8005336 <_vfiprintf_r+0x6a>
 8005318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800531c:	b01d      	add	sp, #116	; 0x74
 800531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005322:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <_vfiprintf_r+0x244>)
 8005324:	429d      	cmp	r5, r3
 8005326:	d101      	bne.n	800532c <_vfiprintf_r+0x60>
 8005328:	68b5      	ldr	r5, [r6, #8]
 800532a:	e7df      	b.n	80052ec <_vfiprintf_r+0x20>
 800532c:	4b79      	ldr	r3, [pc, #484]	; (8005514 <_vfiprintf_r+0x248>)
 800532e:	429d      	cmp	r5, r3
 8005330:	bf08      	it	eq
 8005332:	68f5      	ldreq	r5, [r6, #12]
 8005334:	e7da      	b.n	80052ec <_vfiprintf_r+0x20>
 8005336:	89ab      	ldrh	r3, [r5, #12]
 8005338:	0598      	lsls	r0, r3, #22
 800533a:	d4ed      	bmi.n	8005318 <_vfiprintf_r+0x4c>
 800533c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800533e:	f000 fb84 	bl	8005a4a <__retarget_lock_release_recursive>
 8005342:	e7e9      	b.n	8005318 <_vfiprintf_r+0x4c>
 8005344:	2300      	movs	r3, #0
 8005346:	9309      	str	r3, [sp, #36]	; 0x24
 8005348:	2320      	movs	r3, #32
 800534a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800534e:	2330      	movs	r3, #48	; 0x30
 8005350:	f04f 0901 	mov.w	r9, #1
 8005354:	f8cd 800c 	str.w	r8, [sp, #12]
 8005358:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005518 <_vfiprintf_r+0x24c>
 800535c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005360:	4623      	mov	r3, r4
 8005362:	469a      	mov	sl, r3
 8005364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005368:	b10a      	cbz	r2, 800536e <_vfiprintf_r+0xa2>
 800536a:	2a25      	cmp	r2, #37	; 0x25
 800536c:	d1f9      	bne.n	8005362 <_vfiprintf_r+0x96>
 800536e:	ebba 0b04 	subs.w	fp, sl, r4
 8005372:	d00b      	beq.n	800538c <_vfiprintf_r+0xc0>
 8005374:	465b      	mov	r3, fp
 8005376:	4622      	mov	r2, r4
 8005378:	4629      	mov	r1, r5
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ff93 	bl	80052a6 <__sfputs_r>
 8005380:	3001      	adds	r0, #1
 8005382:	f000 80aa 	beq.w	80054da <_vfiprintf_r+0x20e>
 8005386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005388:	445a      	add	r2, fp
 800538a:	9209      	str	r2, [sp, #36]	; 0x24
 800538c:	f89a 3000 	ldrb.w	r3, [sl]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a2 	beq.w	80054da <_vfiprintf_r+0x20e>
 8005396:	2300      	movs	r3, #0
 8005398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800539c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a0:	f10a 0a01 	add.w	sl, sl, #1
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ac:	931a      	str	r3, [sp, #104]	; 0x68
 80053ae:	4654      	mov	r4, sl
 80053b0:	2205      	movs	r2, #5
 80053b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b6:	4858      	ldr	r0, [pc, #352]	; (8005518 <_vfiprintf_r+0x24c>)
 80053b8:	f7ff f914 	bl	80045e4 <memchr>
 80053bc:	9a04      	ldr	r2, [sp, #16]
 80053be:	b9d8      	cbnz	r0, 80053f8 <_vfiprintf_r+0x12c>
 80053c0:	06d1      	lsls	r1, r2, #27
 80053c2:	bf44      	itt	mi
 80053c4:	2320      	movmi	r3, #32
 80053c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ca:	0713      	lsls	r3, r2, #28
 80053cc:	bf44      	itt	mi
 80053ce:	232b      	movmi	r3, #43	; 0x2b
 80053d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053d4:	f89a 3000 	ldrb.w	r3, [sl]
 80053d8:	2b2a      	cmp	r3, #42	; 0x2a
 80053da:	d015      	beq.n	8005408 <_vfiprintf_r+0x13c>
 80053dc:	4654      	mov	r4, sl
 80053de:	2000      	movs	r0, #0
 80053e0:	f04f 0c0a 	mov.w	ip, #10
 80053e4:	9a07      	ldr	r2, [sp, #28]
 80053e6:	4621      	mov	r1, r4
 80053e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ec:	3b30      	subs	r3, #48	; 0x30
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d94e      	bls.n	8005490 <_vfiprintf_r+0x1c4>
 80053f2:	b1b0      	cbz	r0, 8005422 <_vfiprintf_r+0x156>
 80053f4:	9207      	str	r2, [sp, #28]
 80053f6:	e014      	b.n	8005422 <_vfiprintf_r+0x156>
 80053f8:	eba0 0308 	sub.w	r3, r0, r8
 80053fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	46a2      	mov	sl, r4
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	e7d2      	b.n	80053ae <_vfiprintf_r+0xe2>
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	1d19      	adds	r1, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	9103      	str	r1, [sp, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	bfbb      	ittet	lt
 8005414:	425b      	neglt	r3, r3
 8005416:	f042 0202 	orrlt.w	r2, r2, #2
 800541a:	9307      	strge	r3, [sp, #28]
 800541c:	9307      	strlt	r3, [sp, #28]
 800541e:	bfb8      	it	lt
 8005420:	9204      	strlt	r2, [sp, #16]
 8005422:	7823      	ldrb	r3, [r4, #0]
 8005424:	2b2e      	cmp	r3, #46	; 0x2e
 8005426:	d10c      	bne.n	8005442 <_vfiprintf_r+0x176>
 8005428:	7863      	ldrb	r3, [r4, #1]
 800542a:	2b2a      	cmp	r3, #42	; 0x2a
 800542c:	d135      	bne.n	800549a <_vfiprintf_r+0x1ce>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	3402      	adds	r4, #2
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	9203      	str	r2, [sp, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfb8      	it	lt
 800543c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005528 <_vfiprintf_r+0x25c>
 8005446:	2203      	movs	r2, #3
 8005448:	4650      	mov	r0, sl
 800544a:	7821      	ldrb	r1, [r4, #0]
 800544c:	f7ff f8ca 	bl	80045e4 <memchr>
 8005450:	b140      	cbz	r0, 8005464 <_vfiprintf_r+0x198>
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	eba0 000a 	sub.w	r0, r0, sl
 8005458:	fa03 f000 	lsl.w	r0, r3, r0
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	3401      	adds	r4, #1
 8005460:	4303      	orrs	r3, r0
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	2206      	movs	r2, #6
 800546a:	482c      	ldr	r0, [pc, #176]	; (800551c <_vfiprintf_r+0x250>)
 800546c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005470:	f7ff f8b8 	bl	80045e4 <memchr>
 8005474:	2800      	cmp	r0, #0
 8005476:	d03f      	beq.n	80054f8 <_vfiprintf_r+0x22c>
 8005478:	4b29      	ldr	r3, [pc, #164]	; (8005520 <_vfiprintf_r+0x254>)
 800547a:	bb1b      	cbnz	r3, 80054c4 <_vfiprintf_r+0x1f8>
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	3307      	adds	r3, #7
 8005480:	f023 0307 	bic.w	r3, r3, #7
 8005484:	3308      	adds	r3, #8
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548a:	443b      	add	r3, r7
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	e767      	b.n	8005360 <_vfiprintf_r+0x94>
 8005490:	460c      	mov	r4, r1
 8005492:	2001      	movs	r0, #1
 8005494:	fb0c 3202 	mla	r2, ip, r2, r3
 8005498:	e7a5      	b.n	80053e6 <_vfiprintf_r+0x11a>
 800549a:	2300      	movs	r3, #0
 800549c:	f04f 0c0a 	mov.w	ip, #10
 80054a0:	4619      	mov	r1, r3
 80054a2:	3401      	adds	r4, #1
 80054a4:	9305      	str	r3, [sp, #20]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ac:	3a30      	subs	r2, #48	; 0x30
 80054ae:	2a09      	cmp	r2, #9
 80054b0:	d903      	bls.n	80054ba <_vfiprintf_r+0x1ee>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0c5      	beq.n	8005442 <_vfiprintf_r+0x176>
 80054b6:	9105      	str	r1, [sp, #20]
 80054b8:	e7c3      	b.n	8005442 <_vfiprintf_r+0x176>
 80054ba:	4604      	mov	r4, r0
 80054bc:	2301      	movs	r3, #1
 80054be:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c2:	e7f0      	b.n	80054a6 <_vfiprintf_r+0x1da>
 80054c4:	ab03      	add	r3, sp, #12
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	462a      	mov	r2, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	4b15      	ldr	r3, [pc, #84]	; (8005524 <_vfiprintf_r+0x258>)
 80054ce:	a904      	add	r1, sp, #16
 80054d0:	f7fd fe1c 	bl	800310c <_printf_float>
 80054d4:	4607      	mov	r7, r0
 80054d6:	1c78      	adds	r0, r7, #1
 80054d8:	d1d6      	bne.n	8005488 <_vfiprintf_r+0x1bc>
 80054da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054dc:	07d9      	lsls	r1, r3, #31
 80054de:	d405      	bmi.n	80054ec <_vfiprintf_r+0x220>
 80054e0:	89ab      	ldrh	r3, [r5, #12]
 80054e2:	059a      	lsls	r2, r3, #22
 80054e4:	d402      	bmi.n	80054ec <_vfiprintf_r+0x220>
 80054e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e8:	f000 faaf 	bl	8005a4a <__retarget_lock_release_recursive>
 80054ec:	89ab      	ldrh	r3, [r5, #12]
 80054ee:	065b      	lsls	r3, r3, #25
 80054f0:	f53f af12 	bmi.w	8005318 <_vfiprintf_r+0x4c>
 80054f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054f6:	e711      	b.n	800531c <_vfiprintf_r+0x50>
 80054f8:	ab03      	add	r3, sp, #12
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	462a      	mov	r2, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <_vfiprintf_r+0x258>)
 8005502:	a904      	add	r1, sp, #16
 8005504:	f7fe f89e 	bl	8003644 <_printf_i>
 8005508:	e7e4      	b.n	80054d4 <_vfiprintf_r+0x208>
 800550a:	bf00      	nop
 800550c:	08006114 	.word	0x08006114
 8005510:	08006134 	.word	0x08006134
 8005514:	080060f4 	.word	0x080060f4
 8005518:	08005f9c 	.word	0x08005f9c
 800551c:	08005fa6 	.word	0x08005fa6
 8005520:	0800310d 	.word	0x0800310d
 8005524:	080052a7 	.word	0x080052a7
 8005528:	08005fa2 	.word	0x08005fa2

0800552c <__swbuf_r>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	460e      	mov	r6, r1
 8005530:	4614      	mov	r4, r2
 8005532:	4605      	mov	r5, r0
 8005534:	b118      	cbz	r0, 800553e <__swbuf_r+0x12>
 8005536:	6983      	ldr	r3, [r0, #24]
 8005538:	b90b      	cbnz	r3, 800553e <__swbuf_r+0x12>
 800553a:	f000 f9e7 	bl	800590c <__sinit>
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <__swbuf_r+0x98>)
 8005540:	429c      	cmp	r4, r3
 8005542:	d12b      	bne.n	800559c <__swbuf_r+0x70>
 8005544:	686c      	ldr	r4, [r5, #4]
 8005546:	69a3      	ldr	r3, [r4, #24]
 8005548:	60a3      	str	r3, [r4, #8]
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	071a      	lsls	r2, r3, #28
 800554e:	d52f      	bpl.n	80055b0 <__swbuf_r+0x84>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	b36b      	cbz	r3, 80055b0 <__swbuf_r+0x84>
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	b2f6      	uxtb	r6, r6
 800555a:	1ac0      	subs	r0, r0, r3
 800555c:	6963      	ldr	r3, [r4, #20]
 800555e:	4637      	mov	r7, r6
 8005560:	4283      	cmp	r3, r0
 8005562:	dc04      	bgt.n	800556e <__swbuf_r+0x42>
 8005564:	4621      	mov	r1, r4
 8005566:	4628      	mov	r0, r5
 8005568:	f000 f93c 	bl	80057e4 <_fflush_r>
 800556c:	bb30      	cbnz	r0, 80055bc <__swbuf_r+0x90>
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	3001      	adds	r0, #1
 8005572:	3b01      	subs	r3, #1
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	6022      	str	r2, [r4, #0]
 800557c:	701e      	strb	r6, [r3, #0]
 800557e:	6963      	ldr	r3, [r4, #20]
 8005580:	4283      	cmp	r3, r0
 8005582:	d004      	beq.n	800558e <__swbuf_r+0x62>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	07db      	lsls	r3, r3, #31
 8005588:	d506      	bpl.n	8005598 <__swbuf_r+0x6c>
 800558a:	2e0a      	cmp	r6, #10
 800558c:	d104      	bne.n	8005598 <__swbuf_r+0x6c>
 800558e:	4621      	mov	r1, r4
 8005590:	4628      	mov	r0, r5
 8005592:	f000 f927 	bl	80057e4 <_fflush_r>
 8005596:	b988      	cbnz	r0, 80055bc <__swbuf_r+0x90>
 8005598:	4638      	mov	r0, r7
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <__swbuf_r+0x9c>)
 800559e:	429c      	cmp	r4, r3
 80055a0:	d101      	bne.n	80055a6 <__swbuf_r+0x7a>
 80055a2:	68ac      	ldr	r4, [r5, #8]
 80055a4:	e7cf      	b.n	8005546 <__swbuf_r+0x1a>
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <__swbuf_r+0xa0>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	bf08      	it	eq
 80055ac:	68ec      	ldreq	r4, [r5, #12]
 80055ae:	e7ca      	b.n	8005546 <__swbuf_r+0x1a>
 80055b0:	4621      	mov	r1, r4
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 f81a 	bl	80055ec <__swsetup_r>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d0cb      	beq.n	8005554 <__swbuf_r+0x28>
 80055bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055c0:	e7ea      	b.n	8005598 <__swbuf_r+0x6c>
 80055c2:	bf00      	nop
 80055c4:	08006114 	.word	0x08006114
 80055c8:	08006134 	.word	0x08006134
 80055cc:	080060f4 	.word	0x080060f4

080055d0 <__ascii_wctomb>:
 80055d0:	4603      	mov	r3, r0
 80055d2:	4608      	mov	r0, r1
 80055d4:	b141      	cbz	r1, 80055e8 <__ascii_wctomb+0x18>
 80055d6:	2aff      	cmp	r2, #255	; 0xff
 80055d8:	d904      	bls.n	80055e4 <__ascii_wctomb+0x14>
 80055da:	228a      	movs	r2, #138	; 0x8a
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	4770      	bx	lr
 80055e4:	2001      	movs	r0, #1
 80055e6:	700a      	strb	r2, [r1, #0]
 80055e8:	4770      	bx	lr
	...

080055ec <__swsetup_r>:
 80055ec:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <__swsetup_r+0xcc>)
 80055ee:	b570      	push	{r4, r5, r6, lr}
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	4606      	mov	r6, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	b125      	cbz	r5, 8005602 <__swsetup_r+0x16>
 80055f8:	69ab      	ldr	r3, [r5, #24]
 80055fa:	b913      	cbnz	r3, 8005602 <__swsetup_r+0x16>
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 f985 	bl	800590c <__sinit>
 8005602:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <__swsetup_r+0xd0>)
 8005604:	429c      	cmp	r4, r3
 8005606:	d10f      	bne.n	8005628 <__swsetup_r+0x3c>
 8005608:	686c      	ldr	r4, [r5, #4]
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005610:	0719      	lsls	r1, r3, #28
 8005612:	d42c      	bmi.n	800566e <__swsetup_r+0x82>
 8005614:	06dd      	lsls	r5, r3, #27
 8005616:	d411      	bmi.n	800563c <__swsetup_r+0x50>
 8005618:	2309      	movs	r3, #9
 800561a:	6033      	str	r3, [r6, #0]
 800561c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	e03e      	b.n	80056a6 <__swsetup_r+0xba>
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <__swsetup_r+0xd4>)
 800562a:	429c      	cmp	r4, r3
 800562c:	d101      	bne.n	8005632 <__swsetup_r+0x46>
 800562e:	68ac      	ldr	r4, [r5, #8]
 8005630:	e7eb      	b.n	800560a <__swsetup_r+0x1e>
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <__swsetup_r+0xd8>)
 8005634:	429c      	cmp	r4, r3
 8005636:	bf08      	it	eq
 8005638:	68ec      	ldreq	r4, [r5, #12]
 800563a:	e7e6      	b.n	800560a <__swsetup_r+0x1e>
 800563c:	0758      	lsls	r0, r3, #29
 800563e:	d512      	bpl.n	8005666 <__swsetup_r+0x7a>
 8005640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005642:	b141      	cbz	r1, 8005656 <__swsetup_r+0x6a>
 8005644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005648:	4299      	cmp	r1, r3
 800564a:	d002      	beq.n	8005652 <__swsetup_r+0x66>
 800564c:	4630      	mov	r0, r6
 800564e:	f7ff fb75 	bl	8004d3c <_free_r>
 8005652:	2300      	movs	r3, #0
 8005654:	6363      	str	r3, [r4, #52]	; 0x34
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800565c:	81a3      	strh	r3, [r4, #12]
 800565e:	2300      	movs	r3, #0
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f043 0308 	orr.w	r3, r3, #8
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	b94b      	cbnz	r3, 8005686 <__swsetup_r+0x9a>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567c:	d003      	beq.n	8005686 <__swsetup_r+0x9a>
 800567e:	4621      	mov	r1, r4
 8005680:	4630      	mov	r0, r6
 8005682:	f000 fa07 	bl	8005a94 <__smakebuf_r>
 8005686:	89a0      	ldrh	r0, [r4, #12]
 8005688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800568c:	f010 0301 	ands.w	r3, r0, #1
 8005690:	d00a      	beq.n	80056a8 <__swsetup_r+0xbc>
 8005692:	2300      	movs	r3, #0
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	6963      	ldr	r3, [r4, #20]
 8005698:	425b      	negs	r3, r3
 800569a:	61a3      	str	r3, [r4, #24]
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	b943      	cbnz	r3, 80056b2 <__swsetup_r+0xc6>
 80056a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056a4:	d1ba      	bne.n	800561c <__swsetup_r+0x30>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	0781      	lsls	r1, r0, #30
 80056aa:	bf58      	it	pl
 80056ac:	6963      	ldrpl	r3, [r4, #20]
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	e7f4      	b.n	800569c <__swsetup_r+0xb0>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e7f7      	b.n	80056a6 <__swsetup_r+0xba>
 80056b6:	bf00      	nop
 80056b8:	2000000c 	.word	0x2000000c
 80056bc:	08006114 	.word	0x08006114
 80056c0:	08006134 	.word	0x08006134
 80056c4:	080060f4 	.word	0x080060f4

080056c8 <abort>:
 80056c8:	2006      	movs	r0, #6
 80056ca:	b508      	push	{r3, lr}
 80056cc:	f000 fa52 	bl	8005b74 <raise>
 80056d0:	2001      	movs	r0, #1
 80056d2:	f7fb fc63 	bl	8000f9c <_exit>
	...

080056d8 <__sflush_r>:
 80056d8:	898a      	ldrh	r2, [r1, #12]
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	0710      	lsls	r0, r2, #28
 80056e2:	460c      	mov	r4, r1
 80056e4:	d458      	bmi.n	8005798 <__sflush_r+0xc0>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc05      	bgt.n	80056f8 <__sflush_r+0x20>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc02      	bgt.n	80056f8 <__sflush_r+0x20>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0f9      	beq.n	80056f2 <__sflush_r+0x1a>
 80056fe:	2300      	movs	r3, #0
 8005700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005704:	682f      	ldr	r7, [r5, #0]
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	d032      	beq.n	8005770 <__sflush_r+0x98>
 800570a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	075a      	lsls	r2, r3, #29
 8005710:	d505      	bpl.n	800571e <__sflush_r+0x46>
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005718:	b10b      	cbz	r3, 800571e <__sflush_r+0x46>
 800571a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571c:	1ac0      	subs	r0, r0, r3
 800571e:	2300      	movs	r3, #0
 8005720:	4602      	mov	r2, r0
 8005722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005724:	4628      	mov	r0, r5
 8005726:	6a21      	ldr	r1, [r4, #32]
 8005728:	47b0      	blx	r6
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	d106      	bne.n	800573e <__sflush_r+0x66>
 8005730:	6829      	ldr	r1, [r5, #0]
 8005732:	291d      	cmp	r1, #29
 8005734:	d82c      	bhi.n	8005790 <__sflush_r+0xb8>
 8005736:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <__sflush_r+0x108>)
 8005738:	40ca      	lsrs	r2, r1
 800573a:	07d6      	lsls	r6, r2, #31
 800573c:	d528      	bpl.n	8005790 <__sflush_r+0xb8>
 800573e:	2200      	movs	r2, #0
 8005740:	6062      	str	r2, [r4, #4]
 8005742:	6922      	ldr	r2, [r4, #16]
 8005744:	04d9      	lsls	r1, r3, #19
 8005746:	6022      	str	r2, [r4, #0]
 8005748:	d504      	bpl.n	8005754 <__sflush_r+0x7c>
 800574a:	1c42      	adds	r2, r0, #1
 800574c:	d101      	bne.n	8005752 <__sflush_r+0x7a>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	b903      	cbnz	r3, 8005754 <__sflush_r+0x7c>
 8005752:	6560      	str	r0, [r4, #84]	; 0x54
 8005754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005756:	602f      	str	r7, [r5, #0]
 8005758:	2900      	cmp	r1, #0
 800575a:	d0ca      	beq.n	80056f2 <__sflush_r+0x1a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__sflush_r+0x92>
 8005764:	4628      	mov	r0, r5
 8005766:	f7ff fae9 	bl	8004d3c <_free_r>
 800576a:	2000      	movs	r0, #0
 800576c:	6360      	str	r0, [r4, #52]	; 0x34
 800576e:	e7c1      	b.n	80056f4 <__sflush_r+0x1c>
 8005770:	6a21      	ldr	r1, [r4, #32]
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c41      	adds	r1, r0, #1
 800577a:	d1c7      	bne.n	800570c <__sflush_r+0x34>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c4      	beq.n	800570c <__sflush_r+0x34>
 8005782:	2b1d      	cmp	r3, #29
 8005784:	d001      	beq.n	800578a <__sflush_r+0xb2>
 8005786:	2b16      	cmp	r3, #22
 8005788:	d101      	bne.n	800578e <__sflush_r+0xb6>
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	e7b1      	b.n	80056f2 <__sflush_r+0x1a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x1c>
 8005798:	690f      	ldr	r7, [r1, #16]
 800579a:	2f00      	cmp	r7, #0
 800579c:	d0a9      	beq.n	80056f2 <__sflush_r+0x1a>
 800579e:	0793      	lsls	r3, r2, #30
 80057a0:	bf18      	it	ne
 80057a2:	2300      	movne	r3, #0
 80057a4:	680e      	ldr	r6, [r1, #0]
 80057a6:	bf08      	it	eq
 80057a8:	694b      	ldreq	r3, [r1, #20]
 80057aa:	eba6 0807 	sub.w	r8, r6, r7
 80057ae:	600f      	str	r7, [r1, #0]
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	dd9c      	ble.n	80056f2 <__sflush_r+0x1a>
 80057b8:	4643      	mov	r3, r8
 80057ba:	463a      	mov	r2, r7
 80057bc:	4628      	mov	r0, r5
 80057be:	6a21      	ldr	r1, [r4, #32]
 80057c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057c2:	47b0      	blx	r6
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dc06      	bgt.n	80057d6 <__sflush_r+0xfe>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	e78e      	b.n	80056f4 <__sflush_r+0x1c>
 80057d6:	4407      	add	r7, r0
 80057d8:	eba8 0800 	sub.w	r8, r8, r0
 80057dc:	e7e9      	b.n	80057b2 <__sflush_r+0xda>
 80057de:	bf00      	nop
 80057e0:	20400001 	.word	0x20400001

080057e4 <_fflush_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b913      	cbnz	r3, 80057f4 <_fflush_r+0x10>
 80057ee:	2500      	movs	r5, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	b118      	cbz	r0, 80057fe <_fflush_r+0x1a>
 80057f6:	6983      	ldr	r3, [r0, #24]
 80057f8:	b90b      	cbnz	r3, 80057fe <_fflush_r+0x1a>
 80057fa:	f000 f887 	bl	800590c <__sinit>
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <_fflush_r+0x6c>)
 8005800:	429c      	cmp	r4, r3
 8005802:	d11b      	bne.n	800583c <_fflush_r+0x58>
 8005804:	686c      	ldr	r4, [r5, #4]
 8005806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <_fflush_r+0xa>
 800580e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	d404      	bmi.n	800581e <_fflush_r+0x3a>
 8005814:	0599      	lsls	r1, r3, #22
 8005816:	d402      	bmi.n	800581e <_fflush_r+0x3a>
 8005818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581a:	f000 f915 	bl	8005a48 <__retarget_lock_acquire_recursive>
 800581e:	4628      	mov	r0, r5
 8005820:	4621      	mov	r1, r4
 8005822:	f7ff ff59 	bl	80056d8 <__sflush_r>
 8005826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005828:	4605      	mov	r5, r0
 800582a:	07da      	lsls	r2, r3, #31
 800582c:	d4e0      	bmi.n	80057f0 <_fflush_r+0xc>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	d4dd      	bmi.n	80057f0 <_fflush_r+0xc>
 8005834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005836:	f000 f908 	bl	8005a4a <__retarget_lock_release_recursive>
 800583a:	e7d9      	b.n	80057f0 <_fflush_r+0xc>
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_fflush_r+0x70>)
 800583e:	429c      	cmp	r4, r3
 8005840:	d101      	bne.n	8005846 <_fflush_r+0x62>
 8005842:	68ac      	ldr	r4, [r5, #8]
 8005844:	e7df      	b.n	8005806 <_fflush_r+0x22>
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <_fflush_r+0x74>)
 8005848:	429c      	cmp	r4, r3
 800584a:	bf08      	it	eq
 800584c:	68ec      	ldreq	r4, [r5, #12]
 800584e:	e7da      	b.n	8005806 <_fflush_r+0x22>
 8005850:	08006114 	.word	0x08006114
 8005854:	08006134 	.word	0x08006134
 8005858:	080060f4 	.word	0x080060f4

0800585c <std>:
 800585c:	2300      	movs	r3, #0
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	e9c0 3300 	strd	r3, r3, [r0]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	6183      	str	r3, [r0, #24]
 8005874:	4619      	mov	r1, r3
 8005876:	2208      	movs	r2, #8
 8005878:	305c      	adds	r0, #92	; 0x5c
 800587a:	f7fd fba1 	bl	8002fc0 <memset>
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x38>)
 8005880:	6224      	str	r4, [r4, #32]
 8005882:	6263      	str	r3, [r4, #36]	; 0x24
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <std+0x3c>)
 8005886:	62a3      	str	r3, [r4, #40]	; 0x28
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <std+0x40>)
 800588a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <std+0x44>)
 800588e:	6323      	str	r3, [r4, #48]	; 0x30
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	08005bad 	.word	0x08005bad
 8005898:	08005bcf 	.word	0x08005bcf
 800589c:	08005c07 	.word	0x08005c07
 80058a0:	08005c2b 	.word	0x08005c2b

080058a4 <_cleanup_r>:
 80058a4:	4901      	ldr	r1, [pc, #4]	; (80058ac <_cleanup_r+0x8>)
 80058a6:	f000 b8af 	b.w	8005a08 <_fwalk_reent>
 80058aa:	bf00      	nop
 80058ac:	080057e5 	.word	0x080057e5

080058b0 <__sfmoreglue>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	2568      	movs	r5, #104	; 0x68
 80058b4:	1e4a      	subs	r2, r1, #1
 80058b6:	4355      	muls	r5, r2
 80058b8:	460e      	mov	r6, r1
 80058ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058be:	f7ff fa89 	bl	8004dd4 <_malloc_r>
 80058c2:	4604      	mov	r4, r0
 80058c4:	b140      	cbz	r0, 80058d8 <__sfmoreglue+0x28>
 80058c6:	2100      	movs	r1, #0
 80058c8:	e9c0 1600 	strd	r1, r6, [r0]
 80058cc:	300c      	adds	r0, #12
 80058ce:	60a0      	str	r0, [r4, #8]
 80058d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d4:	f7fd fb74 	bl	8002fc0 <memset>
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}

080058dc <__sfp_lock_acquire>:
 80058dc:	4801      	ldr	r0, [pc, #4]	; (80058e4 <__sfp_lock_acquire+0x8>)
 80058de:	f000 b8b3 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058e2:	bf00      	nop
 80058e4:	20000288 	.word	0x20000288

080058e8 <__sfp_lock_release>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__sfp_lock_release+0x8>)
 80058ea:	f000 b8ae 	b.w	8005a4a <__retarget_lock_release_recursive>
 80058ee:	bf00      	nop
 80058f0:	20000288 	.word	0x20000288

080058f4 <__sinit_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__sinit_lock_acquire+0x8>)
 80058f6:	f000 b8a7 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000283 	.word	0x20000283

08005900 <__sinit_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <__sinit_lock_release+0x8>)
 8005902:	f000 b8a2 	b.w	8005a4a <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	20000283 	.word	0x20000283

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sinit_lock_acquire>
 8005914:	69a3      	ldr	r3, [r4, #24]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sinit_lock_release>
 8005920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005924:	6523      	str	r3, [r4, #80]	; 0x50
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <__sinit+0x68>)
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <__sinit+0x6c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62a2      	str	r2, [r4, #40]	; 0x28
 800592e:	42a3      	cmp	r3, r4
 8005930:	bf08      	it	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	4620      	mov	r0, r4
 8005936:	bf08      	it	eq
 8005938:	61a3      	streq	r3, [r4, #24]
 800593a:	f000 f81f 	bl	800597c <__sfp>
 800593e:	6060      	str	r0, [r4, #4]
 8005940:	4620      	mov	r0, r4
 8005942:	f000 f81b 	bl	800597c <__sfp>
 8005946:	60a0      	str	r0, [r4, #8]
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f817 	bl	800597c <__sfp>
 800594e:	2200      	movs	r2, #0
 8005950:	2104      	movs	r1, #4
 8005952:	60e0      	str	r0, [r4, #12]
 8005954:	6860      	ldr	r0, [r4, #4]
 8005956:	f7ff ff81 	bl	800585c <std>
 800595a:	2201      	movs	r2, #1
 800595c:	2109      	movs	r1, #9
 800595e:	68a0      	ldr	r0, [r4, #8]
 8005960:	f7ff ff7c 	bl	800585c <std>
 8005964:	2202      	movs	r2, #2
 8005966:	2112      	movs	r1, #18
 8005968:	68e0      	ldr	r0, [r4, #12]
 800596a:	f7ff ff77 	bl	800585c <std>
 800596e:	2301      	movs	r3, #1
 8005970:	61a3      	str	r3, [r4, #24]
 8005972:	e7d1      	b.n	8005918 <__sinit+0xc>
 8005974:	08005d74 	.word	0x08005d74
 8005978:	080058a5 	.word	0x080058a5

0800597c <__sfp>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	4607      	mov	r7, r0
 8005980:	f7ff ffac 	bl	80058dc <__sfp_lock_acquire>
 8005984:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <__sfp+0x84>)
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	69b3      	ldr	r3, [r6, #24]
 800598a:	b913      	cbnz	r3, 8005992 <__sfp+0x16>
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbd 	bl	800590c <__sinit>
 8005992:	3648      	adds	r6, #72	; 0x48
 8005994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005998:	3b01      	subs	r3, #1
 800599a:	d503      	bpl.n	80059a4 <__sfp+0x28>
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	b30b      	cbz	r3, 80059e4 <__sfp+0x68>
 80059a0:	6836      	ldr	r6, [r6, #0]
 80059a2:	e7f7      	b.n	8005994 <__sfp+0x18>
 80059a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059a8:	b9d5      	cbnz	r5, 80059e0 <__sfp+0x64>
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <__sfp+0x88>)
 80059ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b0:	60e3      	str	r3, [r4, #12]
 80059b2:	6665      	str	r5, [r4, #100]	; 0x64
 80059b4:	f000 f847 	bl	8005a46 <__retarget_lock_init_recursive>
 80059b8:	f7ff ff96 	bl	80058e8 <__sfp_lock_release>
 80059bc:	2208      	movs	r2, #8
 80059be:	4629      	mov	r1, r5
 80059c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059c8:	6025      	str	r5, [r4, #0]
 80059ca:	61a5      	str	r5, [r4, #24]
 80059cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d0:	f7fd faf6 	bl	8002fc0 <memset>
 80059d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059dc:	4620      	mov	r0, r4
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	3468      	adds	r4, #104	; 0x68
 80059e2:	e7d9      	b.n	8005998 <__sfp+0x1c>
 80059e4:	2104      	movs	r1, #4
 80059e6:	4638      	mov	r0, r7
 80059e8:	f7ff ff62 	bl	80058b0 <__sfmoreglue>
 80059ec:	4604      	mov	r4, r0
 80059ee:	6030      	str	r0, [r6, #0]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1d5      	bne.n	80059a0 <__sfp+0x24>
 80059f4:	f7ff ff78 	bl	80058e8 <__sfp_lock_release>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	e7ee      	b.n	80059dc <__sfp+0x60>
 80059fe:	bf00      	nop
 8005a00:	08005d74 	.word	0x08005d74
 8005a04:	ffff0001 	.word	0xffff0001

08005a08 <_fwalk_reent>:
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	4688      	mov	r8, r1
 8005a10:	2700      	movs	r7, #0
 8005a12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a1e:	d505      	bpl.n	8005a2c <_fwalk_reent+0x24>
 8005a20:	6824      	ldr	r4, [r4, #0]
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	d1f7      	bne.n	8005a16 <_fwalk_reent+0xe>
 8005a26:	4638      	mov	r0, r7
 8005a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2c:	89ab      	ldrh	r3, [r5, #12]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d907      	bls.n	8005a42 <_fwalk_reent+0x3a>
 8005a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a36:	3301      	adds	r3, #1
 8005a38:	d003      	beq.n	8005a42 <_fwalk_reent+0x3a>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	47c0      	blx	r8
 8005a40:	4307      	orrs	r7, r0
 8005a42:	3568      	adds	r5, #104	; 0x68
 8005a44:	e7e9      	b.n	8005a1a <_fwalk_reent+0x12>

08005a46 <__retarget_lock_init_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <__retarget_lock_acquire_recursive>:
 8005a48:	4770      	bx	lr

08005a4a <__retarget_lock_release_recursive>:
 8005a4a:	4770      	bx	lr

08005a4c <__swhatbuf_r>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	460e      	mov	r6, r1
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	4614      	mov	r4, r2
 8005a56:	2900      	cmp	r1, #0
 8005a58:	461d      	mov	r5, r3
 8005a5a:	b096      	sub	sp, #88	; 0x58
 8005a5c:	da07      	bge.n	8005a6e <__swhatbuf_r+0x22>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	89b3      	ldrh	r3, [r6, #12]
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	d410      	bmi.n	8005a8a <__swhatbuf_r+0x3e>
 8005a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6c:	e00e      	b.n	8005a8c <__swhatbuf_r+0x40>
 8005a6e:	466a      	mov	r2, sp
 8005a70:	f000 f902 	bl	8005c78 <_fstat_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dbf2      	blt.n	8005a5e <__swhatbuf_r+0x12>
 8005a78:	9a01      	ldr	r2, [sp, #4]
 8005a7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a82:	425a      	negs	r2, r3
 8005a84:	415a      	adcs	r2, r3
 8005a86:	602a      	str	r2, [r5, #0]
 8005a88:	e7ee      	b.n	8005a68 <__swhatbuf_r+0x1c>
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	b016      	add	sp, #88	; 0x58
 8005a92:	bd70      	pop	{r4, r5, r6, pc}

08005a94 <__smakebuf_r>:
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a98:	079d      	lsls	r5, r3, #30
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	d507      	bpl.n	8005ab0 <__smakebuf_r+0x1c>
 8005aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	6163      	str	r3, [r4, #20]
 8005aac:	b002      	add	sp, #8
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	466a      	mov	r2, sp
 8005ab2:	ab01      	add	r3, sp, #4
 8005ab4:	f7ff ffca 	bl	8005a4c <__swhatbuf_r>
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	4605      	mov	r5, r0
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7ff f989 	bl	8004dd4 <_malloc_r>
 8005ac2:	b948      	cbnz	r0, 8005ad8 <__smakebuf_r+0x44>
 8005ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac8:	059a      	lsls	r2, r3, #22
 8005aca:	d4ef      	bmi.n	8005aac <__smakebuf_r+0x18>
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	e7e3      	b.n	8005aa0 <__smakebuf_r+0xc>
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <__smakebuf_r+0x7c>)
 8005ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	6020      	str	r0, [r4, #0]
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	6120      	str	r0, [r4, #16]
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	9b01      	ldr	r3, [sp, #4]
 8005aee:	b15b      	cbz	r3, 8005b08 <__smakebuf_r+0x74>
 8005af0:	4630      	mov	r0, r6
 8005af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af6:	f000 f8d1 	bl	8005c9c <_isatty_r>
 8005afa:	b128      	cbz	r0, 8005b08 <__smakebuf_r+0x74>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	89a0      	ldrh	r0, [r4, #12]
 8005b0a:	4305      	orrs	r5, r0
 8005b0c:	81a5      	strh	r5, [r4, #12]
 8005b0e:	e7cd      	b.n	8005aac <__smakebuf_r+0x18>
 8005b10:	080058a5 	.word	0x080058a5

08005b14 <_malloc_usable_size_r>:
 8005b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b18:	1f18      	subs	r0, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bfbc      	itt	lt
 8005b1e:	580b      	ldrlt	r3, [r1, r0]
 8005b20:	18c0      	addlt	r0, r0, r3
 8005b22:	4770      	bx	lr

08005b24 <_raise_r>:
 8005b24:	291f      	cmp	r1, #31
 8005b26:	b538      	push	{r3, r4, r5, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	d904      	bls.n	8005b38 <_raise_r+0x14>
 8005b2e:	2316      	movs	r3, #22
 8005b30:	6003      	str	r3, [r0, #0]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b3a:	b112      	cbz	r2, 8005b42 <_raise_r+0x1e>
 8005b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b40:	b94b      	cbnz	r3, 8005b56 <_raise_r+0x32>
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 f830 	bl	8005ba8 <_getpid_r>
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b52:	f000 b817 	b.w	8005b84 <_kill_r>
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d00a      	beq.n	8005b70 <_raise_r+0x4c>
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	d103      	bne.n	8005b66 <_raise_r+0x42>
 8005b5e:	2316      	movs	r3, #22
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	2001      	movs	r0, #1
 8005b64:	e7e7      	b.n	8005b36 <_raise_r+0x12>
 8005b66:	2400      	movs	r4, #0
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b6e:	4798      	blx	r3
 8005b70:	2000      	movs	r0, #0
 8005b72:	e7e0      	b.n	8005b36 <_raise_r+0x12>

08005b74 <raise>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <raise+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f7ff bfd3 	b.w	8005b24 <_raise_r>
 8005b7e:	bf00      	nop
 8005b80:	2000000c 	.word	0x2000000c

08005b84 <_kill_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	2300      	movs	r3, #0
 8005b88:	4d06      	ldr	r5, [pc, #24]	; (8005ba4 <_kill_r+0x20>)
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	f7fb f9f3 	bl	8000f7c <_kill>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d102      	bne.n	8005ba0 <_kill_r+0x1c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b103      	cbz	r3, 8005ba0 <_kill_r+0x1c>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000027c 	.word	0x2000027c

08005ba8 <_getpid_r>:
 8005ba8:	f7fb b9e1 	b.w	8000f6e <_getpid>

08005bac <__sread>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	460c      	mov	r4, r1
 8005bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb4:	f000 f894 	bl	8005ce0 <_read_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	bfab      	itete	ge
 8005bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc0:	181b      	addge	r3, r3, r0
 8005bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bc6:	bfac      	ite	ge
 8005bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bca:	81a3      	strhlt	r3, [r4, #12]
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <__swrite>:
 8005bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd2:	461f      	mov	r7, r3
 8005bd4:	898b      	ldrh	r3, [r1, #12]
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	05db      	lsls	r3, r3, #23
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4616      	mov	r6, r2
 8005bde:	d505      	bpl.n	8005bec <__swrite+0x1e>
 8005be0:	2302      	movs	r3, #2
 8005be2:	2200      	movs	r2, #0
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	f000 f868 	bl	8005cbc <_lseek_r>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	4632      	mov	r2, r6
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	f000 b817 	b.w	8005c34 <_write_r>

08005c06 <__sseek>:
 8005c06:	b510      	push	{r4, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0e:	f000 f855 	bl	8005cbc <_lseek_r>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	bf15      	itete	ne
 8005c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c22:	81a3      	strheq	r3, [r4, #12]
 8005c24:	bf18      	it	ne
 8005c26:	81a3      	strhne	r3, [r4, #12]
 8005c28:	bd10      	pop	{r4, pc}

08005c2a <__sclose>:
 8005c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2e:	f000 b813 	b.w	8005c58 <_close_r>
	...

08005c34 <_write_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4d05      	ldr	r5, [pc, #20]	; (8005c54 <_write_r+0x20>)
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fb f9d1 	bl	8000fea <_write>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_write_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_write_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	2000027c 	.word	0x2000027c

08005c58 <_close_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4d05      	ldr	r5, [pc, #20]	; (8005c74 <_close_r+0x1c>)
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fb f9dd 	bl	8001022 <_close>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_close_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_close_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	2000027c 	.word	0x2000027c

08005c78 <_fstat_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4d06      	ldr	r5, [pc, #24]	; (8005c98 <_fstat_r+0x20>)
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4608      	mov	r0, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	f7fb f9d7 	bl	8001038 <_fstat>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d102      	bne.n	8005c94 <_fstat_r+0x1c>
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	b103      	cbz	r3, 8005c94 <_fstat_r+0x1c>
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	bd38      	pop	{r3, r4, r5, pc}
 8005c96:	bf00      	nop
 8005c98:	2000027c 	.word	0x2000027c

08005c9c <_isatty_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	4d05      	ldr	r5, [pc, #20]	; (8005cb8 <_isatty_r+0x1c>)
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fb f9d5 	bl	8001056 <_isatty>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_isatty_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_isatty_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	2000027c 	.word	0x2000027c

08005cbc <_lseek_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4d05      	ldr	r5, [pc, #20]	; (8005cdc <_lseek_r+0x20>)
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f7fb f9cd 	bl	800106a <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_lseek_r+0x1e>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_lseek_r+0x1e>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	2000027c 	.word	0x2000027c

08005ce0 <_read_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4d05      	ldr	r5, [pc, #20]	; (8005d00 <_read_r+0x20>)
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f7fb f95e 	bl	8000fb0 <_read>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_read_r+0x1e>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_read_r+0x1e>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	2000027c 	.word	0x2000027c

08005d04 <_init>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr

08005d10 <_fini>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr
